{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "aa436d0e",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-10-27T21:15:44.853278Z",
     "iopub.status.busy": "2024-10-27T21:15:44.852715Z",
     "iopub.status.idle": "2024-10-27T21:15:45.870946Z",
     "shell.execute_reply": "2024-10-27T21:15:45.869437Z",
     "shell.execute_reply.started": "2024-10-27T21:15:44.853216Z"
    },
    "papermill": {
     "duration": 0.015567,
     "end_time": "2024-11-26T20:27:51.787726",
     "exception": false,
     "start_time": "2024-11-26T20:27:51.772159",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# IMPORTS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "65febe8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:27:51.818738Z",
     "iopub.status.busy": "2024-11-26T20:27:51.818303Z",
     "iopub.status.idle": "2024-11-26T20:27:54.033561Z",
     "shell.execute_reply": "2024-11-26T20:27:54.032480Z"
    },
    "papermill": {
     "duration": 2.23291,
     "end_time": "2024-11-26T20:27:54.036248",
     "exception": false,
     "start_time": "2024-11-26T20:27:51.803338",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import json\n",
    "import pypdf\n",
    "import typing as T\n",
    "import joblib as jl\n",
    "import pandas as pd\n",
    "import IPython as ipy\n",
    "import datetime as dt\n",
    "import functools as fn\n",
    "import kaggle_secrets as ks\n",
    "import typing_extensions as TX\n",
    "import matplotlib.pyplot as plt\n",
    "import google.generativeai as genai"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62325252",
   "metadata": {
    "papermill": {
     "duration": 0.013492,
     "end_time": "2024-11-26T20:27:54.063668",
     "exception": false,
     "start_time": "2024-11-26T20:27:54.050176",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# SECRETS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b19f2067",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:27:54.093927Z",
     "iopub.status.busy": "2024-11-26T20:27:54.092497Z",
     "iopub.status.idle": "2024-11-26T20:27:54.563598Z",
     "shell.execute_reply": "2024-11-26T20:27:54.562280Z"
    },
    "papermill": {
     "duration": 0.488631,
     "end_time": "2024-11-26T20:27:54.566106",
     "exception": false,
     "start_time": "2024-11-26T20:27:54.077475",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "user_secrets = ks.UserSecretsClient()\n",
    "genai.configure(api_key=user_secrets.get_secret(\"GEMINI_API_KEY\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7feed811",
   "metadata": {
    "papermill": {
     "duration": 0.013868,
     "end_time": "2024-11-26T20:27:54.593994",
     "exception": false,
     "start_time": "2024-11-26T20:27:54.580126",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# CONFIGS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "932a0a3c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:27:54.623964Z",
     "iopub.status.busy": "2024-11-26T20:27:54.622814Z",
     "iopub.status.idle": "2024-11-26T20:27:54.628229Z",
     "shell.execute_reply": "2024-11-26T20:27:54.627263Z"
    },
    "papermill": {
     "duration": 0.022906,
     "end_time": "2024-11-26T20:27:54.630744",
     "exception": false,
     "start_time": "2024-11-26T20:27:54.607838",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "METADATA_FILE = '/kaggle/input/open-textbook-library/metadata.parquet'\n",
    "TEXTBOOK_FOLDER = '/kaggle/input/open-textbook-library/textbooks'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a8c0b375",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:27:54.660075Z",
     "iopub.status.busy": "2024-11-26T20:27:54.659689Z",
     "iopub.status.idle": "2024-11-26T20:27:54.664541Z",
     "shell.execute_reply": "2024-11-26T20:27:54.663415Z"
    },
    "papermill": {
     "duration": 0.0223,
     "end_time": "2024-11-26T20:27:54.666925",
     "exception": false,
     "start_time": "2024-11-26T20:27:54.644625",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "MEMORY_DIRECTORY = '/kaggle/working/.cache/'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c889c0c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:27:54.696419Z",
     "iopub.status.busy": "2024-11-26T20:27:54.696039Z",
     "iopub.status.idle": "2024-11-26T20:27:54.700649Z",
     "shell.execute_reply": "2024-11-26T20:27:54.699646Z"
    },
    "papermill": {
     "duration": 0.021887,
     "end_time": "2024-11-26T20:27:54.702697",
     "exception": false,
     "start_time": "2024-11-26T20:27:54.680810",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "GENERATIVE_MODEL = 'gemini-1.5-flash-002'\n",
    "GENERATIVE_TEMPERATURE = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "33de1955",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:27:54.732576Z",
     "iopub.status.busy": "2024-11-26T20:27:54.731651Z",
     "iopub.status.idle": "2024-11-26T20:27:54.736314Z",
     "shell.execute_reply": "2024-11-26T20:27:54.735195Z"
    },
    "papermill": {
     "duration": 0.0215,
     "end_time": "2024-11-26T20:27:54.738271",
     "exception": false,
     "start_time": "2024-11-26T20:27:54.716771",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "RETRIEVAL_TOP_K = 5\n",
    "RETRIEVAL_MAX_OUTPUT_TOKENS = RETRIEVAL_TOP_K * 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b52ce93f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:27:54.767718Z",
     "iopub.status.busy": "2024-11-26T20:27:54.767332Z",
     "iopub.status.idle": "2024-11-26T20:27:54.772289Z",
     "shell.execute_reply": "2024-11-26T20:27:54.771157Z"
    },
    "papermill": {
     "duration": 0.022216,
     "end_time": "2024-11-26T20:27:54.774552",
     "exception": false,
     "start_time": "2024-11-26T20:27:54.752336",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "ASSISTANT_TTL_HOURS = 1\n",
    "ASSISTANT_MAX_OUTPUT_TOKENS = 3000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c6310dd5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:27:54.804087Z",
     "iopub.status.busy": "2024-11-26T20:27:54.803723Z",
     "iopub.status.idle": "2024-11-26T20:27:54.809107Z",
     "shell.execute_reply": "2024-11-26T20:27:54.808063Z"
    },
    "papermill": {
     "duration": 0.022492,
     "end_time": "2024-11-26T20:27:54.811059",
     "exception": false,
     "start_time": "2024-11-26T20:27:54.788567",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "SAFETY_SETTINGS = {\n",
    "    genai.types.HarmCategory.HARM_CATEGORY_HARASSMENT: genai.types.HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,\n",
    "    genai.types.HarmCategory.HARM_CATEGORY_HATE_SPEECH: genai.types.HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,\n",
    "    genai.types.HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: genai.types.HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,\n",
    "    genai.types.HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: genai.types.HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04a63cb2",
   "metadata": {
    "papermill": {
     "duration": 0.013306,
     "end_time": "2024-11-26T20:27:54.838118",
     "exception": false,
     "start_time": "2024-11-26T20:27:54.824812",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# OPTIONS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7c19f925",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:27:54.868484Z",
     "iopub.status.busy": "2024-11-26T20:27:54.868111Z",
     "iopub.status.idle": "2024-11-26T20:27:54.872806Z",
     "shell.execute_reply": "2024-11-26T20:27:54.871604Z"
    },
    "papermill": {
     "duration": 0.021786,
     "end_time": "2024-11-26T20:27:54.874843",
     "exception": false,
     "start_time": "2024-11-26T20:27:54.853057",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pd.options.display.max_colwidth = 500"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1c09641b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:27:54.904353Z",
     "iopub.status.busy": "2024-11-26T20:27:54.903377Z",
     "iopub.status.idle": "2024-11-26T20:27:54.908581Z",
     "shell.execute_reply": "2024-11-26T20:27:54.907542Z"
    },
    "papermill": {
     "duration": 0.021897,
     "end_time": "2024-11-26T20:27:54.910636",
     "exception": false,
     "start_time": "2024-11-26T20:27:54.888739",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "plt.rcParams[\"figure.figsize\"] = [15, 5]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d809ae35",
   "metadata": {
    "papermill": {
     "duration": 0.013347,
     "end_time": "2024-11-26T20:27:54.937679",
     "exception": false,
     "start_time": "2024-11-26T20:27:54.924332",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# DATASETS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "13f5cd97",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:27:54.966508Z",
     "iopub.status.busy": "2024-11-26T20:27:54.966121Z",
     "iopub.status.idle": "2024-11-26T20:27:54.985177Z",
     "shell.execute_reply": "2024-11-26T20:27:54.984049Z"
    },
    "papermill": {
     "duration": 0.036023,
     "end_time": "2024-11-26T20:27:54.987326",
     "exception": false,
     "start_time": "2024-11-26T20:27:54.951303",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "933"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filename_to_id = lambda filename: int(filename.replace('.pdf', ''))\n",
    "files = {filename_to_id(filename): filename for filename in os.listdir(TEXTBOOK_FOLDER)}\n",
    "len(files)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "cb373a89",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:27:55.017609Z",
     "iopub.status.busy": "2024-11-26T20:27:55.017236Z",
     "iopub.status.idle": "2024-11-26T20:27:55.232317Z",
     "shell.execute_reply": "2024-11-26T20:27:55.231245Z"
    },
    "papermill": {
     "duration": 0.232481,
     "end_time": "2024-11-26T20:27:55.234586",
     "exception": false,
     "start_time": "2024-11-26T20:27:55.002105",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape: (933, 12)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OTL ID</th>\n",
       "      <th>Title</th>\n",
       "      <th>Copyright Year</th>\n",
       "      <th>Contributors</th>\n",
       "      <th>Publisher</th>\n",
       "      <th>Description</th>\n",
       "      <th>License</th>\n",
       "      <th>ISBN10</th>\n",
       "      <th>ISBN13</th>\n",
       "      <th>library URL</th>\n",
       "      <th>Subject 1</th>\n",
       "      <th>Subject 2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>Accounting in the Finance World</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>None</td>\n",
       "      <td>University of Minnesota Libraries Publishing</td>\n",
       "      <td>This book is intended for an undergraduate or MBA level Financial Accounting course. It covers the standard topics in a standard sequence, utilizing the Socratic method of asking and answering questions.</td>\n",
       "      <td>Attribution-NonCommercial-ShareAlike</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9781946135100</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/financial-accounting</td>\n",
       "      <td>Business - Accounting</td>\n",
       "      <td>Business</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>A First Course in Linear Algebra</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>Robert A. Beezer - Author</td>\n",
       "      <td>Robert Beezer</td>\n",
       "      <td>A First Course in Linear Algebra is an introductory textbook aimed at college-level sophomores and juniors. Typically students will have taken calculus, but it is not a prerequisite. The book begins with systems of linear equations, then covers matrix algebra, before taking up finite-dimensional vector spaces in full generality. The final chapter covers matrix representations of linear transformations, through diagonalization, change of basis and Jordan canonical form. Determinants and eigen...</td>\n",
       "      <td>Free Documentation License (GNU)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9780984417551</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/a-first-course-in-linear-algebra</td>\n",
       "      <td>Mathematics</td>\n",
       "      <td>Mathematics - Pure</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8</td>\n",
       "      <td>Communication for Business Success</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>None</td>\n",
       "      <td>University of Minnesota Libraries Publishing</td>\n",
       "      <td>Business Communication for Success (BCS) provides a comprehensive, integrated approach to the study and application of written and oral business communication to serve both student and professor. This series features chapters with the following elements: Learning Objectives Introductory Exercises Clear expectations, relevant background, and important theories Practical, real-world examples Key Takeaways or quick internal summaries Key terms that are easily identified In-chapter assignments P...</td>\n",
       "      <td>Attribution-NonCommercial-ShareAlike</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9781946135056</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/business-communication-for-success</td>\n",
       "      <td>Business</td>\n",
       "      <td>Journalism, Media Studies &amp; Communications - Organizational Communication</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9</td>\n",
       "      <td>College Success</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>None</td>\n",
       "      <td>University of Minnesota Libraries Publishing</td>\n",
       "      <td>Our primary goal in writing College Success is to help you succeed in college. According to Department of Education data, 30 percent of college freshmen leave school in their first year and as many as 50 percent never graduate. College Success is designed to help change that. College Success has a student-friendly format arranged to help you develop the essential skills and provide the information you need to succeed in college. This is not a textbook full of theory and extensive detail that...</td>\n",
       "      <td>Attribution-NonCommercial-ShareAlike</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9781946135063</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/college-success</td>\n",
       "      <td>Student Success</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>12</td>\n",
       "      <td>College Algebra</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>Carl Stitz - Author / Jeff Zeager - Author</td>\n",
       "      <td>Stitz Zeager Open Source Mathematics</td>\n",
       "      <td>College Algebra is an introductory text for a college algebra survey course. The material is presented at a level intended to prepare students for Calculus while also giving them relevant mathematical skills that can be used in other classes. The authors describe their approach as \"Functions First,\" believing introducing functions first will help students understand new concepts more completely. Each section includes homework exercises, and the answers to most computational questions are inc...</td>\n",
       "      <td>Attribution-NonCommercial-ShareAlike</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/college-algebra</td>\n",
       "      <td>Mathematics</td>\n",
       "      <td>Mathematics - Pure</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   OTL ID                               Title  Copyright Year  \\\n",
       "0       4     Accounting in the Finance World          2016.0   \n",
       "1       5    A First Course in Linear Algebra          2015.0   \n",
       "3       8  Communication for Business Success          2015.0   \n",
       "4       9                     College Success          2015.0   \n",
       "7      12                     College Algebra          2013.0   \n",
       "\n",
       "                                 Contributors  \\\n",
       "0                                        None   \n",
       "1                   Robert A. Beezer - Author   \n",
       "3                                        None   \n",
       "4                                        None   \n",
       "7  Carl Stitz - Author / Jeff Zeager - Author   \n",
       "\n",
       "                                      Publisher  \\\n",
       "0  University of Minnesota Libraries Publishing   \n",
       "1                                 Robert Beezer   \n",
       "3  University of Minnesota Libraries Publishing   \n",
       "4  University of Minnesota Libraries Publishing   \n",
       "7          Stitz Zeager Open Source Mathematics   \n",
       "\n",
escription  \\\n",
       "0                                                                                                                                                                                                                                                                                                          This book is intended for an undergraduate or MBA level Financial Accounting course. It covers the standard topics in a standard sequence, utilizing the Socratic method of asking and answering questions.   \n",
       "1  A First Course in Linear Algebra is an introductory textbook aimed at college-level sophomores and juniors. Typically students will have taken calculus, but it is not a prerequisite. The book begins with systems of linear equations, then covers matrix algebra, before taking up finite-dimensional vector spaces in full generality. The final chapter covers matrix representations of linear transformations, through diagonalization, change of basis and Jordan canonical form. Determinants and eigen...   \n",
       "3  Business Communication for Success (BCS) provides a comprehensive, integrated approach to the study and application of written and oral business communication to serve both student and professor. This series features chapters with the following elements: Learning Objectives Introductory Exercises Clear expectations, relevant background, and important theories Practical, real-world examples Key Takeaways or quick internal summaries Key terms that are easily identified In-chapter assignments P...   \n",
       "4  Our primary goal in writing College Success is to help you succeed in college. According to Department of Education data, 30 percent of college freshmen leave school in their first year and as many as 50 percent never graduate. College Success is designed to help change that. College Success has a student-friendly format arranged to help you develop the essential skills and provide the information you need to succeed in college. This is not a textbook full of theory and extensive detail that...   \n",
       "7  College Algebra is an introductory text for a college algebra survey course. The material is presented at a level intended to prepare students for Calculus while also giving them relevant mathematical skills that can be used in other classes. The authors describe their approach as \"Functions First,\" believing introducing functions first will help students understand new concepts more completely. Each section includes homework exercises, and the answers to most computational questions are inc...   \n",
       "\n",
       "                                License  ISBN10         ISBN13  \\\n",
       "0  Attribution-NonCommercial-ShareAlike     NaN  9781946135100   \n",
       "1      Free Documentation License (GNU)     NaN  9780984417551   \n",
       "3  Attribution-NonCommercial-ShareAlike     NaN  9781946135056   \n",
       "4  Attribution-NonCommercial-ShareAlike     NaN  9781946135063   \n",
       "7  Attribution-NonCommercial-ShareAlike     NaN           None   \n",
       "\n",
       "                                                                       library URL  \\\n",
       "0                https://open.umn.edu/opentextbooks/textbooks/financial-accounting   \n",
       "1    https://open.umn.edu/opentextbooks/textbooks/a-first-course-in-linear-algebra   \n",
       "3  https://open.umn.edu/opentextbooks/textbooks/business-communication-for-success   \n",
       "4                     https://open.umn.edu/opentextbooks/textbooks/college-success   \n",
       "7                     https://open.umn.edu/opentextbooks/textbooks/college-algebra   \n",
       "\n",
       "               Subject 1  \\\n",
       "0  Business - Accounting   \n",
       "1            Mathematics   \n",
       "3               Business   \n",
       "4        Student Success   \n",
       "7            Mathematics   \n",
       "\n",
       "                                                                   Subject 2  \n",
       "0                                                                   Business  \n",
       "1                                                         Mathematics - Pure  \n",
       "3  Journalism, Media Studies & Communications - Organizational Communication  \n",
       "4                                                                       None  \n",
       "7                                                         Mathematics - Pure  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metadata = (\n",
    "    pd.read_parquet(METADATA_FILE)\n",
    "    .query('`OTL ID` in @files')\n",
    ")\n",
    "print(\"Shape:\", metadata.shape)\n",
    "metadata.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4276a07f",
   "metadata": {
    "papermill": {
     "duration": 0.013942,
     "end_time": "2024-11-26T20:27:55.262938",
     "exception": false,
     "start_time": "2024-11-26T20:27:55.248996",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# ANALYSIS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "612fbf69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:27:55.293264Z",
     "iopub.status.busy": "2024-11-26T20:27:55.292903Z",
     "iopub.status.idle": "2024-11-26T20:27:55.334436Z",
     "shell.execute_reply": "2024-11-26T20:27:55.333375Z"
    },
    "papermill": {
     "duration": 0.059488,
     "end_time": "2024-11-26T20:27:55.336693",
     "exception": false,
     "start_time": "2024-11-26T20:27:55.277205",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>unique</th>\n",
       "      <th>top</th>\n",
       "      <th>freq</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>OTL ID</th>\n",
       "      <td>933.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>901.485531</td>\n",
       "      <td>504.562558</td>\n",
       "      <td>4.0</td>\n",
       "      <td>455.0</td>\n",
       "      <td>950.0</td>\n",
       "      <td>1321.0</td>\n",
       "      <td>1735.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Title</th>\n",
       "      <td>933</td>\n",
       "      <td>926</td>\n",
       "      <td>Elementary Algebra</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Copyright Year</th>\n",
       "      <td>907.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2018.287762</td>\n",
       "      <td>5.363796</td>\n",
       "      <td>1973.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>2020.0</td>\n",
       "      <td>2022.0</td>\n",
       "      <td>2024.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Contributors</th>\n",
       "      <td>907</td>\n",
       "      <td>809</td>\n",
       "      <td>Allen B. Downey - Author</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Publisher</th>\n",
       "      <td>931</td>\n",
       "      <td>253</td>\n",
       "      <td>Saylor Foundation</td>\n",
       "      <td>50</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Description</th>\n",
       "      <td>933</td>\n",
       "      <td>926</td>\n",
       "      <td>Essential Graduate Physics, Lecture Notes and Problems This Book is brought to you for free and open access by the Department of Physics and Astronomy at Academic Commons. It has been accepted for inclusion in Essential Graduate Physics by an authorized administrator of Academic Commons. For more information, please contact mona.ramonetti@stonybrook.edu, hu.wang.2@stonybrook.edu.</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>License</th>\n",
       "      <td>933</td>\n",
       "      <td>7</td>\n",
       "      <td>Attribution-NonCommercial-ShareAlike</td>\n",
       "      <td>359</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ISBN10</th>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1097903058.666667</td>\n",
       "      <td>850702949.437522</td>\n",
       "      <td>73523399.0</td>\n",
       "      <td>352502159.5</td>\n",
       "      <td>1212252563.5</td>\n",
       "      <td>1837368965.5</td>\n",
       "      <td>1977730035.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ISBN13</th>\n",
       "      <td>334</td>\n",
       "      <td>333</td>\n",
       "      <td>9781734914115</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>library URL</th>\n",
       "      <td>933</td>\n",
       "      <td>933</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/financial-accounting</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Subject 1</th>\n",
       "      <td>933</td>\n",
       "      <td>80</td>\n",
       "      <td>Humanities - Languages</td>\n",
       "      <td>67</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Subject 2</th>\n",
       "      <td>264</td>\n",
       "      <td>60</td>\n",
       "      <td>Mathematics - Pure</td>\n",
       "      <td>24</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                count unique  \\\n",
       "OTL ID          933.0    NaN   \n",
       "Title             933    926   \n",
       "Copyright Year  907.0    NaN   \n",
       "Contributors      907    809   \n",
       "Publisher         931    253   \n",
       "Description       933    926   \n",
       "License           933      7   \n",
       "ISBN10            6.0    NaN   \n",
       "ISBN13            334    333   \n",
       "library URL       933    933   \n",
       "Subject 1         933     80   \n",
       "Subject 2         264     60   \n",
       "\n",
       "                                                                                                                                                                                                                                                                                                                                                                                                           top  \\\n",
       "OTL ID                                                                                                                                                                                                                                                                                                                                                                                                     NaN   \n",
       "Title                                                                                                                                                                                                                                                                                                                                                                                       Elementary Algebra   \n",
       "Copyright Year                                                                                                                                                                                                                                                                                                                                                                                             NaN   \n",
       "Contributors                                                                                                                                                                                                                                                                                                                                                                          Allen B. Downey - Author   \n",
       "Publisher                                                                                                                                                                                                                                                                                                                                                                                    Saylor Foundation   \n",
       "Description     Essential Graduate Physics, Lecture Notes and Problems This Book is brought to you for free and open access by the Department of Physics and Astronomy at Academic Commons. It has been accepted for inclusion in Essential Graduate Physics by an authorized administrator of Academic Commons. For more information, please contact mona.ramonetti@stonybrook.edu, hu.wang.2@stonybrook.edu.   \n",
       "License                                                                                                                                                                                                                                                                                                                                                                   Attribution-NonCommercial-ShareAlike   \n",
       "ISBN10                                                                                                                                                                                                                                                                                                                                                                                                     NaN   \n",
       "ISBN13                                                                                                                                                                                                                                                                                                                                                                                           9781734914115   \n",
       "library URL                                                                                                                                                                                                                                                                                                                                  https://open.umn.edu/opentextbooks/textbooks/financial-accounting   \n",
       "Subject 1                                                                                                                                                                                                                                                                                                                                                                               Humanities - Languages   \n",
       "Subject 2                                                                                                                                                                                                                                                                                                                                                                                   Mathematics - Pure   \n",
       "\n",
       "               freq               mean               std         min  \\\n",
       "OTL ID          NaN         901.485531        504.562558         4.0   \n",
       "Title             3                NaN               NaN         NaN   \n",
       "Copyright Year  NaN        2018.287762          5.363796      1973.0   \n",
       "Contributors      6                NaN               NaN         NaN   \n",
       "Publisher        50                NaN               NaN         NaN   \n",
       "Description       4                NaN               NaN         NaN   \n",
       "License         359                NaN               NaN         NaN   \n",
       "ISBN10          NaN  1097903058.666667  850702949.437522  73523399.0   \n",
       "ISBN13            2                NaN               NaN         NaN   \n",
       "library URL       1                NaN               NaN         NaN   \n",
       "Subject 1        67                NaN               NaN         NaN   \n",
       "Subject 2        24                NaN               NaN         NaN   \n",
       "\n",
       "                        25%           50%           75%           max  \n",
       "OTL ID                455.0         950.0        1321.0        1735.0  \n",
       "Title                   NaN           NaN           NaN           NaN  \n",
       "Copyright Year       2016.0        2020.0        2022.0        2024.0  \n",
       "Contributors            NaN           NaN           NaN           NaN  \n",
       "Publisher               NaN           NaN           NaN           NaN  \n",
       "Description             NaN           NaN           NaN           NaN  \n",
       "License                 NaN           NaN           NaN           NaN  \n",
       "ISBN10          352502159.5  1212252563.5  1837368965.5  1977730035.0  \n",
       "ISBN13                  NaN           NaN           NaN           NaN  \n",
       "library URL             NaN           NaN           NaN           NaN  \n",
       "Subject 1               NaN           NaN           NaN           NaN  \n",
       "Subject 2               NaN           NaN           NaN           NaN  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metadata.describe(include='all').T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6e3b3605",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:27:55.367882Z",
     "iopub.status.busy": "2024-11-26T20:27:55.367446Z",
     "iopub.status.idle": "2024-11-26T20:27:55.885252Z",
     "shell.execute_reply": "2024-11-26T20:27:55.884200Z"
    },
    "papermill": {
     "duration": 0.536199,
     "end_time": "2024-11-26T20:27:55.887659",
     "exception": false,
     "start_time": "2024-11-26T20:27:55.351460",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "metadata['Copyright Year'].value_counts().sort_index().plot.bar(title='Distribution of copyright years');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "15177d9c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:27:55.920839Z",
     "iopub.status.busy": "2024-11-26T20:27:55.920405Z",
     "iopub.status.idle": "2024-11-26T20:27:56.217485Z",
     "shell.execute_reply": "2024-11-26T20:27:56.216232Z"
    },
    "papermill": {
     "duration": 0.315946,
     "end_time": "2024-11-26T20:27:56.219892",
     "exception": false,
     "start_time": "2024-11-26T20:27:55.903946",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "metadata['License'].value_counts().plot.bar(title='Distribution of textbook licenses');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8d22f11b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:27:56.253479Z",
     "iopub.status.busy": "2024-11-26T20:27:56.253084Z",
     "iopub.status.idle": "2024-11-26T20:27:57.352680Z",
     "shell.execute_reply": "2024-11-26T20:27:57.351603Z"
    },
    "papermill": {
     "duration": 1.121523,
     "end_time": "2024-11-26T20:27:57.357448",
     "exception": false,
     "start_time": "2024-11-26T20:27:56.235925",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "metadata['Subject 1'].value_counts().plot.bar(title='Distribution of main subject');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "54f32793",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:27:57.398962Z",
     "iopub.status.busy": "2024-11-26T20:27:57.398537Z",
     "iopub.status.idle": "2024-11-26T20:27:58.449196Z",
     "shell.execute_reply": "2024-11-26T20:27:58.448083Z"
    },
    "papermill": {
     "duration": 1.075613,
     "end_time": "2024-11-26T20:27:58.453208",
     "exception": false,
     "start_time": "2024-11-26T20:27:57.377595",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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J06ckD59+kjBggXl2rVrsnnzZomIiEjzYAa9e/cWPz8/GT16tOW3vHjxoiXhmRQz1+nUqVOlT58+4uXlJe+//76ISKr7KgAAzxQFAACZZv78+Soiun///mTn8fX11QoVKljejxo1ShMewqdMmaIiotevX082xv79+1VEdP78+Yn+V6tWLRURnT17dpL/q1WrluX9tm3bVEQ0b968euvWLcv0FStWqIjotGnTLNMCAwM1NDQ01ZgplS00NFQDAwMt71evXq0ioh988IHVfK+88oo6ODjo2bNnLdNERF1dXa2mHTlyREVEP/vss0TfldDUqVNVRHTJkiWWadHR0Vq1alX18vKyWvbAwEBt0qRJivFUbVtPixcvVkdHR925c6fV9NmzZ6uI6O7du1VVNTw8XB0dHbVly5YaGxtrNW9cXJyqql67dk1dXV21fv36VvPMmDFDRUTnzZtnmRa/DSxatMgy7eHDh5o7d25t3bp1ot9lxYoVlml3797VIkWKqIjotm3bLNPv3buXaPk++ugjdXBw0IsXL1qmhYaGqojo0KFDE81ftWpVff75562mff/994m+60n//vuvioh++umnyc6j+ngbGTVqVKLpT2678ftppUqVNDo62jL9k08+URHRNWvWWKY9uX2buU5VVUuVKmUVHwAA/B8eVwQA4Cnn5eWV4iiLfn5+IiKyZs2aNHfS7ubmJl26dLF5/k6dOom3t7fl/SuvvCJ58uSR9evXp+n7bbV+/XpxcnKSvn37Wk0fNGiQqKr89NNPVtNDQkKkcOHClvdly5YVHx8f+eOPP1L9nty5c0u7du0s01xcXKRv375y584dCQsLM1x2W9bTt99+K8HBwVKiRAn5+++/La+6deuKiMi2bdtERGT16tUSFxcnI0eOFEdH69O5+BZFP//8s0RHR0v//v2t5unevbv4+PjIunXrrD7n5eUlr7/+uuW9q6urVKlSxeq3Wr9+veTJk0deeeUVyzQPDw/p0aNHomVJ2KLv7t278vfff8uLL74oqiq//fZbovl79uyZaFqnTp1k3759cu7cOcu0pUuXSv78+aVWrVqJ5k/43a6urrJ9+/ZEjxOmR48ePaxav/Xs2VOcnZ1T3O7NXKcAACBlJLkAAHjK3blzxyqh9KTXXntNqlWrJt26dZNcuXJJ27ZtZcWKFYYSXnnz5jXUYXbRokWt3js4OEiRIkVS7I/KDBcvXpSAgIBEv0dwcLDl/wkVKFAgUYysWbOmmvi4ePGiFC1aNFGyIbnvsYUt6yk8PFxOnDghOXLksHoVK1ZMRB73EyYicu7cOXF0dEyxw/v4MhYvXtxququrqwQFBSVahnz58iVKpjz5W128eFGKFCmSaL4nv0NEJCIiQjp37izZsmUTLy8vyZEjhyUxdfPmTat5nZ2dJV++fIlivPbaa+Lm5iZLly61fO7HH3+UDh06pJj4cXNzk48//lh++uknyZUrl9SsWVM++eQTuXLlSrKfscWT272Xl5fkyZMnxe3ezHUKAABSRp9cAAA8xS5duiQ3b96UIkWKJDtPlixZZMeOHbJt2zZZt26dbNiwQZYvXy5169aVTZs2iZOTU6rfY6QfLVsll4SIjY21qUxmSO579IlO6v8LtqynuLg4KVOmjEyePDnJGPnz58+w8pn5W8XGxspLL70k//zzjwwZMkRKlCghnp6e8ueff0rnzp0TJWDd3NwSJRRFHifZXn75ZVm6dKmMHDlSVq5cKQ8fPrRqcZac/v37S9OmTWX16tWyceNGGTFihHz00UeydetWqVChQqrlN0tmrlMAAJ41tOQCAOAptnjxYhERadCgQYrzOTo6Sr169WTy5Mly8uRJGT9+vGzdutXyKJTZjzuFh4dbvVdVOXv2rFWH3lmzZk00ip9I4lZQRsoWGBgoly9fTvT45qlTpyz/N0NgYKCEh4cnSsak93tSW0+FCxeWf/75R+rVqychISGJXvEtpgoXLixxcXFy8uTJFJdBROT06dNW06Ojo+X8+fNpWobAwEA5d+5cosTXk99x7NgxOXPmjEyaNEmGDBkizZs3l5CQEAkICDD8nZ06dZIzZ87I/v37ZenSpVKhQgUpVaqUTZ8tXLiwDBo0SDZt2iTHjx+X6OhomTRpkuX/SW2j0dHR8tdffyUZ78nt/s6dO/LXX3+l2JG9metUhEcXAQBICUkuAACeUlu3bpVx48ZJoUKFpEOHDsnO988//ySaVr58eRERefjwoYiIeHp6iogkmXRKi0WLFlklmlauXCl//fWXZRQ+kccX7Xv37pXo6GjLtB9//FEiIyOtYhkpW+PGjSU2NlZmzJhhNX3KlCni4OBg9f3p0bhxY7ly5YosX77cMi0mJkY+++wz8fLySrE/qOTYsp7atGkjf/75p8yZMyfRvPfv35e7d++KiEiLFi3E0dFRxo4dmygRF5+ACgkJEVdXV5k+fbpVUmru3Lly8+ZNadKkieFlaNy4sVy+fFlWrlxpmXbv3j358ssvreaLbxWW8HtVVaZNm2b4Oxs1aiTZs2eXjz/+WMLCwmxqxXXv3j158OCB1bTChQuLt7e35beOn7Zjxw6r+b788stkW3J9+eWX8ujRI8v7WbNmSUxMTIrbnZnrVOTx/mLWfgwAwP8aHlcEAOAp8NNPP8mpU6ckJiZGrl69Klu3bpXNmzdLYGCgrF27Vtzd3ZP97NixY2XHjh3SpEkTCQwMlGvXrsnnn38u+fLlk+rVq4vI44t5Pz8/mT17tnh7e4unp6c8//zzUqhQoTSVN1u2bFK9enXp0qWLXL16VaZOnSpFihSR7t27W+bp1q2brFy5Uho2bCht2rSRc+fOyZIlS6w6gjdatqZNm0qdOnXk/ffflwsXLki5cuVk06ZNsmbNGunfv3+i2GnVo0cP+eKLL6Rz585y8OBBKViwoKxcuVJ2794tU6dOTbGPtOTYsp46duwoK1askLfeeku2bdsm1apVk9jYWDl16pSsWLFCNm7cKJUrV5YiRYrI+++/L+PGjZMaNWpIq1atxM3NTfbv3y8BAQHy0UcfSY4cOWTYsGEyZswYadiwoTRr1kxOnz4tn3/+uTz33HM2JYue1L17d5kxY4Z06tRJDh48KHny5JHFixeLh4eH1XwlSpSQwoULyzvvvCN//vmn+Pj4yHfffZemTuBdXFykbdu2MmPGDHFycrIaDCA5Z86ckXr16kmbNm2kZMmS4uzsLKtWrZKrV69K27ZtLfN169ZN3nrrLWndurW89NJLcuTIEdm4caNkz549ybjR0dGWuPG/ZfXq1aVZs2bJlsXMdSoiUqlSJZk1a5Z88MEHUqRIEcmZM6elE3sAAJ55mTSqIwAAUNX58+eriFherq6umjt3bn3ppZd02rRpeuvWrUSfGTVqlCY8hG/ZskWbN2+uAQEB6urqqgEBAdquXTs9c+aM1efWrFmjJUuWVGdnZxURnT9/vqqq1qpVS0uVKpVk+WrVqqW1atWyvN+2bZuKiC5btkyHDRumOXPm1CxZsmiTJk304sWLiT4/adIkzZs3r7q5uWm1atX0wIEDiWKmVLbQ0FANDAy0mvf27ds6YMAADQgIUBcXFy1atKh++umnGhcXZzWfiGivXr0SlSkwMFBDQ0OTXN6Erl69ql26dNHs2bOrq6urlilTxlKuJ+M1adIk1Xi2rqfo6Gj9+OOPtVSpUurm5qZZs2bVSpUq6ZgxY/TmzZtW886bN08rVKhgma9WrVq6efNmq3lmzJihJUqUUBcXF82VK5f27NlT//33X6t5ktsGkvr9L168qM2aNVMPDw/Nnj279uvXTzds2KAiotu2bbPMd/LkSQ0JCVEvLy/Nnj27du/eXY8cOWK1fuO/w9PTM8Xf7tdff1UR0fr166c4X7y///5be/XqpSVKlFBPT0/19fXV559/XlesWGE1X2xsrA4ZMkSzZ8+uHh4e2qBBAz179myibSR+Pw0LC9MePXpo1qxZ1cvLSzt06KA3btywipnU9m3mOr1y5Yo2adJEvb29VUQSfRcAAM8yB9VM6HkVAAAAsNGRI0ekfPnysmjRIunYsWNmFydFNWrUEDc3N/n5558zuygAADxz6JMLAAAAT7U5c+aIl5eXtGrVKrOLkqq//vor2ccdAQBAxqJPLgAAADyVfvjhBzl58qR8+eWX0rt3b8sgBU+jX375Rb7//ns5d+6cDBkyJLOLAwDAM4nHFQEAAPBUKliwoFy9elUaNGggixcvTlOH//+VLl26yE8//STt2rWTTz/9VJyduZcMAMB/jSQXAAAAAAAA7B59cgEAAAAAAMDukeQCAAAAAACA3TPUWcBHH30k33//vZw6dUqyZMkiL774onz88cdSvHhxyzy1a9eWsLAwq8+9+eabMnv2bJu+Iy4uTi5fvize3t7i4OBgpHgAAAAAAAD4H6Oqcvv2bQkICBBHx+Tbaxnqk6thw4bStm1bee655yQmJkbee+89OX78uJw8edIy2k3t2rWlWLFiMnbsWMvnPDw8xMfHx6bvuHTpkuTPn9/WIgEAAAAAAOAZEBkZKfny5Uv2/4Zacm3YsMHq/YIFCyRnzpxy8OBBqVmzpmW6h4eH5M6d22BRH4sfNScyMtLmxBgAAAAAAAD+N926dUvy58+f6kjL6Rrb+ObNmyIiki1bNqvpS5culSVLlkju3LmladOmMmLECPHw8EgyxsOHD+Xhw4eW97dv3xYRER8fH5JcAAAAAAAAEBFJtVurNCe54uLipH///lKtWjUpXbq0ZXr79u0lMDBQAgIC5OjRozJkyBA5ffq0fP/990nG+eijj2TMmDFpLQYAAAAAAABgrE+uhHr27Ck//fST7Nq1K8XnIbdu3Sr16tWTs2fPSuHChRP9/8mWXPFN0G7evElLLgAAAAAAgGfcrVu3xNfXN9VcUZpacvXu3Vt+/PFH2bFjR4oJLhGR559/XkQk2SSXm5ubuLm5paUYAAAAAAAAgIgYTHKpqvTp00dWrVol27dvl0KFCqX6mcOHD4uISJ48edJUQAAAAAAAACA1hpJcvXr1kq+//lrWrFkj3t7ecuXKFRER8fX1lSxZssi5c+fk66+/lsaNG4u/v78cPXpUBgwYIDVr1pSyZctmyAIAAAAAAAAAhvrkSq4X+/nz50vnzp0lMjJSXn/9dTl+/LjcvXtX8ufPLy1btpThw4fb3L+Wrc9ZAgAAAAAA4H9fhvTJlVo+LH/+/BIWFmYkJAAAAAAAAJBujpldAAAAAAAAACC9SHIBAAAAAADA7pHkAgAAAAAAgN0jyQUAAAAAAAC7R5ILAAAAAAAAdo8kFwAAAAAAAOweSS4AAAAAAADYPZJcAAAAAAAAsHvOmV0AWxUcus6m+S5MaJLBJQEAAAAAAMDThpZcAAAAAAAAsHskuQAAAAAAAGD3SHIBAAAAAADA7pHkAgAAAAAAgN0jyQUAAAAAAAC7R5ILAAAAAAAAdo8kFwAAAAAAAOweSS4AAAAAAADYPZJcAAAAAAAAsHskuQAAAAAAAGD3SHIBAAAAAADA7pHkAgAAAAAAgN0jyQUAAAAAAAC7R5ILAAAAAAAAds85swuQWQoOXZfqPBcmNPkPSgIAAAAAAID0oiUXAAAAAAAA7B5JLgAAAAAAANg9klwAAAAAAACweyS5AAAAAAAAYPdIcgEAAAAAAMDukeQCAAAAAACA3SPJBQAAAAAAALtHkgsAAAAAAAB2jyQXAAAAAAAA7B5JLgAAAAAAANg9klwAAAAAAACweyS5AAAAAAAAYPdIcgEAAAAAAMDukeQCAAAAAACA3SPJBQAAAAAAALtHkgsAAAAAAAB2jyQXAAAAAAAA7B5JLgAAAAAAANg9klwAAAAAAACweyS5AAAAAAAAYPdIcgEAAAAAAMDukeQCAAAAAACA3SPJBQAAAAAAALtHkgsAAAAAAAB2jyQXAAAAAAAA7B5JLgAAAAAAANg9klwAAAAAAACweyS5AAAAAAAAYPdIcgEAAAAAAMDukeQCAAAAAACA3SPJBQAAAAAAALtHkgsAAAAAAAB2jyQXAAAAAAAA7B5JLgAAAAAAANg9klwAAAAAAACweyS5AAAAAAAAYPdIcgEAAAAAAMDukeQCAAAAAACA3SPJBQAAAAAAALtHkgsAAAAAAAB2jyQXAAAAAAAA7J6hJNdHH30kzz33nHh7e0vOnDmlRYsWcvr0aat5Hjx4IL169RJ/f3/x8vKS1q1by9WrV00tNAAAAAAAAJCQoSRXWFiY9OrVS/bu3SubN2+WR48eSf369eXu3buWeQYMGCA//PCDfPvttxIWFiaXL1+WVq1amV5wAAAAAAAAIJ6zkZk3bNhg9X7BggWSM2dOOXjwoNSsWVNu3rwpc+fOla+//lrq1q0rIiLz58+X4OBg2bt3r7zwwgvmlRwAAAAAAAD4/9LVJ9fNmzdFRCRbtmwiInLw4EF59OiRhISEWOYpUaKEFChQQPbs2ZNkjIcPH8qtW7esXgAAAAAAAIARaU5yxcXFSf/+/aVatWpSunRpERG5cuWKuLq6ip+fn9W8uXLlkitXriQZ56OPPhJfX1/LK3/+/GktEgAAAAAAAJ5RaU5y9erVS44fPy7ffPNNugowbNgwuXnzpuUVGRmZrngAAAAAAAB49hjqkyte79695ccff5QdO3ZIvnz5LNNz584t0dHREhUVZdWa6+rVq5I7d+4kY7m5uYmbm1taigEAAAAAAACIiMGWXKoqvXv3llWrVsnWrVulUKFCVv+vVKmSuLi4yJYtWyzTTp8+LREREVK1alVzSgwAAAAAAAA8wVBLrl69esnXX38ta9asEW9vb0s/W76+vpIlSxbx9fWVrl27ysCBAyVbtmzi4+Mjffr0kapVqzKyIgAAAAAAADKMoSTXrFmzRESkdu3aVtPnz58vnTt3FhGRKVOmiKOjo7Ru3VoePnwoDRo0kM8//9yUwgIAAAAAAABJMZTkUtVU53F3d5eZM2fKzJkz01woAAAAAAAAwIg0j64IAAAAAAAAPC1IcgEAAAAAAMDukeQCAAAAAACA3SPJBQAAAAAAALtHkgsAAAAAAAB2jyQXAAAAAAAA7B5JLgAAAAAAANg9klwAAAAAAACweyS5AAAAAAAAYPdIcgEAAAAAAMDukeQCAAAAAACA3SPJBQAAAAAAALtHkgsAAAAAAAB2jyQXAAAAAAAA7B5JLgAAAAAAANg9klwAAAAAAACweyS5AAAAAAAAYPdIcgEAAAAAAMDukeQCAAAAAACA3SPJBQAAAAAAALtHkgsAAAAAAAB2jyQXAAAAAAAA7B5JLgAAAAAAANg9klwAAAAAAACweyS5AAAAAAAAYPdIcgEAAAAAAMDukeQCAAAAAACA3SPJBQAAAAAAALtHkgsAAAAAAAB2jyQXAAAAAAAA7B5JLgAAAAAAANg9klwAAAAAAACweyS5AAAAAAAAYPdIcgEAAAAAAMDukeQCAAAAAACA3SPJBQAAAAAAALtHkgsAAAAAAAB2jyQXAAAAAAAA7B5JLgAAAAAAANg9klwAAAAAAACweyS5AAAAAAAAYPdIcgEAAAAAAMDukeQCAAAAAACA3SPJBQAAAAAAALtHkgsAAAAAAAB2jyQXAAAAAAAA7B5JLgAAAAAAANg9klwAAAAAAACweyS5AAAAAAAAYPdIcgEAAAAAAMDukeQCAAAAAACA3SPJBQAAAAAAALtHkgsAAAAAAAB2jyQXAAAAAAAA7B5JLgAAAAAAANg9klwAAAAAAACweyS5AAAAAAAAYPdIcgEAAAAAAMDukeQCAAAAAACA3SPJBQAAAAAAALtHkgsAAAAAAAB2jyQXAAAAAAAA7B5JLgAAAAAAANg9klwAAAAAAACweyS5AAAAAAAAYPdIcgEAAAAAAMDuGU5y7dixQ5o2bSoBAQHi4OAgq1evtvp/586dxcHBwerVsGFDs8oLAAAAAAAAJGI4yXX37l0pV66czJw5M9l5GjZsKH/99ZfltWzZsnQVEgAAAAAAAEiJs9EPNGrUSBo1apTiPG5ubpI7d26b4j18+FAePnxoeX/r1i2jRQIAAAAAAMAzLkP65Nq+fbvkzJlTihcvLj179pQbN24kO+9HH30kvr6+llf+/PkzokgAAAAAAAD4H2Z6kqthw4ayaNEi2bJli3z88ccSFhYmjRo1ktjY2CTnHzZsmNy8edPyioyMNLtIAAAAAAAA+B9n+HHF1LRt29byd5kyZaRs2bJSuHBh2b59u9SrVy/R/G5ubuLm5mZ2MQAAAAAAAPAMyZDHFRMKCgqS7Nmzy9mzZzP6qwAAAAAAAPCMyvAk16VLl+TGjRuSJ0+ejP4qAAAAAAAAPKMMP654584dq1ZZ58+fl8OHD0u2bNkkW7ZsMmbMGGndurXkzp1bzp07J++++64UKVJEGjRoYGrBAQAAAAAAgHiGk1wHDhyQOnXqWN4PHDhQRERCQ0Nl1qxZcvToUVm4cKFERUVJQECA1K9fX8aNG0e/WwAAAAAAAMgwhpNctWvXFlVN9v8bN25MV4EAAAAAAAAAozK8Ty4AAAAAAAAgo5HkAgAAAAAAgN0jyQUAAAAAAAC7R5ILAAAAAAAAdo8kFwAAAAAAAOweSS4AAAAAAADYPZJcAAAAAAAAsHskuQAAAAAAAGD3SHIBAAAAAADA7pHkAgAAAAAAgN0jyQUAAAAAAAC7R5ILAAAAAAAAdo8kFwAAAAAAAOweSS4AAAAAAADYPZJcAAAAAAAAsHskuQAAAAAAAGD3SHIBAAAAAADA7pHkAgAAAAAAgN0jyQUAAAAAAAC7R5ILAAAAAAAAdo8kFwAAAAAAAOweSS4AAAAAAADYPZJcAAAAAAAAsHvOmV2A/wUFh66zab4LE5pkcEkAAAAAAACeTbTkAgAAAAAAgN0jyQUAAAAAAAC7R5ILAAAAAAAAdo8kFwAAAAAAAOweSS4AAAAAAADYPZJcAAAAAAAAsHskuQAAAAAAAGD3SHIBAAAAAADA7pHkAgAAAAAAgN0jyQUAAAAAAAC7R5ILAAAAAAAAdo8kFwAAAAAAAOweSS4AAAAAAADYPZJcAAAAAAAAsHvOmV0AWCs4dJ1N812Y0CSDSwIAAAAAAGA/aMkFAAAAAAAAu0eSCwAAAAAAAHaPJBcAAAAAAADsHkkuAAAAAAAA2D2SXAAAAAAAALB7JLkAAAAAAABg90hyAQAAAAAAwO6R5AIAAAAAAIDdI8kFAAAAAAAAu0eSCwAAAAAAAHaPJBcAAAAAAADsHkkuAAAAAAAA2D2SXAAAAAAAALB7JLkAAAAAAABg90hyAQAAAAAAwO45Z3YBkLEKDl2X6jwXJjT5D0oCAAAAAACQcWjJBQAAAAAAALtHkgsAAAAAAAB2jyQXAAAAAAAA7B5JLgAAAAAAANg9klwAAAAAAACweyS5AAAAAAAAYPdIcgEAAAAAAMDukeQCAAAAAACA3SPJBQAAAAAAALtHkgsAAAAAAAB2z3CSa8eOHdK0aVMJCAgQBwcHWb16tdX/VVVGjhwpefLkkSxZskhISIiEh4ebVV4AAAAAAAAgEcNJrrt370q5cuVk5syZSf7/k08+kenTp8vs2bNl37594unpKQ0aNJAHDx6ku7AAAAAAAABAUpyNfqBRo0bSqFGjJP+nqjJ16lQZPny4NG/eXEREFi1aJLly5ZLVq1dL27Zt01daAAAAAAAAIAmm9sl1/vx5uXLlioSEhFim+fr6yvPPPy979uxJ8jMPHz6UW7duWb0AAAAAAAAAIwy35ErJlStXREQkV65cVtNz5cpl+d+TPvroIxkzZoyZxUAGKTh0nU3zXZjQ5D+NlRHxAAAAAACAfcn00RWHDRsmN2/etLwiIyMzu0gAAAAAAACwM6YmuXLnzi0iIlevXrWafvXqVcv/nuTm5iY+Pj5WLwAAAAAAAMAIU5NchQoVkty5c8uWLVss027duiX79u2TqlWrmvlVAAAAAAAAgIXhPrnu3LkjZ8+etbw/f/68HD58WLJlyyYFChSQ/v37ywcffCBFixaVQoUKyYgRIyQgIEBatGhhZrkBAAAAAAAAC8NJrgMHDkidOnUs7wcOHCgiIqGhobJgwQJ599135e7du9KjRw+JioqS6tWry4YNG8Td3d28UgMAAAAAAAAJGE5y1a5dW1Q12f87ODjI2LFjZezYsekqGAAAAAAAAGCrTB9dEQAAAAAAAEgvklwAAAAAAACweyS5AAAAAAAAYPdIcgEAAAAAAMDukeQCAAAAAACA3SPJBQAAAAAAALtHkgsAAAAAAAB2jyQXAAAAAAAA7B5JLgAAAAAAANg9klwAAAAAAACweyS5AAAAAAAAYPdIcgEAAAAAAMDukeQCAAAAAACA3SPJBQAAAAAAALtHkgsAAAAAAAB2jyQXAAAAAAAA7B5JLgAAAAAAANg9klwAAAAAAACweyS5AAAAAAAAYPdIcgEAAAAAAMDukeQCAAAAAACA3SPJBQAAAAAAALtHkgsAAAAAAAB2zzmzCwA8bQoOXWfTfBcmNDEtnq2xAAAAAABA0mjJBQAAAAAAALtHkgsAAAAAAAB2jyQXAAAAAAAA7B5JLgAAAAAAANg9klwAAAAAAACweyS5AAAAAAAAYPdIcgEAAAAAAMDukeQCAAAAAACA3SPJBQAAAAAAALtHkgsAAAAAAAB2jyQXAAAAAAAA7B5JLgAAAAAAANg9klwAAAAAAACweyS5AAAAAAAAYPdIcgEAAAAAAMDuOWd2AQDYruDQdTbNd2FCk/80FgAAAAAAmY2WXAAAAAAAALB7JLkAAAAAAABg90hyAQAAAAAAwO6R5AIAAAAAAIDdI8kFAAAAAAAAu0eSCwAAAAAAAHaPJBcAAAAAAADsHkkuAAAAAAAA2D2SXAAAAAAAALB7JLkAAAAAAABg90hyAQAAAAAAwO6R5AIAAAAAAIDdI8kFAAAAAAAAu0eSCwAAAAAAAHbPObMLAOB/Q8Gh61Kd58KEJqbFsjWembEyIh4AAAAAwBy05AIAAAAAAIDdI8kFAAAAAAAAu0eSCwAAAAAAAHaPJBcAAAAAAADsHkkuAAAAAAAA2D2SXAAAAAAAALB7JLkAAAAAAABg90hyAQAAAAAAwO6R5AIAAAAAAIDdI8kFAAAAAAAAu2d6kmv06NHi4OBg9SpRooTZXwMAAAAAAABYOGdE0FKlSsnPP//8f1/inCFfAwAAAAAAAIhIBiW5nJ2dJXfu3BkRGgAAAAAAAEgkQ/rkCg8Pl4CAAAkKCpIOHTpIREREsvM+fPhQbt26ZfUCAAAAAAAAjDC9Jdfzzz8vCxYskOLFi8tff/0lY8aMkRo1asjx48fF29s70fwfffSRjBkzxuxiAMBTr+DQdTbNd2FCE9PimRnL1nhP83ICAAAA+N9hekuuRo0ayauvviply5aVBg0ayPr16yUqKkpWrFiR5PzDhg2TmzdvWl6RkZFmFwkAAAAAAAD/4zK8R3g/Pz8pVqyYnD17Nsn/u7m5iZubW0YXAwAAAAAAAP/DMqRProTu3Lkj586dkzx58mT0VwEAAAAAAOAZZXqS65133pGwsDC5cOGC/PLLL9KyZUtxcnKSdu3amf1VAAAAAAAAgIhkwOOKly5dknbt2smNGzckR44cUr16ddm7d6/kyJHD7K8CAAAAAAAARCQDklzffPON2SEBAAAAAACAFGV4n1wAAAAAAABARiPJBQAAAAAAALtHkgsAAAAAAAB2jyQXAAAAAAAA7B5JLgAAAAAAANg9klwAAAAAAACweyS5AAAAAAAAYPdIcgEAAAAAAMDuOWd2AQAAyCwFh66zab4LE5r8p7HMjmd22QAAAICnES25AAAAAAAAYPdIcgEAAAAAAMDukeQCAAAAAACA3SPJBQAAAAAAALtHkgsAAAAAAAB2jyQXAAAAAAAA7B5JLgAAAAAAANg9klwAAAAAAACweyS5AAAAAAAAYPdIcgEAAAAAAMDukeQCAAAAAACA3SPJBQAAAAAAALtHkgsAAAAAAAB2jyQXAAAAAAAA7B5JLgAAAAAAANg958wuAAAAsC8Fh65LdZ4LE5qYFsvWeGbGsjVeZiwnAAAAkkZLLgAAAAAAANg9klwAAAAAAACweyS5AAAAAAAAYPdIcgEAAAAAAMDukeQCAAAAAACA3SPJBQAAAAAAALtHkgsAAAAAAAB2jyQXAAAAAAAA7B5JLgAAAAAAANg9klwAAAAAAACweyS5AAAAAAAAYPdIcgEAAAAAAMDukeQCAAAAAACA3SPJBQAAAAAAALvnnNkFAAAAgO0KDl1n03wXJjT5z+NlRtlYTuOxbI33LG1rAID/DbTkAgAAAAAAgN0jyQUAAAAAAAC7R5ILAAAAAAAAdo8kFwAAAAAAAOweSS4AAAAAAADYPZJcAAAAAAAAsHskuQAAAAAAAGD3SHIBAAAAAADA7pHkAgAAAAAAgN0jyQUAAAAAAAC7R5ILAAAAAAAAdo8kFwAAAAAAAOweSS4AAAAAAADYPZJcAAAAAAAAsHvOmV0AAAAAAMhMBYeuS3WeCxOamBbL1nhmxrI13rOynLbGYx0Yj2VrvGdlOW2NxzowHisptOQCAAAAAACA3SPJBQAAAAAAALtHkgsAAAAAAAB2jyQXAAAAAAAA7B5JLgAAAAAAANg9klwAAAAAAACweyS5AAAAAAAAYPdIcgEAAAAAAMDukeQCAAAAAACA3SPJBQAAAAAAALtHkgsAAAAAAAB2L8OSXDNnzpSCBQuKu7u7PP/88/Lrr79m1FcBAAAAAADgGZchSa7ly5fLwIEDZdSoUXLo0CEpV66cNGjQQK5du5YRXwcAAAAAAIBnXIYkuSZPnizdu3eXLl26SMmSJWX27Nni4eEh8+bNy4ivAwAAAAAAwDPO2eyA0dHRcvDgQRk2bJhlmqOjo4SEhMiePXsSzf/w4UN5+PCh5f3NmzdFROTWrVtW88U9vGfT9z/5ueTYEs/MWLbGYzmNxzI7HuvAeCxb4z0ry2lrPNaB8Vi2xntWltPWeKwD47FsjfesLKet8VgHxmPZGu9ZWU5b47EOjMeyNd6zspy2xmMdGI9la7xnZTltjcc6SDlW/HtVTfFzDpraHAZdvnxZ8ubNK7/88otUrVrVMv3dd9+VsLAw2bdvn9X8o0ePljFjxphZBAAAAAAAAPyPiYyMlHz58iX7f9Nbchk1bNgwGThwoOV9XFyc/PPPP+Lv7y8ODg7Jfu7WrVuSP39+iYyMFB8fn3SVwcxYlC3zYz3NZXtWlvNpLhvLmfnxnpWysZyZH+9ZKRvLmfnxnpWysZyZH+9ZKRvLmfnxnpWysZyZH8/WWKoqt2/floCAgBTjmZ7kyp49uzg5OcnVq1etpl+9elVy586daH43Nzdxc3Ozmubn52fz9/n4+JiyksyOZXa8Z6VsLGfmx3tWysZyZn68Z6VsLGfmx3tWysZyZn68Z6VsLGfmx3tWysZyZn68Z6VsLGfmx7Mllq+vb6pxTO943tXVVSpVqiRbtmyxTIuLi5MtW7ZYPb4IAAAAAAAAmCVDHlccOHCghIaGSuXKlaVKlSoydepUuXv3rnTp0iUjvg4AAAAAAADPuAxJcr322mty/fp1GTlypFy5ckXKly8vGzZskFy5cpn2HW5ubjJq1KhEjzpmdiyz4z0rZWM5Mz/es1I2ljPz4z0rZWM5Mz/es1I2ljPz4z0rZWM5Mz/es1I2ljPz4z0rZWM5Mz+e2WUzfXRFAAAAAAAA4L9mep9cAAAAAAAAwH+NJBcAAAAAAADsHkkuAAAAAAAA2D2SXAAAAAAAALB7dpXkiomJkZ9//lm++OILuX37toiIXL58We7cuWMoTq1atWTRokVy//79jChmuhw6dEiOHTtmeb9mzRpp0aKFvPfeexIdHZ2JJXt2/PHHH5ldhP/Etm3bTI1Xt25diYqKSjT91q1bUrduXUOxnub94Gkt29Naroxg9rb7pKS2Y1s8K3UH0uZp3kef1rKZXa7IyEi5dOmS5f2vv/4q/fv3ly+//NKU8qbHvHnz5Pz586bHvXXrlqxevVp+//33NH0+o+vb/1VP87VGRkvrMdQeREdHy6VLlyQiIsLqldZYp0+flpiYGJNL+fQwez+IioqSr776SoYNGyb//POPiDw+Tvz555+mxE8Ps/IUz4rQ0FDZsWNHhsW3m9EVL168KA0bNpSIiAh5+PChnDlzRoKCgqRfv37y8OFDmT17ts2x+vfvL19//bU8fPhQ2rRpI127dpUXXnghA0tvu+eee06GDh0qrVu3lj/++ENKlSolLVu2lP3790uTJk1k6tSpmVa2DRs2iJeXl1SvXl1ERGbOnClz5syRkiVLysyZMyVr1qyG4oWHh8u2bdvk2rVrEhcXZ/W/kSNHpvr5tWvX2vxdzZo1s3leR0dHqVWrlnTt2lVeeeUVcXd3t/mzSVm8eLHMnj1bzp8/L3v27JHAwECZOnWqFCpUSJo3b56u2Onh5uYm+fLlky5dukhoaKjkz58/XfEcHR3lypUrkjNnTqvp165dk7x588qjR49sjmXmfhAbGytTpkyRFStWSERERKILo/iDZGaUzcx96mmuOwoWLChvvPGGdO7cWQoUKJDueGZuux9//LEULFhQXnvtNRERadOmjXz33XeSO3duWb9+vZQrV87mWGbXHWZauHChZM+eXZo0aSIiIu+++658+eWXUrJkSVm2bJkEBgYaimdmvdayZUtxcHBINN3BwUHc3d2lSJEi0r59eylevLihuGaJioqSX3/9NcljVadOnWyOk959NGvWrEn+TknJzHpNRGTLli0yZcoUS2IlODhY+vfvLyEhIZlarho1akiPHj2kY8eOcuXKFSlevLiUKlVKwsPDpU+fPjade8SrWbOm1K5dW2rVqiXVqlVL9/5etGhR+eOPPyRv3rxSq1YtqVWrltSuXVuKFCliKE6bNm2kZs2a0rt3b7l//76UK1dOLly4IKoq33zzjbRu3dpQPLPPFcw67l29elXeeecd2bJli1y7dk2evJyJjY01XLb0npcmZOa1RnL7fsI6snPnztKlS5dUYz148EA+++yzZJfz0KFDhspm5jFUxLz6VsTcY0t4eLi88cYb8ssvv1hNV1VxcHAwtL3du3dP+vTpIwsXLhQRsVzT9unTR/LmzStDhw61OZaIuedYZp8rmLkfHD16VEJCQsTX11cuXLggp0+flqCgIBk+fLhERETIokWLbI5ldv1hZp6iQoUKNu3vderUsSneli1bLMv55D41b948m8slYu720aJFC1m/fr0EBgZaji958+Y1VJ4UqZ1o3ry5vv766/rw4UP18vLSc+fOqarqtm3btEiRIobjPXr0SL/77jtt1qyZuri4aHBwsH766ad65cqVNJXv/v37afrck3x8fPTs2bOqqjphwgStX7++qqru2rVL8+XLZ8p3xMTE6G+//ab//POPoc+VLl1a161bp6qqR48eVTc3Nx02bJi+8MIL2rlzZ0OxvvzyS3VyctJcuXJpuXLltHz58pZXhQoVbIrh4OBg9XJ0dEz0Pv5lxG+//aZ9+/bVHDlyqK+vr/bo0UP37dtnKEa8zz//XLNn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/FTjmb3tmsXsukNEZOvWrTJ8+HD58MMPpUyZMol+Ox8fn3SXOy3MrNdiY2NlwoQJMmPGDLl69aqIiOTKlUv69OkjQ4YMEScnJ4mIiBBHR0fJly+fTTE7dOggp06dkgoVKsiyZcskIiJC/P39Ze3atfLee+/J8ePHbYrj6OiY7P+Mjqi1f/9+iYuLk+eff95q+r59+8TJyUkqV65sc6z4z02fPt1qBMO+ffsmim/UnTt3Eo3AZGQ7S+n4nlBajvVmiImJke3bt8u5c+ekffv24u3tLZcvXxYfHx/x8vKyOc6///4rO3fulO3bt0tYWJj8/vvvUr58ect5YP369dNcxmPHjklYWJhs3bpVfvzxR8mZM6dcunQpzfHS42mtb+NHpkuOrXVsPLPPS3fu3Ck1atQw9JmU7N69W2bMmCGnT58WEZHixYtLnz595MUXXzQUJyQkRCIiIqRr166SK1euRNcpRn83M5lZ34qYe2wJCwtL8f9Gt/1z587JhAkTrK5phwwZImXKlDEUR8T8cywzmb0fiDzeFxL+bkZH7RUxv/4QMSdPEW/p0qVJ7u/t27cXEZH79+9bRltMSUojMDo4OMjWrVsNl80sixcvlldffTXjRiJPU2rsPxYdHa1BQUF68uTJdMeKjY1VFxeXdHVklpRy5cqpm5ubVq1aVYcNG5bmu3oODg5JZnyvXLmiLi4uaS7ft99+q5MnT7Y85qb6uGNeIyNIHDx4UI8ePWp5v3r1am3evLkOGzYszaPsmCkuLk43btxoueu2adOmND82kBHu3r1rOJufnPSuz+joaO3SpYulibQZzOy09ciRI5o9e3YtUqSIOjs7W1oQvf/++5bHjmyREctpVtninT17Vt9//31t27atZftYv369zf2bZFS5VB/f+cuZM6c2bNhQXV1d9ZVXXtHg4GDNlSuXoWf8zXosIqMsWrRIq1Wrpnny5LGUdcqUKWkaYcdsZt493rFjh3bo0EGrVq1qeURo0aJF6WopZma9pqppevQjKWbfjTbDc889p99++22i6d99951WqVIlE0r0f/744w9t3Lixenh4pHs7S6+sWbPq9evXVVUto6ol9zLqwoULWqJECfXw8FAnJydLPdm3b199880301Xu8PDwNHVTkVBcXJwePHhQJ02apC+//LKlxYKREddiYmL0q6++0nbt2mm9evW0Tp06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xYsX6yuvvGLqkztPk5s3b2pUVJQ6ODjo2bNnreqMf/75RxcuXKh58uTJ7GJasZsk14MHDwwnUpJToEAB3bNnj6paJwnCw8MNHXhsYevJiZOTk/bv3z9RJWVGkith092E/v777zSdiO3atUtnzpypH3/8sW7evDnTypTagTotB21V1Xz58umKFSsSTV++fLnmz5/fUKyvvvpKCxQooKNGjdKVK1damvrHv9Jizpw5mjdvXv3mm2/U09NTly1bph988IHl7/8FkyZNSrJ5c/PmzXXixImZWDJr165d09u3b6crxo8//qgvvviienh4qL+/v9apU8fy6LMRf/31l4aEhKiDg4O6urqqq6urOjo66ksvvaRXrlxR1cePq2zcuDFd5U2LrFmz6u7duxNN37Vrl+FHvlRVCxcurLNnz040fdasWVqkSBHD8f78808dNmyYNm7cWFu3bq1jxozRGzduGI5jZt2REX777Tdt3769lixZUitVqqRdunRJ04WT2fWa2ceolGJev35dnZycMqVsefLksewHxYoVs2wrp06dMnzuYfbj5mPGjNGgoCBdsmSJZsmSxXJe9M033+gLL7xgKFZERIRGRkZa3u/bt0/79eunX3zxheFyJXT58mWdMGGCFi9eXD09PbVTp05ar149dXZ2tvkRzaVLl2q1atWszrVOnTqlNWrU0CVLlqSrfPEyO8l17NgxDQgIUH9/f61bt67WrVtX/f39NW/evHr8+HHD32/GI/8JE/OhoaHJPlplJHFv1j6eWry01kPNmjXTmjVr6p9//mmZdunSJa1Vq5a2aNHCUKzs2bOnK8mVEY9lJoyT1KNQHh4eOnfu3DSXM6G0rgMz4yV8BCyhq1evqrOzs6FYffr00WnTpiWa/tlnn2m/fv0MxVJVffHFF5O8Mbpq1Sp9/vnnDcVq0aKF1atJkyYaGBiovr6+hpLQ8datW6elSpXSb7/9ViMjIzUyMlK//fZbLVOmjK5bt87QtZqfn5/l3NbLyytd3QeYXX+UL1/etMf0FyxYoD/++KPl/eDBg9XX11erVq2qFy5cMBTryfOz+NfatWt106ZNlq5lUpNcvRH/cnJy0g8++MBQ2VRV//33X504caJ27dpVu3btqpMnT9aoqCjDcZJibFiDTHD9+nXp1KmT/PzzzxIXFyfPPfecLFmyJF1DfF6/fj1RMzuR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Jycn2cl/N27cQEZGBtq1aye7/tdff8HS0lKoeEovKysLgYGB/H9ERGqN2xWJiIiIiEjpTZkyBf369cP+/ftx48YN+Pj4oG7durLrBw4cgIeHh4AJldtXX32FkydPwt7eXugoREQVhqcrEhERERGRSjh27Bj27duHGjVqYNy4cTAwMJBdmzNnDtq0aYO2bdsKF1CJFRQUoHfv3qhWrRpcXFygra0tdz0gIECgZEREisMiFxERERERkZpbv349Ro4cCT09PVStWhUikUh2TSQSIS0tTcB0RESKwSIXERERERGRmqtRowYCAgIwbdo0iMVszUxE6ol/uxEREREREam558+fo2/fvixwEZFa499wREREREREam7w4MHYtm2b0DGIiCoUT1ckIiIiIiJScyUlJVi8eDEOHToEV1fXUo3nly5dKlAyIiLFYU8uIiIiIiIiNdeuXbs3XhOJRDh+/HglpiEiqhgschERERERkUrZuXMntm/fjoyMDDx//lzu2tWrVwVKRUREQmNPLiIiIiIiUhlhYWHw9/eHpaUlYmNj4eHhgapVqyItLQ3e3t5Cx1MZT58+xe7du5GcnCx0FCIihWGRi4iIiIiIVMbPP/+MtWvXYsWKFdDR0cGUKVNw5MgRBAQE4MmTJ0LHU1p9+vTBypUrAQCFhYVo0qQJ+vTpAxcXF/zxxx8CpyMiUgwWuYiIiIiISGVkZGSgRYsWAAB9fX08e/YMADBo0CBs2bJFyGhK7dSpU/D09AQA/Pnnn5BKpcjNzUVYWBjmzZsncDoiIsVgkYuIiIiIiFRGjRo1kJOTAwCwsbHB+fPnAQDp6elgu+E3e/LkCSwsLAAAUVFR6NWrFwwMDNClSxekpKQInI6ISDFY5CIiIiIiIpXRvn177N27FwDg7++PiRMnomPHjujbty969OghcDrlZW1tjXPnziE/Px9RUVHo1KkTAODx48fQ09MTOB0RkWLwdEUiIiIiIlIZEokEEokEWlpaAICtW7fi7NmzcHR0xLfffgsdHR2BEyqnn3/+GePHj4eRkRFsbW1x9epViMVirFixArt27cKJEyeEjkhE9NFY5CIiIiIiItIAly9fRmZmJjp27AgjIyMAwP79+2FmZoaWLVsKnI6I6OOxyEVEREREREotISEBDRs2hFgsRkJCwluf6+rqWkmpiIhI2bDIRURERERESk0s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2wJ4uY3RxcVF2HBERCQokVQqlQodgoiIiIiIqLwuX76MzMxMdOzYEUZGRgCA/fv3w8zMDC1bthQ4HRERCYVFLiIiIiIiIiIiUnncrkhEREREREotMDAQc+fOhaGhIQIDA9/63KVLl1ZSKiIiUjYschERERERkVKLjY1FcXGx7PM3EYlElRWJiIiUELcrEhERERERERGRyhMLHYCIiIiIiIiIiOhjcbsiEREREREptZ49e5b7ubt27arAJEREpMxY5CIiIiIiIqVmamoqdAQiIlIB7MlFREREREREREQqjz25iIiIiIiIiIhI5XG7IhERERERqZSdO3di+/btyMjIwPPnz+WuXb16VaBUREQkNK7kIiIiIiIilREWFgZ/f39YWloiNjYWHh4eqFq1KtLS0uDt7S10PCIiEhB7chERERERkcqoX78+goOD0b9/fxgbGyM+Ph52dnYICgpCTk4OVq5cKXREIiISCFdyERERERGRysjIyECLFi0AAPr6+nj27BkAYNCgQdiyZYuQ0YiISGAschERERERkcqoUaMGcnJyAAA2NjY4f/48ACA9PR3cpEJEpNlY5CIiIiIiIpXRvn177N27FwDg7++PiRMnomPHjujbty969OghcDoiIhISe3IREREREZHKkEgkkEgk0NJ6eVD81q1bcfbsWTg6OuLbb7+Fjo6OwAmJiEgoLHIREREREREREZHK0xI6ABERERER0fvIzc3FxYsX8eDBA0gkErlrfn5+AqUiIiKhcSUXERERERGpjMjISAwcOBB5eXkwMTGBSCSSXROJRLKm9EREpHlY5CIiIiIiIpXx6aefwsfHB6GhoTAwMBA6DhERKREWuYiIiIiISGUYGhri2rVrsLOzEzoKEREpGbHQAYiIiIiIiMqrc+fOuHz5stAxiIhICbHxPBERERERqYwuXbpg8uTJSExMhIuLC7S1teWu+/r6CpSMiIiExu2KRERERESkMsTiN29GEYlEKCkpqcQ0RESkTFjkIiIiIiIiIiIilceeXEREREREpBKKi4uhpaWF69evCx2FiIiUEItcRERERESkErS1tWFjY8MtiUREVCYWuYiIiIiISGXMmDED//vf/5CTkyN0FCIiUjLsyUVERERERCrDzc0Nt2/fRnFxMWxtbWFoaCh3/erVqwIlIyIioWkJHYCIiIiIiKi8unfvLnQEIiJSUlzJRUREREREREREKo89uYiIiIiIiIiISOVxuyIREREREakMsVgMkUj0xus8eZGISHOxyEVERERERCrjzz//lHtcXFyM2NhYhIeHY86cOQKlIiIiZcCeXEREREREpPI2b96Mbdu2Yc+ePUJHISIigbDIRUREREREKi8tLQ2urq7Iy8sTOgoREQmEjeeJiIiIiEilFRYWIiwsDLVq1RI6ChERCYg9uYiIiIiISGWYm5vLNZ6XSqV49uwZDAwM8NtvvwmYjIiIhMbtikREREREpDLCw8PlHovFYlSrVg2ff/45zM3NBUpFRETKgEUuIiIiIiIiIiJSedyuSEREREREKiU3Nxfr169HUlISAMDZ2RlDhw6FqampwMmIiEhIXMlFREREREQq4/Lly+jcuTP09fXh4eEBALh06RIKCwtx+PBhuLu7C5yQiIiEwiIXERERERGpDE9PTzg4OOCXX36BltbLjSkvXrzAN998g7S0NJw6dUrghEREJBQWuYiIiIiISGXo6+sjNjYW9evXlxtPTExEkyZNUFBQIFAyIiISmljoAEREREREROVlYmKCjIyMUuOZmZkwNjYWIBERESkLFrmIiIiIiEhl9O3bF8OGDcO2bduQmZmJzMxMbN26Fd988w369+8vdDwiIhIQT1ckIiIiIiKV8f3330MkEsHPzw8vXryAVCqFjo4ORo0ahYULFwodj4iIBMSeXEREREREpHIKCgqQmpoKALC3t4eBgYHAiYiISGhcyUVEREREREqvZ8+e73yOlpYWatSogY4dO6Jr166VkIqIiJQJe3IREREREZHSMzU1feeHvr4+UlJS0LdvXwQFBQkdmYiIKhm3KxIRERERkVrZt28fRo8eXeYpjEREpL64kouIiIiIiNRKq1at0KRJE6FjEBFRJeNKLiIiIiIiIiIiUnlcyUVERERERERERCqPRS4iIiIiIiIiIlJ5LHIREREREREREZHKY5GLiIiIiIiIiIhUHotcRERERBXs5MmTEIlEyM3N/ajnEBEREdGbschFRERE9BYPHz7EqFGjYGNjA11dXdSoUQOdO3fGmTNnFPp1WrRogXv37sHU1FQh85W3aHby5El069YNVlZWMDQ0ROPGjfH7778rJAMRERFRZdISOgARERGRMuvVqxeeP3+O8PBw2NnZISsrC8eOHUN2drZCv46Ojg5q1Kih0DnL4+zZs3B1dcXUqVNhaWmJffv2wc/PD6ampvjyyy8rPQ8RERHRh+JKLiIiIqI3yM3NRUxMDBYtWoR27drB1tYWHh4emD59Onx9fQEAd+7cgUgkQlxcnNyvE4lEOHnypNx8Z86cgaurK/T09NCsWTNcv35ddq2slVenT5+Gp6cn9PX1YW1tjYCAAOTn58uu//vvv5g6dSqsra2hq6sLBwcHrF+/Hnfu3EG7du0AAObm5hCJRBgyZEiZ3+P//vc/zJ07Fy1atIC9vT3Gjx+PL774Art27fq4/3lERERElYxFLiIiIqI3MDIygpGREXbv3o1///33o+ebPHkyfvjhB1y6dAnVqlVD165dUVxcXOZzU1NT8cUXX6BXr15ISEjAtm3bcPr0aYwdO1b2HD8/P2zZsgVhYWFISkrCmjVrYGRkBGtra/zxxx8AgJs3b+LevXv48ccfy53zyZMnsLCw+LhvloiIiKiScbsiERER0RtoaWlh06ZNGD58OFavXg13d3e0adMG/fr1g6ur63vPFxwcjI4dOwIAwsPDUbt2bfz555/o06dPqecuWLAAAwcOxIQJEwAAjo6OCAsLQ5s2bbBq1SpkZGRg+/btOHLkCDp06AAAsLOzk/36V0Wq6tWrw8zMrNwZt2/fjkuXLmHNmjXv/f0RERERCYkruYiIiIjeolevXvjnn3+wd+9efPHFFzh58iTc3d2xadOm956refPmss8tLCxQr149JCUllfnc+Ph4bNq0SbaazMjICJ07d4ZEIkF6ejri4uJQpUoVtGnT5kO/tVJOnDgBf39//PLLL3B2dlbYvERERESVgUUuIiIionfQ09NDx44dMWvWLJw9exZDhgxBcHAwAEAsfvlySiqVyp7/pi2I7yMvLw/ffvst4uLiZB/x8fFISUmBvb099PX1P/pr/Fd0dDS6du2KZcuWwc/PT6FzExEREVUGFrmIiIiI3lODBg1kDeCrVasGALh3757s+n+b0P/X+fPnZZ8/fvwYt27dgpOTU5nPdXd3R2JiIhwcHEp96OjowMXFBRKJBNHR0WX+eh0dHQBASUnJO7+fkydPokuXLli0aBFGjBjxzucTERERKSMWuYiIiIjeIDs7G+3bt8dvv/2GhIQEpKenY8eOHVi8eDG6desGANDX10ezZs2wcOFCJCUlITo6GjNnzixzvpCQEBw7dgzXr1/HkCFD8Mknn6B79+5lPnfq1Kk4e/Ysxo4di7i4OKSkpGDPnj2yxvN16tTB4MGDMXToUOzevRvp6ek4efIktm/fDgCwtbWFSCTCvn378PDhQ+Tl5ZX5dU6cOIEuXbogICAAvXr1wv3793H//n3k5OR85P89IiIiosrFIhcRERHRGxgZGeHzzz/HsmXL0Lp1azRs2BCzZs3C8OHDsXLlStnzNmzYgBcvXuCzzz7DhAkTMG/evDLnW7hwIcaPH4/PPvsM9+/fR2RkpGzF1etcXV0RHR2NW7duwdPTE25ubggKCkLNmjVlz1m1ahW++uorjB49GvXr18fw4cNlK8xq1aqFOXPmYNq0abC0tJQ7lfG/wsPDUVBQgAULFsDKykr20bNnzw/930ZEREQkCJH0vw0kiIiIiEgQhw4dgre3N4qKit5Y+CIiIiKiN+NKLiIiIiKBZWVlYc+ePXB0dGSBi4iIiOgDaQkdgIiIiEjT+fj44NmzZ/j555+FjkJERESksrhdkYiIiIiIiIiIVB63KxIRERERERERkcpjkYuIiIiIiIiIiFQei1xERERERERERKTyWOQiIiIiIiIiIiKVxyIXERERERERERGpPBa5iIiIiIiIiIhI5bHIRUREREREREREKo9FLiIiIiIiIiIiUnn/B+sJB0i2+tX3AAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "metadata['Subject 2'].value_counts().plot.bar(title='Distribution of secondary subject');"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53df8f4d",
   "metadata": {
    "papermill": {
     "duration": 0.023,
     "end_time": "2024-11-26T20:27:58.499622",
     "exception": false,
     "start_time": "2024-11-26T20:27:58.476622",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# MEMORIES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "6f811c4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:27:58.547404Z",
     "iopub.status.busy": "2024-11-26T20:27:58.546993Z",
     "iopub.status.idle": "2024-11-26T20:27:58.552039Z",
     "shell.execute_reply": "2024-11-26T20:27:58.551055Z"
    },
    "papermill": {
     "duration": 0.031071,
     "end_time": "2024-11-26T20:27:58.554115",
     "exception": false,
     "start_time": "2024-11-26T20:27:58.523044",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "memory = jl.Memory(MEMORY_DIRECTORY, verbose=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90914c62",
   "metadata": {
    "papermill": {
     "duration": 0.022236,
     "end_time": "2024-11-26T20:27:58.599239",
     "exception": false,
     "start_time": "2024-11-26T20:27:58.577003",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# RETRIEVALS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "09a25699",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:27:58.645857Z",
     "iopub.status.busy": "2024-11-26T20:27:58.645447Z",
     "iopub.status.idle": "2024-11-26T20:27:58.650985Z",
     "shell.execute_reply": "2024-11-26T20:27:58.649785Z"
    },
    "papermill": {
     "duration": 0.031508,
     "end_time": "2024-11-26T20:27:58.653279",
     "exception": false,
     "start_time": "2024-11-26T20:27:58.621771",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class Result(TX.TypedDict):\n",
    "    \"\"\"Retrieval result.\"\"\"\n",
    "    otl_id: int\n",
    "    relevance: int"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f1410338",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:27:58.700768Z",
     "iopub.status.busy": "2024-11-26T20:27:58.700352Z",
     "iopub.status.idle": "2024-11-26T20:27:58.787505Z",
     "shell.execute_reply": "2024-11-26T20:27:58.786328Z"
    },
    "papermill": {
     "duration": 0.11401,
     "end_time": "2024-11-26T20:27:58.790327",
     "exception": false,
     "start_time": "2024-11-26T20:27:58.676317",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Characters: 1038386 \n",
      "\n",
      "OTL ID: 4\n",
      "Title: Accounting in the Finance World\n",
      "Publisher: University of Minnesota Libraries Publishing\n",
      "Subject 1: Business - Accounting\n",
      "Subject 2: Business\n",
      "Description: This book is intended for an undergraduate or MBA level Financial Accounting course. It covers the standard topics in a standard sequence, utilizing the Socratic method of asking and answering questions.\n",
      "Copyright Year: 2016\n",
      "\n",
      "OTL ID: 5\n",
      "Title: A First Course in Linear Algebra\n",
      "Publisher: Robert Beezer\n",
      "Subject 1: Mathematics\n",
      "Subject 2: Mathematics - Pure\n",
      "Description: A First Course in Linear Algebra is an introductory textbook aimed at college-level sophomores and juniors. Typically students will have taken calculus, but it is not a prerequisite. The book begins with systems of linear equations, then covers matrix algebra, before taking up finite-dimensional vector spaces in full generality. The final chapter covers matrix representations of linear transformations, through diagonalization, change of basis and Jordan canonical form. Determinants and eigenvalues are covered along the way. A unique feature of this book is that chapters, sections and theorems are labeled rather than numbered. For example, the chapter on vectors is labeled \"Chapter V\" and the theorem that elementary matrices are nonsingular is labeled \"Theorem EMN.\" Another feature of this book is that it is designed to integrate SAGE, an open source alternative to mathematics software such as Matlab and Maple. The author includes a 45-minute video tutorial on SAGE and teaching linear algebra. This textbook has been used in classes at: Centre for Excellence in Basic Sciences, Westmont College, University of Ottawa, Plymouth State University, University of Puget Sound, University of Notre Dame, Carleton University, Amherst College, Felician College, Southern Connecticut State University, Michigan Technological University, Mount Saint Mary College, University of Western Australia, Moorpark College, Pacific University, Colorado State University, Smith College, Wilbur Wright College, Central Washington U (Lynwood Center), St. Cloud State University, Miramar College, Loyola Marymount University.\n",
      "Copyright Year: 2015\n",
      "\n",
      "OTL ID: 8\n",
      "Title: Communication for Business Success\n",
      "Publisher: University of Minnesota Libraries Publishing\n",
      "Subject 1: Business\n",
      "Subject 2: Journalism, Media Studies & Communications - Organizational Communication\n",
      "Description: Business Communication for Success (BCS) provides a comprehensive, integrated approach to the stu\n"
     ]
    }
   ],
   "source": [
    "def row_to_entry(row: tuple[int, pd.Series]) -> str:\n",
    "    \"\"\"Convert a metadata row to a context entry.\"\"\"\n",
    "    lines = []\n",
    "    i, fields = row[0], row[1].to_dict()\n",
    "    lines.append(f\"OTL ID: {fields['OTL ID']}\")\n",
    "    lines.append(f\"Title: {fields['Title']}\")\n",
    "    if not pd.isnull(fields['Publisher']):\n",
    "        lines.append(f\"Publisher: {fields['Publisher']}\")\n",
    "    if not pd.isnull(fields['Subject 1']):\n",
    "        lines.append(f\"Subject 1: {fields['Subject 1']}\")\n",
    "    if not pd.isnull(fields['Subject 2']):\n",
    "        lines.append(f\"Subject 2: {fields['Subject 2']}\")\n",
    "    if not pd.isnull(fields['Description']):\n",
    "        lines.append(f\"Description: {fields['Description']}\")\n",
    "    if not pd.isnull(fields['Copyright Year']):\n",
    "        lines.append(f\"Copyright Year: {int(fields['Copyright Year'])}\")\n",
    "    entry = '\\n'.join(lines)\n",
    "    return entry\n",
    "\n",
    "retrieval_context = '\\n\\n'.join(row_to_entry(row) for row in metadata.iterrows())\n",
    "print(\"Characters:\", len(retrieval_context), '\\n')\n",
    "print(retrieval_context[:2500])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "6543ddc1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:27:58.849531Z",
     "iopub.status.busy": "2024-11-26T20:27:58.849105Z",
     "iopub.status.idle": "2024-11-26T20:27:58.857963Z",
     "shell.execute_reply": "2024-11-26T20:27:58.857078Z"
    },
    "papermill": {
     "duration": 0.037022,
     "end_time": "2024-11-26T20:27:58.859799",
     "exception": false,
     "start_time": "2024-11-26T20:27:58.822777",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "retrieval_safety = SAFETY_SETTINGS\n",
    "retrieval_generator = GENERATIVE_MODEL\n",
    "retrieval_instruction = f\"\"\"\n",
    "You are a powerful textbook retrieval tool. Your goal is to help users find the {RETRIEVAL_TOP_K} most relevant textbooks for their learning needs. \n",
    "\n",
    "**Output:** Return a list of relevant textbooks with their corresponding `olt_id`. Rank each textbook based on its `relevance` to the user's request using the following scale:\n",
    "\n",
    "- **1:** Contains only marginally related information or requires significant supplemental material.\n",
    "- **2:** Covers a small portion of the request or provides a very basic overview of the topic.\n",
    "- **3:** Addresses a significant portion of the request but may lack depth in certain areas.\n",
    "- **4:** Covers most of the request in detail but may be missing a few minor elements.\n",
    "- **5:** Is a highly relevant resource that comprehensively addresses all aspects of the user's request. \n",
    "\n",
    "**Prioritize the most relevant content and consider partial matches that may offer valuable information.**\n",
    "\n",
    "**You can find below textbook metadata:** \n",
    "\"\"\" + retrieval_context\n",
    "retrieval_model = genai.GenerativeModel(\n",
    "    retrieval_generator,\n",
    "    safety_settings=retrieval_safety,\n",
    "    system_instruction=retrieval_instruction,\n",
    ")\n",
    "retrieval_config = genai.GenerationConfig(\n",
    "    max_output_tokens=RETRIEVAL_MAX_OUTPUT_TOKENS,\n",
    "    temperature=GENERATIVE_TEMPERATURE,\n",
    "    response_schema=list[Result],\n",
    "    response_mime_type=\"application/json\",\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "40213590",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:27:58.909426Z",
     "iopub.status.busy": "2024-11-26T20:27:58.908322Z",
     "iopub.status.idle": "2024-11-26T20:27:58.915307Z",
     "shell.execute_reply": "2024-11-26T20:27:58.914538Z"
    },
    "papermill": {
     "duration": 0.033244,
     "end_time": "2024-11-26T20:27:58.917269",
     "exception": false,
     "start_time": "2024-11-26T20:27:58.884025",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "@memory.cache\n",
    "def retrieve(prompt: str) -> pd.DataFrame:\n",
    "    \"\"\"Retrieve relevant textbooks from user prompt.\"\"\"\n",
    "    results = retrieval_model.generate_content(prompt, generation_config=retrieval_config)\n",
    "    content = pd.DataFrame(json.loads(results.text)).rename(columns={'otl_id': 'OTL ID', 'relevance': 'Relevance'})\n",
    "    records = pd.merge(left=content, right=metadata, how='inner', on='OTL ID').sort_values('Relevance', ascending=False)\n",
    "    if results.prompt_feedback:\n",
    "        print(f'Prompt feedbacks: {results.prompt_feedback}')\n",
    "    print(results.usage_metadata)\n",
    "    return records"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "255285f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:27:58.965036Z",
     "iopub.status.busy": "2024-11-26T20:27:58.964648Z",
     "iopub.status.idle": "2024-11-26T20:28:10.904327Z",
     "shell.execute_reply": "2024-11-26T20:28:10.903089Z"
    },
    "papermill": {
     "duration": 11.966298,
     "end_time": "2024-11-26T20:28:10.906675",
     "exception": false,
     "start_time": "2024-11-26T20:27:58.940377",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "________________________________________________________________________________\n",
      "[Memory] Calling __main__--tmp-ipykernel-2616923174.retrieve...\n",
      "retrieve((\"I'm a high school student and I want to learn about Mathematics and Computer \"\n",
      " 'Science with Python.'))\n",
      "prompt_token_count: 204662\n",
      "candidates_token_count: 128\n",
      "total_token_count: 204790\n",
      "\n",
      "________________________________________________________retrieve - 11.9s, 0.2min\n",
      "Shape: (5, 13)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OTL ID</th>\n",
       "      <th>Relevance</th>\n",
       "      <th>Title</th>\n",
       "      <th>Copyright Year</th>\n",
       "      <th>Contributors</th>\n",
       "      <th>Publisher</th>\n",
       "      <th>Description</th>\n",
       "      <th>License</th>\n",
       "      <th>ISBN10</th>\n",
       "      <th>ISBN13</th>\n",
       "      <th>library URL</th>\n",
       "      <th>Subject 1</th>\n",
       "      <th>Subject 2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>43</td>\n",
       "      <td>5</td>\n",
       "      <td>Think Python: How to Think Like a Computer Scientist - 2e</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>Allen B. Downey - Author</td>\n",
       "      <td>Green Tea Press</td>\n",
       "      <td>Think Python is a concise introduction to software design using the Python programming language. Intended for people with no programming experience, this book starts with the most basic concepts and gradually adds new material. Some of the ideas students find most challenging, like recursion and object-oriented programming, are divided into a sequence of smaller steps and introduced over the course of several chapters. This textbook has been used in classes at Bard College, Olin College of E...</td>\n",
       "      <td>Attribution-NonCommercial</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9781491939369</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/think-python-how-to-think-like-a-computer-scientist</td>\n",
       "      <td>Computer Science - Programming Languages</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>80</td>\n",
       "      <td>4</td>\n",
       "      <td>How to Think Like a Computer Scientist: Learning with Python</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>Allen Downey - Author / Jeff Elkner - Author / Chris Meyers - Author</td>\n",
       "      <td>Green Tea Press</td>\n",
       "      <td>How to Think Like a Computer Scientist: Learning with Python is an introduction to programming using Python.</td>\n",
       "      <td>Attribution</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/how-to-think-like-a-computer-scientist-learning-with-python</td>\n",
       "      <td>Computer Science - Programming Languages</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12</td>\n",
       "      <td>3</td>\n",
       "      <td>College Algebra</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>Carl Stitz - Author / Jeff Zeager - Author</td>\n",
       "      <td>Stitz Zeager Open Source Mathematics</td>\n",
       "      <td>College Algebra is an introductory text for a college algebra survey course. The material is presented at a level intended to prepare students for Calculus while also giving them relevant mathematical skills that can be used in other classes. The authors describe their approach as \"Functions First,\" believing introducing functions first will help students understand new concepts more completely. Each section includes homework exercises, and the answers to most computational questions are inc...</td>\n",
       "      <td>Attribution-NonCommercial-ShareAlike</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/college-algebra</td>\n",
       "      <td>Mathematics</td>\n",
       "      <td>Mathematics - Pure</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>58</td>\n",
       "      <td>3</td>\n",
       "      <td>Precalculus</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>Carl Stitz - Author / Jeff Zeager - Author</td>\n",
       "      <td>Stitz Zeager Open Source Mathematics</td>\n",
       "      <td>A casual glance through the Table of Contents of most of the major publishers' College Algebra books reveals nearly isomorphic content in both order and depth. Our Table of Contents shows a different approach, one that might be labeled “Functions First.” To truly use The Rule of Four, that is, in order to discuss each new concept algebraically, graphically, numerically and verbally, it seems completely obvious to us that one would need to introduce functions first. (Take a moment and compare...</td>\n",
       "      <td>Attribution-NonCommercial-ShareAlike</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/precalculus</td>\n",
       "      <td>Mathematics</td>\n",
       "      <td>Mathematics - Pure</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>57</td>\n",
       "      <td>2</td>\n",
       "      <td>College Trigonometry</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>Carl Stitz - Author / Jeff Zeager - Author</td>\n",
       "      <td>Stitz Zeager Open Source Mathematics</td>\n",
       "      <td>Covers chapters 10-11 of Precalculus.</td>\n",
       "      <td>Attribution-NonCommercial-ShareAlike</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/college-trigonometry</td>\n",
       "      <td>Mathematics</td>\n",
       "      <td>Mathematics - Pure</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   OTL ID  Relevance  \\\n",
       "0      43          5   \n",
       "1      80          4   \n",
       "2      12          3   \n",
       "3      58          3   \n",
       "4      57          2   \n",
       "\n",
       "                                                          Title  \\\n",
       "0     Think Python: How to Think Like a Computer Scientist - 2e   \n",
       "1  How to Think Like a Computer Scientist: Learning with Python   \n",
       "2                                               College Algebra   \n",
       "3                                                   Precalculus   \n",
       "4                                          College Trigonometry   \n",
       "\n",
       "   Copyright Year  \\\n",
       "0          2012.0   \n",
       "1          2008.0   \n",
       "2          2013.0   \n",
       "3          2013.0   \n",
       "4          2011.0   \n",
       "\n",
       "                                                           Contributors  \\\n",
       "0                                              Allen B. Downey - Author   \n",
       "1  Allen Downey - Author / Jeff Elkner - Author / Chris Meyers - Author   \n",
       "2                            Carl Stitz - Author / Jeff Zeager - Author   \n",
       "3                            Carl Stitz - Author / Jeff Zeager - Author   \n",
       "4                            Carl Stitz - Author / Jeff Zeager - Author   \n",
       "\n",
       "                              Publisher  \\\n",
       "0                       Green Tea Press   \n",
       "1                       Green Tea Press   \n",
       "2  Stitz Zeager Open Source Mathematics   \n",
       "3  Stitz Zeager Open Source Mathematics   \n",
       "4  Stitz Zeager Open Source Mathematics   \n",
       "\n",
       "                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Description  \\\n",
       "0  Think Python is a concise introduction to software design using the Python programming language. Intended for people with no programming experience, this book starts with the most basic concepts and gradually adds new material. Some of the ideas students find most challenging, like recursion and object-oriented programming, are divided into a sequence of smaller steps and introduced over the course of several chapters. This textbook has been used in classes at Bard College, Olin College of E...   \n",
       "1                                                                                                                                                                                                                                                                                                                                                                                                         How to Think Like a Computer Scientist: Learning with Python is an introduction to programming using Python.   \n",
       "2  College Algebra is an introductory text for a college algebra survey course. The material is presented at a level intended to prepare students for Calculus while also giving them relevant mathematical skills that can be used in other classes. The authors describe their approach as \"Functions First,\" believing introducing functions first will help students understand new concepts more completely. Each section includes homework exercises, and the answers to most computational questions are inc...   \n",
       "3  A casual glance through the Table of Contents of most of the major publishers' College Algebra books reveals nearly isomorphic content in both order and depth. Our Table of Contents shows a different approach, one that might be labeled “Functions First.” To truly use The Rule of Four, that is, in order to discuss each new concept algebraically, graphically, numerically and verbally, it seems completely obvious to us that one would need to introduce functions first. (Take a moment and compare...   \n",
       "4                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Covers chapters 10-11 of Precalculus.   \n",
       "\n",
       "                                License  ISBN10         ISBN13  \\\n",
       "0             Attribution-NonCommercial     NaN  9781491939369   \n",
       "1                           Attribution     NaN           None   \n",
       "2  Attribution-NonCommercial-ShareAlike     NaN           None   \n",
       "3  Attribution-NonCommercial-ShareAlike     NaN           None   \n",
       "4  Attribution-NonCommercial-ShareAlike     NaN           None   \n",
       "\n",
       "                                                                                                library URL  \\\n",
       "0          https://open.umn.edu/opentextbooks/textbooks/think-python-how-to-think-like-a-computer-scientist   \n",
       "1  https://open.umn.edu/opentextbooks/textbooks/how-to-think-like-a-computer-scientist-learning-with-python   \n",
       "2                                              https://open.umn.edu/opentextbooks/textbooks/college-algebra   \n",
       "3                                                  https://open.umn.edu/opentextbooks/textbooks/precalculus   \n",
       "4                                         https://open.umn.edu/opentextbooks/textbooks/college-trigonometry   \n",
       "\n",
       "                                  Subject 1           Subject 2  \n",
       "0  Computer Science - Programming Languages                None  \n",
       "1  Computer Science - Programming Languages                None  \n",
       "2                               Mathematics  Mathematics - Pure  \n",
       "3                               Mathematics  Mathematics - Pure  \n",
       "4                               Mathematics  Mathematics - Pure  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "elementary_maths_python_prompt = \"I'm a high school student and I want to learn about Mathematics and Computer Science with Python.\"\n",
    "elementary_maths_python_records = retrieve(elementary_maths_python_prompt)\n",
    "print('Shape:',elementary_maths_python_records.shape)\n",
    "elementary_maths_python_records.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "69986b3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:28:10.959333Z",
     "iopub.status.busy": "2024-11-26T20:28:10.958958Z",
     "iopub.status.idle": "2024-11-26T20:28:22.660141Z",
     "shell.execute_reply": "2024-11-26T20:28:22.659066Z"
    },
    "papermill": {
     "duration": 11.729825,
     "end_time": "2024-11-26T20:28:22.662517",
     "exception": false,
     "start_time": "2024-11-26T20:28:10.932692",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "________________________________________________________________________________\n",
      "[Memory] Calling __main__--tmp-ipykernel-2616923174.retrieve...\n",
      "retrieve(('I want to become a better leader/manager in a multi-cultural and '\n",
      " 'international environment.'))\n",
      "prompt_token_count: 204660\n",
      "candidates_token_count: 130\n",
      "total_token_count: 204790\n",
      "\n",
      "________________________________________________________retrieve - 11.7s, 0.2min\n",
      "Shape: (5, 13)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OTL ID</th>\n",
       "      <th>Relevance</th>\n",
       "      <th>Title</th>\n",
       "      <th>Copyright Year</th>\n",
       "      <th>Contributors</th>\n",
       "      <th>Publisher</th>\n",
       "      <th>Description</th>\n",
       "      <th>License</th>\n",
       "      <th>ISBN10</th>\n",
       "      <th>ISBN13</th>\n",
       "      <th>library URL</th>\n",
       "      <th>Subject 1</th>\n",
       "      <th>Subject 2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>72</td>\n",
       "      <td>5</td>\n",
       "      <td>International Business</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>Mason A Carpenter - Author / Sanjyot P Dunung - Author</td>\n",
       "      <td>Saylor Foundation</td>\n",
       "      <td>International Business is one of the most challenging and exciting courses to teach in the Business School. To teach a current, dynamic and complete course you need a textbook by authors as passionate and informed about International Business as you are. Carpenter and Dunung's International Business: The Opportunities and Challenges of a Flat World provides exploration into building, leading, and thriving in global organizations in an increasingly flat world. The authors define ”Flat world“ ...</td>\n",
       "      <td>Attribution-NonCommercial-ShareAlike</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9781453312995</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/international-business</td>\n",
       "      <td>Business - Management</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>30</td>\n",
       "      <td>4</td>\n",
       "      <td>Organizational Behavior</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>None</td>\n",
       "      <td>University of Minnesota Libraries Publishing</td>\n",
       "      <td>Organizational Behavior bridges the gap between theory and practice with a distinct \"experiential\" approach. On average, a worker in the USA will change jobs 10 times in 20 years. In order to succeed in this type of career situation, individuals need to be armed with the tools necessary to be life-long learners. To that end, this book is not be about giving students all the answers to every situation they may encounter when they start their first job or as they continue up the career ladder....</td>\n",
       "      <td>Attribution-NonCommercial-ShareAlike</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9781946135155</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/organizational-behavior</td>\n",
       "      <td>Business - Human Resources</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>136</td>\n",
       "      <td>4</td>\n",
       "      <td>Leading with Cultural Intelligence</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>Mai Moua - Author</td>\n",
       "      <td>Saylor Foundation</td>\n",
       "      <td>Organizations in the 21st century are in need of culturally intelligent managers and leaders. The pressure to build authentic global networks and to cultivate an appreciation and respect for cultural differences and similarities has driven cultural intelligence to the forefront of diversity and inclusion work. Preparing today's students to be effective leaders in their professional lives requires that they hone their cultural intelligence as it is vital to working inter- and intra-culturally...</td>\n",
       "      <td>Attribution-NonCommercial-ShareAlike</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9781453332894</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/leading-with-cultural-intelligence</td>\n",
       "      <td>Business</td>\n",
       "      <td>Business - Human Resources</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>153</td>\n",
       "      <td>3</td>\n",
       "      <td>Educational Psychology - Second Edition</td>\n",
       "      <td>2009.0</td>\n",
       "      <td>Kelvin Seifert - Author / Rosemary Sutton - Author</td>\n",
       "      <td>University of Manitoba</td>\n",
       "      <td>Chapters in the text can be assigned either from beginning to end, as with a conventional printed book, or they can be selected in some other sequence to meet the needs of particular students or classes. In general the first half of the book focuses on broader questions and principles taken from psychology per se, and the second half focuses on somewhat more practical issues of teaching. But the division between “theory” and “practice” is only approximate; all parts of the book draw on resea...</td>\n",
       "      <td>Attribution</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/educational-psychology</td>\n",
       "      <td>Education</td>\n",
       "      <td>Social Sciences - Psychology</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>74</td>\n",
       "      <td>3</td>\n",
       "      <td>Principles of Social Psychology</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>None</td>\n",
       "      <td>University of Minnesota Libraries Publishing</td>\n",
       "      <td>Have you ever had trouble teaching the various topics of social psychology and fitting them together to form a coherent field? Unnamed Author felt like he was presenting a laundry list of ideas, research studies, and phenomena, rather than an integrated set of principles and knowledge. He wondered how his students could be expected to remember and understand the many phenomena that social psychologists study? How could they tell what was most important? It was then that he realized a fresh a...</td>\n",
       "      <td>Attribution-NonCommercial-ShareAlike</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9781946135209</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/principles-of-social-psychology</td>\n",
       "      <td>Social Sciences - Psychology</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   OTL ID  Relevance                                    Title  Copyright Year  \\\n",
       "0      72          5                   International Business          2011.0   \n",
       "1      30          4                  Organizational Behavior          2017.0   \n",
       "2     136          4       Leading with Cultural Intelligence          2012.0   \n",
       "3     153          3  Educational Psychology - Second Edition          2009.0   \n",
       "4      74          3          Principles of Social Psychology          2015.0   \n",
       "\n",
       "                                             Contributors  \\\n",
       "0  Mason A Carpenter - Author / Sanjyot P Dunung - Author   \n",
       "1                                                    None   \n",
       "2                                       Mai Moua - Author   \n",
       "3      Kelvin Seifert - Author / Rosemary Sutton - Author   \n",
       "4                                                    None   \n",
       "\n",
       "                                      Publisher  \\\n",
       "0                             Saylor Foundation   \n",
       "1  University of Minnesota Libraries Publishing   \n",
       "2                             Saylor Foundation   \n",
       "3                        University of Manitoba   \n",
       "4  University of Minnesota Libraries Publishing   \n",
       "\n",
escription  \\\n",
       "0  International Business is one of the most challenging and exciting courses to teach in the Business School. To teach a current, dynamic and complete course you need a textbook by authors as passionate and informed about International Business as you are. Carpenter and Dunung's International Business: The Opportunities and Challenges of a Flat World provides exploration into building, leading, and thriving in global organizations in an increasingly flat world. The authors define ”Flat world“ ...   \n",
       "1  Organizational Behavior bridges the gap between theory and practice with a distinct \"experiential\" approach. On average, a worker in the USA will change jobs 10 times in 20 years. In order to succeed in this type of career situation, individuals need to be armed with the tools necessary to be life-long learners. To that end, this book is not be about giving students all the answers to every situation they may encounter when they start their first job or as they continue up the career ladder....   \n",
       "2  Organizations in the 21st century are in need of culturally intelligent managers and leaders. The pressure to build authentic global networks and to cultivate an appreciation and respect for cultural differences and similarities has driven cultural intelligence to the forefront of diversity and inclusion work. Preparing today's students to be effective leaders in their professional lives requires that they hone their cultural intelligence as it is vital to working inter- and intra-culturally...   \n",
       "3  Chapters in the text can be assigned either from beginning to end, as with a conventional printed book, or they can be selected in some other sequence to meet the needs of particular students or classes. In general the first half of the book focuses on broader questions and principles taken from psychology per se, and the second half focuses on somewhat more practical issues of teaching. But the division between “theory” and “practice” is only approximate; all parts of the book draw on resea...   \n",
       "4  Have you ever had trouble teaching the various topics of social psychology and fitting them together to form a coherent field? Unnamed Author felt like he was presenting a laundry list of ideas, research studies, and phenomena, rather than an integrated set of principles and knowledge. He wondered how his students could be expected to remember and understand the many phenomena that social psychologists study? How could they tell what was most important? It was then that he realized a fresh a...   \n",
       "\n",
       "                                License  ISBN10         ISBN13  \\\n",
       "0  Attribution-NonCommercial-ShareAlike     NaN  9781453312995   \n",
       "1  Attribution-NonCommercial-ShareAlike     NaN  9781946135155   \n",
       "2  Attribution-NonCommercial-ShareAlike     NaN  9781453332894   \n",
       "3                           Attribution     NaN           None   \n",
       "4  Attribution-NonCommercial-ShareAlike     NaN  9781946135209   \n",
       "\n",
       "                                                                       library URL  \\\n",
       "0              https://open.umn.edu/opentextbooks/textbooks/international-business   \n",
       "1             https://open.umn.edu/opentextbooks/textbooks/organizational-behavior   \n",
       "2  https://open.umn.edu/opentextbooks/textbooks/leading-with-cultural-intelligence   \n",
       "3              https://open.umn.edu/opentextbooks/textbooks/educational-psychology   \n",
       "4     https://open.umn.edu/opentextbooks/textbooks/principles-of-social-psychology   \n",
       "\n",
       "                      Subject 1                     Subject 2  \n",
       "0         Business - Management                          None  \n",
       "1    Business - Human Resources                          None  \n",
       "2                      Business    Business - Human Resources  \n",
       "3                     Education  Social Sciences - Psychology  \n",
       "4  Social Sciences - Psychology                          None  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_multicultural_management_prompt = \"I want to become a better leader/manager in a multi-cultural and international environment.\"\n",
    "adult_multicultural_management_records = retrieve(adult_multicultural_management_prompt)\n",
    "print('Shape:',adult_multicultural_management_records.shape)\n",
    "adult_multicultural_management_records.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "991d2b37",
   "metadata": {
    "papermill": {
     "duration": 0.025604,
     "end_time": "2024-11-26T20:28:22.715620",
     "exception": false,
     "start_time": "2024-11-26T20:28:22.690016",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# ASSISTANTS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "e8be1193",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:28:22.769750Z",
     "iopub.status.busy": "2024-11-26T20:28:22.769316Z",
     "iopub.status.idle": "2024-11-26T20:28:22.774828Z",
     "shell.execute_reply": "2024-11-26T20:28:22.773613Z"
    },
    "papermill": {
     "duration": 0.035249,
     "end_time": "2024-11-26T20:28:22.776998",
     "exception": false,
     "start_time": "2024-11-26T20:28:22.741749",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "id_to_path = lambda id: os.path.join(TEXTBOOK_FOLDER, f'{id}.pdf')\n",
    "assistant_files: dict[str, genai.types.File] = {}\n",
    "assistant_texts: dict[str, str] = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "291dbb0c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:28:22.831424Z",
     "iopub.status.busy": "2024-11-26T20:28:22.830329Z",
     "iopub.status.idle": "2024-11-26T20:28:22.836730Z",
     "shell.execute_reply": "2024-11-26T20:28:22.835669Z"
    },
    "papermill": {
     "duration": 0.035887,
     "end_time": "2024-11-26T20:28:22.838706",
     "exception": false,
     "start_time": "2024-11-26T20:28:22.802819",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "assistant_safety = SAFETY_SETTINGS\n",
    "assistant_generator = GENERATIVE_MODEL\n",
    "assistant_base_instruction = \"\"\"\n",
    "You are a friendly and helpful learning assistant. Your primary goal is to personalize learning content for the user based on their specific requests and objectives. \n",
    "\n",
    "To do this, you will:\n",
    "- **Utilize the provided textbooks:** Ground your responses and explanations in the information available from these textbooks. \n",
    "- **Understand the user's request and objective:** Carefully analyze the user's input to identify their needs and learning goals.\n",
    "- **Personalize the learning experience:** Adapt your explanations, examples, and activities to the user's level and learning style.\n",
    "- **Provide constructive feedback:** Offer helpful guidance and suggestions to support the user in achieving their objectives.\n",
    "- **Maintain a pedagogic tone:** Use clear and concise language, and present information in an engaging and accessible manner.\n",
    "\n",
    "**Here is the user's request and objective:**\n",
    "\"\"\"\n",
    "assistant_model = genai.GenerativeModel(\n",
    "    assistant_generator,\n",
    "    safety_settings=assistant_safety,\n",
    ")\n",
    "assistant_config = genai.GenerationConfig(\n",
    "    temperature=GENERATIVE_TEMPERATURE,\n",
    "    max_output_tokens=ASSISTANT_MAX_OUTPUT_TOKENS,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "8f0dd454",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:28:22.893618Z",
     "iopub.status.busy": "2024-11-26T20:28:22.892638Z",
     "iopub.status.idle": "2024-11-26T20:28:22.900427Z",
     "shell.execute_reply": "2024-11-26T20:28:22.899202Z"
    },
    "papermill": {
     "duration": 0.038116,
     "end_time": "2024-11-26T20:28:22.902594",
     "exception": false,
     "start_time": "2024-11-26T20:28:22.864478",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def upload(records: pd.DataFrame) -> dict[str, genai.types.File]:\n",
    "    \"\"\"Upload textbooks to the generative AI API.\"\"\"\n",
    "    records_files = {}\n",
    "    # gather files already uploaded\n",
    "    uploaded_files = {file.name: file for file in genai.list_files(page_size=100)}\n",
    "    for i, record in records.iterrows():\n",
    "        otl_id = str(record[\"OTL ID\"])\n",
    "        otl_title = record[\"Title\"]\n",
    "        file_name = f'files/{otl_id}'\n",
    "        file_path = id_to_path(otl_id)\n",
    "        try:\n",
    "            if file_name in uploaded_files:\n",
    "                file = uploaded_files[file_name]\n",
    "            else:\n",
    "                file = genai.upload_file(file_path, mime_type='application/pdf', name=file_name, display_name=otl_title)\n",
    "            records_files[otl_id] = file\n",
    "            print(f'- [{i}] OTL ID: {otl_id}, OTL Title: {otl_title}')\n",
    "        except Exception as error:\n",
    "            print(f'x [{i}] Upload Error for {otl_id}: {error}')\n",
    "    return records_files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "f3541710",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:28:22.959075Z",
     "iopub.status.busy": "2024-11-26T20:28:22.958692Z",
     "iopub.status.idle": "2024-11-26T20:28:36.283998Z",
     "shell.execute_reply": "2024-11-26T20:28:36.282860Z"
    },
    "papermill": {
     "duration": 13.356702,
     "end_time": "2024-11-26T20:28:36.286051",
     "exception": false,
     "start_time": "2024-11-26T20:28:22.929349",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- [0] OTL ID: 43, OTL Title: Think Python: How to Think Like a Computer Scientist - 2e\n",
      "- [1] OTL ID: 80, OTL Title: How to Think Like a Computer Scientist: Learning with Python\n",
      "- [2] OTL ID: 12, OTL Title: College Algebra\n",
      "- [3] OTL ID: 58, OTL Title: Precalculus\n",
      "- [4] OTL ID: 57, OTL Title: College Trigonometry\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'43': genai.File({\n",
       "     'name': 'files/43',\n",
       "     'display_name': 'Think Python: How to Think Like a Computer Scientist - 2e',\n",
       "     'mime_type': 'application/pdf',\n",
       "     'sha256_hash': 'OWQ5MjNjYWNmMWIwN2U4OGE2MzE0Mzk1YTVhZmFmYWUxYWEwMWNkMWFhMGNlMTZiMTg1MWQzOGIxODU0MjQ4Nw==',\n",
       "     'size_bytes': '921415',\n",
       "     'state': 'ACTIVE',\n",
       "     'uri': 'https://generativelanguage.googleapis.com/v1beta/files/43',\n",
       "     'create_time': '2024-11-26T20:28:25.820662Z',\n",
       "     'expiration_time': '2024-11-28T20:28:25.758230033Z',\n",
       "     'update_time': '2024-11-26T20:28:25.820662Z'}),\n",
       " '80': genai.File({\n",
       "     'name': 'files/80',\n",
       "     'display_name': 'How to Think Like a Computer Scientist: Learning with Python',\n",
       "     'mime_type': 'application/pdf',\n",
       "     'sha256_hash': 'MTllYzM3ZGRlODE4YTQzMzBiNzM5MWE4NTA2MjA4ODI2MjMzYTA4YWM3MGJhNmRiYmRlNDQwYTllODQ0YmJkNw==',\n",
       "     'size_bytes': '1024265',\n",
       "     'state': 'ACTIVE',\n",
       "     'uri': 'https://generativelanguage.googleapis.com/v1beta/files/80',\n",
       "     'create_time': '2024-11-26T20:28:28.245985Z',\n",
       "     'expiration_time': '2024-11-28T20:28:28.174385460Z',\n",
       "     'update_time': '2024-11-26T20:28:28.245985Z'}),\n",
       " '12': genai.File({\n",
       "     'name': 'files/12',\n",
       "     'display_name': 'College Algebra',\n",
       "     'mime_type': 'application/pdf',\n",
       "     'sha256_hash': 'NjcyYzEwOGMyOWQzMjUwZDg2YzkwZTAyYjc4MDQ5ODk0ZmQxZDQ1OWRhOWM4ZDAxYjRlYjNhYmNmYjhkYjU4YQ==',\n",
       "     'size_bytes': '6105538',\n",
       "     'state': 'ACTIVE',\n",
       "     'uri': 'https://generativelanguage.googleapis.com/v1beta/files/12',\n",
       "     'create_time': '2024-11-26T20:28:31.276583Z',\n",
       "     'expiration_time': '2024-11-28T20:28:31.204808756Z',\n",
       "     'update_time': '2024-11-26T20:28:31.276583Z'}),\n",
       " '58': genai.File({\n",
       "     'name': 'files/58',\n",
       "     'display_name': 'Precalculus',\n",
       "     'mime_type': 'application/pdf',\n",
       "     'sha256_hash': 'Y2JhYTg3OGFiYWI5MWNmZGI4YmIzZDU3MzM3MjdhYzQzNDg3Nzk3MjA4MWY3ZTJkOTQ1YTk3MDUxMTI3ZTk4Zg==',\n",
       "     'size_bytes': '11783266',\n",
       "     'state': 'ACTIVE',\n",
       "     'uri': 'https://generativelanguage.googleapis.com/v1beta/files/58',\n",
       "     'create_time': '2024-11-26T20:28:33.256773Z',\n",
       "     'expiration_time': '2024-11-28T20:28:33.186332470Z',\n",
       "     'update_time': '2024-11-26T20:28:33.256773Z'}),\n",
       " '57': genai.File({\n",
       "     'name': 'files/57',\n",
       "     'display_name': 'College Trigonometry',\n",
       "     'mime_type': 'application/pdf',\n",
       "     'sha256_hash': 'ZDg5NGY4ZmZjMGU1MzFjZmZmOGEyZDRiZDAyNjQ5NzkyNjA1YzI1YTI0YjZiZmNmZDJhMDRhYjAxYzRkMjEzZg==',\n",
       "     'size_bytes': '5095810',\n",
       "     'state': 'ACTIVE',\n",
       "     'uri': 'https://generativelanguage.googleapis.com/v1beta/files/57',\n",
       "     'create_time': '2024-11-26T20:28:35.342660Z',\n",
       "     'expiration_time': '2024-11-28T20:28:35.287383118Z',\n",
       "     'update_time': '2024-11-26T20:28:35.342660Z'})}"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "elementary_maths_python_files = upload(elementary_maths_python_records)\n",
    "assistant_files |= elementary_maths_python_files\n",
    "elementary_maths_python_files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "b60426ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:28:36.392290Z",
     "iopub.status.busy": "2024-11-26T20:28:36.391446Z",
     "iopub.status.idle": "2024-11-26T20:28:47.394895Z",
     "shell.execute_reply": "2024-11-26T20:28:47.393636Z"
    },
    "papermill": {
     "duration": 11.084739,
     "end_time": "2024-11-26T20:28:47.397360",
     "exception": false,
     "start_time": "2024-11-26T20:28:36.312621",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- [0] OTL ID: 72, OTL Title: International Business\n",
      "- [1] OTL ID: 30, OTL Title: Organizational Behavior\n",
      "- [2] OTL ID: 136, OTL Title: Leading with Cultural Intelligence\n",
      "- [3] OTL ID: 153, OTL Title: Educational Psychology - Second Edition\n",
      "- [4] OTL ID: 74, OTL Title: Principles of Social Psychology\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'72': genai.File({\n",
       "     'name': 'files/72',\n",
       "     'display_name': 'International Business',\n",
       "     'mime_type': 'application/pdf',\n",
       "     'sha256_hash': 'ZjhhZTY5YTMwMTI2MDIwMzEyNTczMmMwYWI3MjNkNTdiMTE4ZjQ0MWYyZTMwM2IwNTkzNTY4YmVhZDhlZTNiNw==',\n",
       "     'size_bytes': '6258984',\n",
       "     'state': 'ACTIVE',\n",
       "     'uri': 'https://generativelanguage.googleapis.com/v1beta/files/72',\n",
       "     'create_time': '2024-11-26T20:28:38.218751Z',\n",
       "     'expiration_time': '2024-11-28T20:28:38.139253791Z',\n",
       "     'update_time': '2024-11-26T20:28:38.218751Z'}),\n",
       " '30': genai.File({\n",
       "     'name': 'files/30',\n",
       "     'display_name': 'Organizational Behavior',\n",
       "     'mime_type': 'application/pdf',\n",
       "     'sha256_hash': 'ZTgyYWQ1M2YzNjkzY2RmNzdhZDVmMjUzZjk5NjcxNDlhZjQ3OWZhZGM2Y2M4NzMyMDcyNGE4ODRhYjU3ZjA1OA==',\n",
       "     'size_bytes': '480875',\n",
       "     'state': 'ACTIVE',\n",
       "     'uri': 'https://generativelanguage.googleapis.com/v1beta/files/30',\n",
       "     'create_time': '2024-11-26T20:28:40.200552Z',\n",
       "     'expiration_time': '2024-11-28T20:28:40.138071823Z',\n",
       "     'update_time': '2024-11-26T20:28:40.200552Z'}),\n",
       " '136': genai.File({\n",
       "     'name': 'files/136',\n",
       "     'display_name': 'Leading with Cultural Intelligence',\n",
       "     'mime_type': 'application/pdf',\n",
       "     'sha256_hash': 'ZmJiOTYxMGJkMDY3MTg4NDQ2ODhjMGM5NzI2MTM0ZGIzZjM4NTMxZjczNWI0NzBkNmE1Nzk5NzFjNWNhMTQ5Nw==',\n",
       "     'size_bytes': '1586942',\n",
       "     'state': 'ACTIVE',\n",
       "     'uri': 'https://generativelanguage.googleapis.com/v1beta/files/136',\n",
       "     'create_time': '2024-11-26T20:28:42.141595Z',\n",
       "     'expiration_time': '2024-11-28T20:28:42.072918175Z',\n",
       "     'update_time': '2024-11-26T20:28:42.141595Z'}),\n",
       " '153': genai.File({\n",
       "     'name': 'files/153',\n",
       "     'display_name': 'Educational Psychology - Second Edition',\n",
       "     'mime_type': 'application/pdf',\n",
       "     'sha256_hash': 'NDkwNWVlMWFjZTIxMTQ5NWJmZDRhYmVkM2Y5YWIwNDViZWFmZGRjZmFmNGI2ZTIyOWM1NmY0NjBjYmNhMjhiNQ==',\n",
       "     'size_bytes': '2915354',\n",
       "     'state': 'ACTIVE',\n",
       "     'uri': 'https://generativelanguage.googleapis.com/v1beta/files/153',\n",
       "     'create_time': '2024-11-26T20:28:44.477010Z',\n",
       "     'expiration_time': '2024-11-28T20:28:44.405254662Z',\n",
       "     'update_time': '2024-11-26T20:28:44.477010Z'}),\n",
       " '74': genai.File({\n",
       "     'name': 'files/74',\n",
       "     'display_name': 'Principles of Social Psychology',\n",
       "     'mime_type': 'application/pdf',\n",
       "     'sha256_hash': 'NjA5NTIxYWEzMmQ2ODJmZjQxOGYwZjQxMjFiYjRmNzQxZGFkYjc1OWExMTExMDNiNTdiZTNlMzY0OGUxNjk1Yw==',\n",
       "     'size_bytes': '169715',\n",
       "     'state': 'ACTIVE',\n",
       "     'uri': 'https://generativelanguage.googleapis.com/v1beta/files/74',\n",
       "     'create_time': '2024-11-26T20:28:46.403522Z',\n",
       "     'expiration_time': '2024-11-28T20:28:46.330732068Z',\n",
       "     'update_time': '2024-11-26T20:28:46.403522Z'})}"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_multicultural_management_files = upload(adult_multicultural_management_records)\n",
    "assistant_files |= adult_multicultural_management_files\n",
    "adult_multicultural_management_files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "90612225",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:28:47.453953Z",
     "iopub.status.busy": "2024-11-26T20:28:47.453570Z",
     "iopub.status.idle": "2024-11-26T20:28:47.460901Z",
     "shell.execute_reply": "2024-11-26T20:28:47.459632Z"
    },
    "papermill": {
     "duration": 0.038297,
     "end_time": "2024-11-26T20:28:47.463075",
     "exception": false,
     "start_time": "2024-11-26T20:28:47.424778",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def extract(records: pd.DataFrame) -> dict[str, str]:\n",
    "    \"\"\"Extract texts from PDF textbooks.\"\"\"\n",
    "    records_texts = {}\n",
    "    for i, record in records.iterrows():\n",
    "        otl_id = str(record[\"OTL ID\"])\n",
    "        otl_title = record[\"Title\"]\n",
    "        file_path = id_to_path(otl_id)\n",
    "        with open(file_path, 'rb') as file:\n",
    "            reader = pypdf.PdfReader(file)\n",
    "            text = \"\".join(page.extract_text() for page in reader.pages)\n",
    "            records_texts[otl_id] = text\n",
    "            print(f'- [{i}] OTL ID: {otl_id}, OTL Title: {otl_title}')\n",
    "    return records_texts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e0e56378",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:28:47.519288Z",
     "iopub.status.busy": "2024-11-26T20:28:47.518880Z",
     "iopub.status.idle": "2024-11-26T20:30:05.632457Z",
     "shell.execute_reply": "2024-11-26T20:30:05.631298Z"
    },
    "papermill": {
     "duration": 78.144666,
     "end_time": "2024-11-26T20:30:05.634773",
     "exception": false,
     "start_time": "2024-11-26T20:28:47.490107",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- [0] OTL ID: 43, OTL Title: Think Python: How to Think Like a Computer Scientist - 2e\n",
      "- [1] OTL ID: 80, OTL Title: How to Think Like a Computer Scientist: Learning with Python\n",
      "- [2] OTL ID: 12, OTL Title: College Algebra\n",
      "- [3] OTL ID: 58, OTL Title: Precalculus\n",
      "- [4] OTL ID: 57, OTL Title: College Trigonometry\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "dict_keys(['43', '80', '12', '58', '57'])"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "elementary_maths_python_texts = extract(elementary_maths_python_records)\n",
    "assistant_texts |= elementary_maths_python_texts\n",
    "elementary_maths_python_texts.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "cd6285a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:30:05.690806Z",
     "iopub.status.busy": "2024-11-26T20:30:05.690344Z",
     "iopub.status.idle": "2024-11-26T20:31:01.549835Z",
     "shell.execute_reply": "2024-11-26T20:31:01.548668Z"
    },
    "papermill": {
     "duration": 55.890242,
     "end_time": "2024-11-26T20:31:01.552342",
     "exception": false,
     "start_time": "2024-11-26T20:30:05.662100",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- [0] OTL ID: 72, OTL Title: International Business\n",
      "- [1] OTL ID: 30, OTL Title: Organizational Behavior\n",
      "- [2] OTL ID: 136, OTL Title: Leading with Cultural Intelligence\n",
      "- [3] OTL ID: 153, OTL Title: Educational Psychology - Second Edition\n",
      "- [4] OTL ID: 74, OTL Title: Principles of Social Psychology\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "dict_keys(['72', '30', '136', '153', '74'])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_multicultural_management_texts = extract(adult_multicultural_management_records)\n",
    "assistant_texts |= adult_multicultural_management_texts\n",
    "adult_multicultural_management_texts.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "3018022e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:31:01.609339Z",
     "iopub.status.busy": "2024-11-26T20:31:01.608933Z",
     "iopub.status.idle": "2024-11-26T20:31:01.619482Z",
     "shell.execute_reply": "2024-11-26T20:31:01.618458Z"
    },
    "papermill": {
     "duration": 0.041576,
     "end_time": "2024-11-26T20:31:01.621745",
     "exception": false,
     "start_time": "2024-11-26T20:31:01.580169",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "@memory.cache\n",
    "def analyze_file(otl_id: str) -> dict[str, T.Any]:\n",
    "    \"\"\"Analyze an uploaded file.\"\"\"\n",
    "    analysis = {'otl_id': otl_id}\n",
    "    file = assistant_files.get(otl_id)\n",
    "    if not file:\n",
    "        return analysis\n",
    "    analysis |= {'file_bytes': file.size_bytes}\n",
    "    try:\n",
    "        count = assistant_model.count_tokens(file)\n",
    "        analysis |= {\n",
    "            'file_total_tokens': count.total_tokens,\n",
    "            'file_cached_content_token_count': count.cached_content_token_count, \n",
    "        }\n",
    "    except Exception as error:\n",
    "        analysis |= {'file_error': str(error)}\n",
    "    return analysis\n",
    "\n",
    "\n",
    "@memory.cache\n",
    "def analyze_text(otl_id: str) -> dict[str, T.Any]:\n",
    "    \"\"\"Analyze an extracted text.\"\"\"\n",
    "    analysis = {'otl_id': otl_id}\n",
    "    text = assistant_texts.get(otl_id)\n",
    "    if not text:\n",
    "        return analysis\n",
    "    analysis |= {'text_bytes': len(text)}\n",
    "    try:\n",
    "        count = assistant_model.count_tokens(text)\n",
    "        analysis |= {\n",
    "            'text_total_tokens': count.total_tokens,\n",
    "            'text_cached_content_token_count': count.cached_content_token_count, \n",
    "        }\n",
    "    except Exception as error:\n",
    "        analysis |= {'text_error': str(error)}\n",
    "    return analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "5c1bd3ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:31:01.679482Z",
     "iopub.status.busy": "2024-11-26T20:31:01.678332Z",
     "iopub.status.idle": "2024-11-26T20:33:59.566406Z",
     "shell.execute_reply": "2024-11-26T20:33:59.565134Z"
    },
    "papermill": {
     "duration": 177.919888,
     "end_time": "2024-11-26T20:33:59.569262",
     "exception": false,
     "start_time": "2024-11-26T20:31:01.649374",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "________________________________________________________________________________\n",
      "[Memory] Calling __main__--tmp-ipykernel-2976116976.analyze_file...\n",
      "analyze_file(otl_id='58')\n",
      "_____________________________________________________analyze_file - 7.4s, 0.1min\n",
      "________________________________________________________________________________\n",
      "[Memory] Calling __main__--tmp-ipykernel-2976116976.analyze_text...\n",
      "analyze_text(otl_id='58')\n",
      "_____________________________________________________analyze_text - 3.1s, 0.1min\n",
      "________________________________________________________________________________\n",
      "[Memory] Calling __main__--tmp-ipykernel-2976116976.analyze_file...\n",
      "analyze_file(otl_id='30')\n",
      "_____________________________________________________analyze_file - 2.1s, 0.0min\n",
      "________________________________________________________________________________\n",
      "[Memory] Calling __main__--tmp-ipykernel-2976116976.analyze_text...\n",
      "analyze_text(otl_id='30')\n",
      "_____________________________________________________analyze_text - 0.8s, 0.0min\n",
      "________________________________________________________________________________\n",
      "[Memory] Calling __main__--tmp-ipykernel-2976116976.analyze_file...\n",
      "analyze_file(otl_id='72')\n",
      "____________________________________________________analyze_file - 60.0s, 1.0min\n",
      "________________________________________________________________________________\n",
      "[Memory] Calling __main__--tmp-ipykernel-2976116976.analyze_text...\n",
      "analyze_text(otl_id='72')\n",
      "_____________________________________________________analyze_text - 5.5s, 0.1min\n",
      "________________________________________________________________________________\n",
      "[Memory] Calling __main__--tmp-ipykernel-2976116976.analyze_file...\n",
      "analyze_file(otl_id='57')\n",
      "____________________________________________________analyze_file - 15.1s, 0.3min\n",
      "________________________________________________________________________________\n",
      "[Memory] Calling __main__--tmp-ipykernel-2976116976.analyze_text...\n",
      "analyze_text(otl_id='57')\n",
      "_____________________________________________________analyze_text - 2.3s, 0.0min\n",
      "________________________________________________________________________________\n",
      "[Memory] Calling __main__--tmp-ipykernel-2976116976.analyze_file...\n",
      "analyze_file(otl_id='153')\n",
      "____________________________________________________analyze_file - 18.3s, 0.3min\n",
      "________________________________________________________________________________\n",
      "[Memory] Calling __main__--tmp-ipykernel-2976116976.analyze_text...\n",
      "analyze_text(otl_id='153')\n",
      "_____________________________________________________analyze_text - 4.2s, 0.1min\n",
      "________________________________________________________________________________\n",
      "[Memory] Calling __main__--tmp-ipykernel-2976116976.analyze_file...\n",
      "analyze_file(otl_id='74')\n",
      "_____________________________________________________analyze_file - 1.1s, 0.0min\n",
      "________________________________________________________________________________\n",
      "[Memory] Calling __main__--tmp-ipykernel-2976116976.analyze_text...\n",
      "analyze_text(otl_id='74')\n",
      "_____________________________________________________analyze_text - 0.2s, 0.0min\n",
      "________________________________________________________________________________\n",
      "[Memory] Calling __main__--tmp-ipykernel-2976116976.analyze_file...\n",
      "analyze_file(otl_id='43')\n",
      "_____________________________________________________analyze_file - 9.9s, 0.2min\n",
      "________________________________________________________________________________\n",
      "[Memory] Calling __main__--tmp-ipykernel-2976116976.analyze_text...\n",
      "analyze_text(otl_id='43')\n",
      "_____________________________________________________analyze_text - 1.8s, 0.0min\n",
      "________________________________________________________________________________\n",
      "[Memory] Calling __main__--tmp-ipykernel-2976116976.analyze_file...\n",
      "analyze_file(otl_id='136')\n",
      "_____________________________________________________analyze_file - 8.3s, 0.1min\n",
      "________________________________________________________________________________\n",
      "[Memory] Calling __main__--tmp-ipykernel-2976116976.analyze_text...\n",
      "analyze_text(otl_id='136')\n",
      "_____________________________________________________analyze_text - 1.1s, 0.0min\n",
      "________________________________________________________________________________\n",
      "[Memory] Calling __main__--tmp-ipykernel-2976116976.analyze_file...\n",
      "analyze_file(otl_id='12')\n",
      "____________________________________________________analyze_file - 24.8s, 0.4min\n",
      "________________________________________________________________________________\n",
      "[Memory] Calling __main__--tmp-ipykernel-2976116976.analyze_text...\n",
      "analyze_text(otl_id='12')\n",
      "_____________________________________________________analyze_text - 3.4s, 0.1min\n",
      "________________________________________________________________________________\n",
      "[Memory] Calling __main__--tmp-ipykernel-2976116976.analyze_file...\n",
      "analyze_file(otl_id='80')\n",
      "_____________________________________________________analyze_file - 7.9s, 0.1min\n",
      "________________________________________________________________________________\n",
      "[Memory] Calling __main__--tmp-ipykernel-2976116976.analyze_text...\n",
      "analyze_text(otl_id='80')\n",
      "_____________________________________________________analyze_text - 0.6s, 0.0min\n",
      "(10, 7)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>file_bytes</th>\n",
       "      <th>file_error</th>\n",
       "      <th>text_bytes</th>\n",
       "      <th>text_total_tokens</th>\n",
       "      <th>text_cached_content_token_count</th>\n",
       "      <th>file_total_tokens</th>\n",
       "      <th>file_cached_content_token_count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>otl_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>6105538</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1125871</td>\n",
       "      <td>441236</td>\n",
       "      <td>0</td>\n",
       "      <td>710296.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136</th>\n",
       "      <td>1586942</td>\n",
       "      <td>NaN</td>\n",
       "      <td>391539</td>\n",
       "      <td>91037</td>\n",
       "      <td>0</td>\n",
       "      <td>143716.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>153</th>\n",
       "      <td>2915354</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1199447</td>\n",
       "      <td>270242</td>\n",
       "      <td>0</td>\n",
       "      <td>362796.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>480875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1324</td>\n",
       "      <td>396</td>\n",
       "      <td>0</td>\n",
       "      <td>1965.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>921415</td>\n",
       "      <td>NaN</td>\n",
       "      <td>444320</td>\n",
       "      <td>126518</td>\n",
       "      <td>0</td>\n",
       "      <td>198500.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>5095810</td>\n",
       "      <td>NaN</td>\n",
       "      <td>629432</td>\n",
       "      <td>254939</td>\n",
       "      <td>0</td>\n",
       "      <td>407274.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>11783266</td>\n",
       "      <td>400 The document contains 1094 pages which exceeds the supported page limit of 1000.</td>\n",
       "      <td>1722408</td>\n",
       "      <td>684701</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72</th>\n",
       "      <td>6258984</td>\n",
       "      <td>504 Deadline Exceeded</td>\n",
       "      <td>1613598</td>\n",
       "      <td>385018</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>169715</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2555</td>\n",
       "      <td>668</td>\n",
       "      <td>0</td>\n",
       "      <td>2218.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>1024265</td>\n",
       "      <td>NaN</td>\n",
       "      <td>377779</td>\n",
       "      <td>104705</td>\n",
       "      <td>0</td>\n",
       "      <td>186244.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        file_bytes  \\\n",
       "otl_id               \n",
       "12         6105538   \n",
       "136        1586942   \n",
       "153        2915354   \n",
       "30          480875   \n",
       "43          921415   \n",
       "57         5095810   \n",
       "58        11783266   \n",
       "72         6258984   \n",
       "74          169715   \n",
       "80         1024265   \n",
       "\n",
       "                                                                                  file_error  \\\n",
       "otl_id                                                                                         \n",
       "12                                                                                       NaN   \n",
       "136                                                                                      NaN   \n",
       "153                                                                                      NaN   \n",
       "30                                                                                       NaN   \n",
       "43                                                                                       NaN   \n",
       "57                                                                                       NaN   \n",
       "58      400 The document contains 1094 pages which exceeds the supported page limit of 1000.   \n",
       "72                                                                     504 Deadline Exceeded   \n",
       "74                                                                                       NaN   \n",
       "80                                                                                       NaN   \n",
       "\n",
       "        text_bytes  text_total_tokens  text_cached_content_token_count  \\\n",
       "otl_id                                                                   \n",
       "12         1125871             441236                                0   \n",
       "136         391539              91037                                0   \n",
       "153        1199447             270242                                0   \n",
       "30            1324                396                                0   \n",
       "43          444320             126518                                0   \n",
       "57          629432             254939                                0   \n",
       "58         1722408             684701                                0   \n",
       "72         1613598             385018                                0   \n",
       "74            2555                668                                0   \n",
       "80          377779             104705                                0   \n",
       "\n",
       "        file_total_tokens  file_cached_content_token_count  \n",
       "otl_id                                                      \n",
       "12               710296.0                              0.0  \n",
       "136              143716.0                              0.0  \n",
       "153              362796.0                              0.0  \n",
       "30                 1965.0                              0.0  \n",
       "43               198500.0                              0.0  \n",
       "57               407274.0                              0.0  \n",
       "58                    NaN                              NaN  \n",
       "72                    NaN                              NaN  \n",
       "74                 2218.0                              0.0  \n",
       "80               186244.0                              0.0  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def analyze(otl_ids: list[str]) -> pd.DataFrame:\n",
    "    \"\"\"Analyze the assistant contents.\"\"\"\n",
    "    results = []\n",
    "    for otl_id in otl_ids:\n",
    "        analysis_file = analyze_file(otl_id=otl_id)\n",
    "        analysis_text = analyze_text(otl_id=otl_id)\n",
    "        analysis = analysis_file | analysis_text\n",
    "        results.append(analysis)\n",
    "    results = pd.DataFrame(results).set_index('otl_id').sort_index()\n",
    "    return results\n",
    "\n",
    "assistant_analysis = analyze(assistant_files.keys() | assistant_texts.keys())\n",
    "print(assistant_analysis.shape)\n",
    "assistant_analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "71101c5a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:33:59.638511Z",
     "iopub.status.busy": "2024-11-26T20:33:59.638093Z",
     "iopub.status.idle": "2024-11-26T20:33:59.668425Z",
     "shell.execute_reply": "2024-11-26T20:33:59.667353Z"
    },
    "papermill": {
     "duration": 0.063159,
     "end_time": "2024-11-26T20:33:59.670996",
     "exception": false,
     "start_time": "2024-11-26T20:33:59.607837",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>file_bytes</th>\n",
       "      <th>file_error</th>\n",
       "      <th>text_bytes</th>\n",
       "      <th>text_total_tokens</th>\n",
       "      <th>text_cached_content_token_count</th>\n",
       "      <th>file_total_tokens</th>\n",
       "      <th>file_cached_content_token_count</th>\n",
       "      <th>Relevance</th>\n",
       "      <th>Title</th>\n",
       "      <th>Copyright Year</th>\n",
       "      <th>Contributors</th>\n",
       "      <th>Publisher</th>\n",
       "      <th>License</th>\n",
       "      <th>ISBN10</th>\n",
       "      <th>ISBN13</th>\n",
       "      <th>library URL</th>\n",
       "      <th>Subject 1</th>\n",
       "      <th>Subject 2</th>\n",
       "      <th>assistant</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>6105538</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1125871</td>\n",
       "      <td>441236</td>\n",
       "      <td>0</td>\n",
       "      <td>710296.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>College Algebra</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>Carl Stitz - Author / Jeff Zeager - Author</td>\n",
       "      <td>Stitz Zeager Open Source Mathematics</td>\n",
       "      <td>Attribution-NonCommercial-ShareAlike</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/college-algebra</td>\n",
       "      <td>Mathematics</td>\n",
       "      <td>Mathematics - Pure</td>\n",
       "      <td>elementary_maths_python</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136</th>\n",
       "      <td>1586942</td>\n",
       "      <td>NaN</td>\n",
       "      <td>391539</td>\n",
       "      <td>91037</td>\n",
       "      <td>0</td>\n",
       "      <td>143716.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>Leading with Cultural Intelligence</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>Mai Moua - Author</td>\n",
       "      <td>Saylor Foundation</td>\n",
       "      <td>Attribution-NonCommercial-ShareAlike</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9781453332894</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/leading-with-cultural-intelligence</td>\n",
       "      <td>Business</td>\n",
       "      <td>Business - Human Resources</td>\n",
       "      <td>adult_multicultural_management</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>153</th>\n",
       "      <td>2915354</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1199447</td>\n",
       "      <td>270242</td>\n",
       "      <td>0</td>\n",
       "      <td>362796.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>Educational Psychology - Second Edition</td>\n",
       "      <td>2009.0</td>\n",
       "      <td>Kelvin Seifert - Author / Rosemary Sutton - Author</td>\n",
       "      <td>University of Manitoba</td>\n",
       "      <td>Attribution</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/educational-psychology</td>\n",
       "      <td>Education</td>\n",
       "      <td>Social Sciences - Psychology</td>\n",
       "      <td>adult_multicultural_management</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>480875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1324</td>\n",
       "      <td>396</td>\n",
       "      <td>0</td>\n",
       "      <td>1965.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>Organizational Behavior</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>None</td>\n",
       "      <td>University of Minnesota Libraries Publishing</td>\n",
       "      <td>Attribution-NonCommercial-ShareAlike</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9781946135155</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/organizational-behavior</td>\n",
       "      <td>Business - Human Resources</td>\n",
       "      <td>None</td>\n",
       "      <td>adult_multicultural_management</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>921415</td>\n",
       "      <td>NaN</td>\n",
       "      <td>444320</td>\n",
       "      <td>126518</td>\n",
       "      <td>0</td>\n",
       "      <td>198500.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5</td>\n",
       "      <td>Think Python: How to Think Like a Computer Scientist - 2e</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>Allen B. Downey - Author</td>\n",
       "      <td>Green Tea Press</td>\n",
       "      <td>Attribution-NonCommercial</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9781491939369</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/think-python-how-to-think-like-a-computer-scientist</td>\n",
       "      <td>Computer Science - Programming Languages</td>\n",
       "      <td>None</td>\n",
       "      <td>elementary_maths_python</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>5095810</td>\n",
       "      <td>NaN</td>\n",
       "      <td>629432</td>\n",
       "      <td>254939</td>\n",
       "      <td>0</td>\n",
       "      <td>407274.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>College Trigonometry</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>Carl Stitz - Author / Jeff Zeager - Author</td>\n",
       "      <td>Stitz Zeager Open Source Mathematics</td>\n",
       "      <td>Attribution-NonCommercial-ShareAlike</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/college-trigonometry</td>\n",
       "      <td>Mathematics</td>\n",
       "      <td>Mathematics - Pure</td>\n",
       "      <td>elementary_maths_python</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>11783266</td>\n",
       "      <td>400 The document contains 1094 pages which exceeds the supported page limit of 1000.</td>\n",
       "      <td>1722408</td>\n",
       "      <td>684701</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>Precalculus</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>Carl Stitz - Author / Jeff Zeager - Author</td>\n",
       "      <td>Stitz Zeager Open Source Mathematics</td>\n",
       "      <td>Attribution-NonCommercial-ShareAlike</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/precalculus</td>\n",
       "      <td>Mathematics</td>\n",
       "      <td>Mathematics - Pure</td>\n",
       "      <td>elementary_maths_python</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72</th>\n",
       "      <td>6258984</td>\n",
       "      <td>504 Deadline Exceeded</td>\n",
       "      <td>1613598</td>\n",
       "      <td>385018</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "      <td>International Business</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>Mason A Carpenter - Author / Sanjyot P Dunung - Author</td>\n",
       "      <td>Saylor Foundation</td>\n",
       "      <td>Attribution-NonCommercial-ShareAlike</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9781453312995</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/international-business</td>\n",
       "      <td>Business - Management</td>\n",
       "      <td>None</td>\n",
       "      <td>adult_multicultural_management</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>169715</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2555</td>\n",
       "      <td>668</td>\n",
       "      <td>0</td>\n",
       "      <td>2218.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>Principles of Social Psychology</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>None</td>\n",
       "      <td>University of Minnesota Libraries Publishing</td>\n",
       "      <td>Attribution-NonCommercial-ShareAlike</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9781946135209</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/principles-of-social-psychology</td>\n",
       "      <td>Social Sciences - Psychology</td>\n",
       "      <td>None</td>\n",
       "      <td>adult_multicultural_management</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>1024265</td>\n",
       "      <td>NaN</td>\n",
       "      <td>377779</td>\n",
       "      <td>104705</td>\n",
       "      <td>0</td>\n",
       "      <td>186244.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>How to Think Like a Computer Scientist: Learning with Python</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>Allen Downey - Author / Jeff Elkner - Author / Chris Meyers - Author</td>\n",
       "      <td>Green Tea Press</td>\n",
       "      <td>Attribution</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>https://open.umn.edu/opentextbooks/textbooks/how-to-think-like-a-computer-scientist-learning-with-python</td>\n",
       "      <td>Computer Science - Programming Languages</td>\n",
       "      <td>None</td>\n",
       "      <td>elementary_maths_python</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     file_bytes  \\\n",
       "12      6105538   \n",
       "136     1586942   \n",
       "153     2915354   \n",
       "30       480875   \n",
       "43       921415   \n",
       "57      5095810   \n",
       "58     11783266   \n",
       "72      6258984   \n",
       "74       169715   \n",
       "80      1024265   \n",
       "\n",
       "                                                                               file_error  \\\n",
       "12                                                                                    NaN   \n",
       "136                                                                                   NaN   \n",
       "153                                                                                   NaN   \n",
       "30                                                                                    NaN   \n",
       "43                                                                                    NaN   \n",
       "57                                                                                    NaN   \n",
       "58   400 The document contains 1094 pages which exceeds the supported page limit of 1000.   \n",
       "72                                                                  504 Deadline Exceeded   \n",
       "74                                                                                    NaN   \n",
       "80                                                                                    NaN   \n",
       "\n",
       "     text_bytes  text_total_tokens  text_cached_content_token_count  \\\n",
       "12      1125871             441236                                0   \n",
       "136      391539              91037                                0   \n",
       "153     1199447             270242                                0   \n",
       "30         1324                396                                0   \n",
       "43       444320             126518                                0   \n",
       "57       629432             254939                                0   \n",
       "58      1722408             684701                                0   \n",
       "72      1613598             385018                                0   \n",
       "74         2555                668                                0   \n",
       "80       377779             104705                                0   \n",
       "\n",
       "     file_total_tokens  file_cached_content_token_count  Relevance  \\\n",
       "12            710296.0                              0.0          3   \n",
       "136           143716.0                              0.0          4   \n",
       "153           362796.0                              0.0          3   \n",
       "30              1965.0                              0.0          4   \n",
       "43            198500.0                              0.0          5   \n",
       "57            407274.0                              0.0          2   \n",
       "58                 NaN                              NaN          3   \n",
       "72                 NaN                              NaN          5   \n",
       "74              2218.0                              0.0          3   \n",
       "80            186244.0                              0.0          4   \n",
       "\n",
       "                                                            Title  \\\n",
       "12                                                College Algebra   \n",
       "136                            Leading with Cultural Intelligence   \n",
       "153                       Educational Psychology - Second Edition   \n",
       "30                                        Organizational Behavior   \n",
       "43      Think Python: How to Think Like a Computer Scientist - 2e   \n",
       "57                                           College Trigonometry   \n",
       "58                                                    Precalculus   \n",
       "72                                         International Business   \n",
       "74                                Principles of Social Psychology   \n",
       "80   How to Think Like a Computer Scientist: Learning with Python   \n",
       "\n",
       "     Copyright Year  \\\n",
       "12           2013.0   \n",
       "136          2012.0   \n",
       "153          2009.0   \n",
       "30           2017.0   \n",
       "43           2012.0   \n",
       "57           2011.0   \n",
       "58           2013.0   \n",
       "72           2011.0   \n",
       "74           2015.0   \n",
       "80           2008.0   \n",
       "\n",
       "                                                             Contributors  \\\n",
       "12                             Carl Stitz - Author / Jeff Zeager - Author   \n",
       "136                                                     Mai Moua - Author   \n",
       "153                    Kelvin Seifert - Author / Rosemary Sutton - Author   \n",
       "30                                                                   None   \n",
       "43                                               Allen B. Downey - Author   \n",
       "57                             Carl Stitz - Author / Jeff Zeager - Author   \n",
       "58                             Carl Stitz - Author / Jeff Zeager - Author   \n",
       "72                 Mason A Carpenter - Author / Sanjyot P Dunung - Author   \n",
       "74                                                                   None   \n",
       "80   Allen Downey - Author / Jeff Elkner - Author / Chris Meyers - Author   \n",
       "\n",
       "                                        Publisher  \\\n",
       "12           Stitz Zeager Open Source Mathematics   \n",
       "136                             Saylor Foundation   \n",
       "153                        University of Manitoba   \n",
       "30   University of Minnesota Libraries Publishing   \n",
       "43                                Green Tea Press   \n",
       "57           Stitz Zeager Open Source Mathematics   \n",
       "58           Stitz Zeager Open Source Mathematics   \n",
       "72                              Saylor Foundation   \n",
       "74   University of Minnesota Libraries Publishing   \n",
       "80                                Green Tea Press   \n",
       "\n",
       "                                  License  ISBN10         ISBN13  \\\n",
       "12   Attribution-NonCommercial-ShareAlike     NaN           None   \n",
       "136  Attribution-NonCommercial-ShareAlike     NaN  9781453332894   \n",
       "153                           Attribution     NaN           None   \n",
       "30   Attribution-NonCommercial-ShareAlike     NaN  9781946135155   \n",
       "43              Attribution-NonCommercial     NaN  9781491939369   \n",
       "57   Attribution-NonCommercial-ShareAlike     NaN           None   \n",
       "58   Attribution-NonCommercial-ShareAlike     NaN           None   \n",
       "72   Attribution-NonCommercial-ShareAlike     NaN  9781453312995   \n",
       "74   Attribution-NonCommercial-ShareAlike     NaN  9781946135209   \n",
       "80                            Attribution     NaN           None   \n",
       "\n",
       "                                                                                                  library URL  \\\n",
       "12                                               https://open.umn.edu/opentextbooks/textbooks/college-algebra   \n",
       "136                           https://open.umn.edu/opentextbooks/textbooks/leading-with-cultural-intelligence   \n",
       "153                                       https://open.umn.edu/opentextbooks/textbooks/educational-psychology   \n",
       "30                                       https://open.umn.edu/opentextbooks/textbooks/organizational-behavior   \n",
       "43           https://open.umn.edu/opentextbooks/textbooks/think-python-how-to-think-like-a-computer-scientist   \n",
       "57                                          https://open.umn.edu/opentextbooks/textbooks/college-trigonometry   \n",
       "58                                                   https://open.umn.edu/opentextbooks/textbooks/precalculus   \n",
       "72                                        https://open.umn.edu/opentextbooks/textbooks/international-business   \n",
       "74                               https://open.umn.edu/opentextbooks/textbooks/principles-of-social-psychology   \n",
       "80   https://open.umn.edu/opentextbooks/textbooks/how-to-think-like-a-computer-scientist-learning-with-python   \n",
       "\n",
       "                                    Subject 1                     Subject 2  \\\n",
       "12                                Mathematics            Mathematics - Pure   \n",
       "136                                  Business    Business - Human Resources   \n",
       "153                                 Education  Social Sciences - Psychology   \n",
       "30                 Business - Human Resources                          None   \n",
       "43   Computer Science - Programming Languages                          None   \n",
       "57                                Mathematics            Mathematics - Pure   \n",
       "58                                Mathematics            Mathematics - Pure   \n",
       "72                      Business - Management                          None   \n",
       "74               Social Sciences - Psychology                          None   \n",
       "80   Computer Science - Programming Languages                          None   \n",
       "\n",
       "                          assistant  \n",
       "12          elementary_maths_python  \n",
       "136  adult_multicultural_management  \n",
       "153  adult_multicultural_management  \n",
       "30   adult_multicultural_management  \n",
       "43          elementary_maths_python  \n",
       "57          elementary_maths_python  \n",
       "58          elementary_maths_python  \n",
       "72   adult_multicultural_management  \n",
       "74   adult_multicultural_management  \n",
       "80          elementary_maths_python  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "assistant_contents = pd.merge(\n",
    "    assistant_analysis,\n",
    "    pd.concat([\n",
    "        elementary_maths_python_records.assign(assistant='elementary_maths_python'),\n",
    "        adult_multicultural_management_records.assign(assistant='adult_multicultural_management'),\n",
    "    ]).astype({'OTL ID': str}).set_index('OTL ID').drop(columns=['Description']),\n",
    "    left_index=True,\n",
    "    right_index=True,\n",
    ")\n",
    "assistant_contents"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67b41fbd",
   "metadata": {
    "papermill": {
     "duration": 0.039236,
     "end_time": "2024-11-26T20:33:59.753478",
     "exception": false,
     "start_time": "2024-11-26T20:33:59.714242",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# ESTIMATIONS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d0130cda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:33:59.816578Z",
     "iopub.status.busy": "2024-11-26T20:33:59.816044Z",
     "iopub.status.idle": "2024-11-26T20:33:59.837679Z",
     "shell.execute_reply": "2024-11-26T20:33:59.836493Z"
    },
    "papermill": {
     "duration": 0.057253,
     "end_time": "2024-11-26T20:33:59.840702",
     "exception": false,
     "start_time": "2024-11-26T20:33:59.783449",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# https://ai.google.dev/pricing\n",
    "\n",
    "PRICES = {\n",
    "    'models/gemini-1.5-flash-8b': {\n",
    "        'short_input_pricing': 0.0375 / 1_000_000,\n",
    "        'short_output_pricing': 0.15 / 1_000_000,\n",
    "        'short_caching_pricing': 0.01 / 1_000_000,\n",
    "        'long_input_pricing': 0.075 / 1_000_000,\n",
    "        'long_output_pricing': 0.30 / 1_000_000,\n",
    "        'long_caching_pricing': 0.02 / 1_000_000,\n",
    "        'caching_hour_pricing': 0.25 / 1_000_000,\n",
    "        'short_long_threshold': 128_000,\n",
    "    },\n",
    "    'models/gemini-1.5-flash': {\n",
    "        'short_input_pricing': 0.075 / 1_000_000,\n",
    "        'short_output_pricing': 0.30 / 1_000_000,\n",
    "        'short_caching_pricing': 0.01875 / 1_000_000,\n",
    "        'long_input_pricing': 0.15 / 1_000_000,\n",
    "        'long_output_pricing': 0.60 / 1_000_000,\n",
    "        'long_caching_pricing': 0.0375 / 1_000_000,\n",
    "        'caching_hour_pricing': 1.00 / 1_000_000,\n",
    "        'short_long_threshold': 128_000,\n",
    "    },\n",
    "    'models/gemini-1.5-pro': {\n",
    "        'short_input_pricing': 1.25 / 1_000_000,\n",
    "        'short_output_pricing': 5.00 / 1_000_000,\n",
    "        'short_caching_pricing': 0.3125 / 1_000_000,\n",
    "        'long_input_pricing': 2.50 / 1_000_000,\n",
    "        'long_output_pricing': 10.00 / 1_000_000,\n",
    "        'long_caching_pricing': 0.625 / 1_000_000,\n",
    "        'caching_hour_pricing': 4.50 / 1_000_000,\n",
    "        'short_long_threshold': 128_000,\n",
    "    }\n",
    "}\n",
    "\n",
    "def estimate_cost(model: str = GENERATIVE_MODEL, input_tokens: int = 0, output_tokens: int = 0, context_caching: bool = False, caching_hours: int = 0) -> tuple[float, float]:\n",
    "    \"\"\"Estimate the cost from inputs and output tokens.\"\"\"\n",
    "    prices = PRICES[model]\n",
    "    short_input_tokens = min(input_tokens, prices['short_long_threshold'])\n",
    "    long_input_tokens = max(input_tokens - prices['short_long_threshold'], 0)\n",
    "    short_output_tokens = min(output_tokens, prices['short_long_threshold'])\n",
    "    long_output_tokens = max(output_tokens - prices['short_long_threshold'], 0)\n",
    "    short_input_pricing = prices['short_caching_pricing'] if context_caching else prices['short_input_pricing']\n",
    "    long_input_pricing = prices['long_caching_pricing'] if context_caching else prices['long_input_pricing']\n",
    "    short_output_pricing = prices['short_output_pricing']\n",
    "    long_output_pricing = prices['long_output_pricing']\n",
    "    caching_hour_pricing = prices['caching_hour_pricing']\n",
    "    input_cost = short_input_tokens * short_input_pricing + long_input_tokens * long_input_pricing\n",
    "    output_cost = short_output_tokens * short_output_pricing + long_output_tokens * long_output_pricing\n",
    "    tokens_cost = input_cost + output_cost\n",
    "    caching_cost = (input_tokens * caching_hours * caching_hour_pricing) if context_caching is True else 0\n",
    "    return tokens_cost, caching_cost\n",
    "\n",
    "\n",
    "def estimate(name: str, prices: dict[str, dict] = PRICES, input_tokens: int = 0, output_tokens: int = 0, caching_hours: int = 0) -> dict[str, float]:\n",
    "    \"\"\"Compare the costs from inputs and output tokens.\"\"\"\n",
    "    results = []\n",
    "    for model, price in prices.items():\n",
    "        tokens_with_cache, cache_on_cost = estimate_cost(model=model, input_tokens=input_tokens, output_tokens=output_tokens, context_caching=True, caching_hours=caching_hours)\n",
    "        tokens_without_cache, cache_off_cost = estimate_cost(model=model, input_tokens=input_tokens, output_tokens=output_tokens, context_caching=False, caching_hours=0)\n",
    "        cache_tokens_benefit_ratio = tokens_without_cache / tokens_with_cache\n",
    "        cache_totals_benefit_breakdown =  cache_on_cost / (tokens_without_cache - tokens_with_cache)\n",
    "        result = {}\n",
    "        result['model'] = model\n",
    "        result['estimate'] = name\n",
    "        result['input_tokens'] = input_tokens\n",
    "        result['output_tokens'] = output_tokens\n",
    "        result['caching_hours'] = caching_hours\n",
    "        result['cache_on_cost'] = cache_on_cost\n",
    "        result['cache_off_cost'] = cache_off_cost\n",
    "        result['tokens_with_cache'] = tokens_with_cache\n",
    "        result['tokens_without_cache'] = tokens_without_cache\n",
    "        result['cache_tokens_benefit_ratio'] = cache_tokens_benefit_ratio\n",
    "        result['cache_totals_benefit_breakdown'] = cache_totals_benefit_breakdown\n",
    "        results.append(result)\n",
    "    df = pd.DataFrame(results)\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "c2b0cfe9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:33:59.908878Z",
     "iopub.status.busy": "2024-11-26T20:33:59.907797Z",
     "iopub.status.idle": "2024-11-26T20:33:59.928007Z",
     "shell.execute_reply": "2024-11-26T20:33:59.926926Z"
    },
    "papermill": {
     "duration": 0.054166,
     "end_time": "2024-11-26T20:33:59.929998",
     "exception": false,
     "start_time": "2024-11-26T20:33:59.875832",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>estimate</th>\n",
       "      <th>input_tokens</th>\n",
       "      <th>output_tokens</th>\n",
       "      <th>caching_hours</th>\n",
       "      <th>cache_on_cost</th>\n",
       "      <th>cache_off_cost</th>\n",
       "      <th>tokens_with_cache</th>\n",
       "      <th>tokens_without_cache</th>\n",
       "      <th>cache_tokens_benefit_ratio</th>\n",
       "      <th>cache_totals_benefit_breakdown</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>models/gemini-1.5-flash-8b</td>\n",
       "      <td>retrieval</td>\n",
       "      <td>409085</td>\n",
       "      <td>500</td>\n",
       "      <td>1</td>\n",
       "      <td>0.102271</td>\n",
       "      <td>0</td>\n",
       "      <td>0.006977</td>\n",
       "      <td>0.025956</td>\n",
       "      <td>3.720437</td>\n",
       "      <td>5.388462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>models/gemini-1.5-flash</td>\n",
       "      <td>retrieval</td>\n",
       "      <td>409085</td>\n",
       "      <td>500</td>\n",
       "      <td>1</td>\n",
       "      <td>0.409085</td>\n",
       "      <td>0</td>\n",
       "      <td>0.013091</td>\n",
       "      <td>0.051913</td>\n",
       "      <td>3.965624</td>\n",
       "      <td>10.537436</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>models/gemini-1.5-pro</td>\n",
       "      <td>retrieval</td>\n",
       "      <td>409085</td>\n",
       "      <td>500</td>\n",
       "      <td>1</td>\n",
       "      <td>1.840882</td>\n",
       "      <td>0</td>\n",
       "      <td>0.218178</td>\n",
       "      <td>0.865213</td>\n",
       "      <td>3.965624</td>\n",
       "      <td>2.845108</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        model   estimate  input_tokens  output_tokens  \\\n",
       "0  models/gemini-1.5-flash-8b  retrieval        409085            500   \n",
       "1     models/gemini-1.5-flash  retrieval        409085            500   \n",
       "2       models/gemini-1.5-pro  retrieval        409085            500   \n",
       "\n",
       "   caching_hours  cache_on_cost  cache_off_cost  tokens_with_cache  \\\n",
       "0              1       0.102271               0           0.006977   \n",
       "1              1       0.409085               0           0.013091   \n",
       "2              1       1.840882               0           0.218178   \n",
       "\n",
       "   tokens_without_cache  cache_tokens_benefit_ratio  \\\n",
       "0              0.025956                    3.720437   \n",
       "1              0.051913                    3.965624   \n",
       "2              0.865213                    3.965624   \n",
       "\n",
       "   cache_totals_benefit_breakdown  \n",
       "0                        5.388462  \n",
       "1                       10.537436  \n",
       "2                        2.845108  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# retrieval_input_tokens = retrieval_model.count_tokens(retrieval_context).total_tokens\n",
    "retrieval_input_tokens = 409085 # result of the assignment above\n",
    "retrieval_estimate_text = estimate(\n",
    "    name='retrieval',\n",
    "    input_tokens=retrieval_input_tokens,\n",
    "    output_tokens=RETRIEVAL_MAX_OUTPUT_TOKENS,\n",
    "    caching_hours=1,\n",
    ")\n",
    "retrieval_estimate_text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "74040f3a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:33:59.994224Z",
     "iopub.status.busy": "2024-11-26T20:33:59.993811Z",
     "iopub.status.idle": "2024-11-26T20:34:00.011936Z",
     "shell.execute_reply": "2024-11-26T20:34:00.010747Z"
    },
    "papermill": {
     "duration": 0.054098,
     "end_time": "2024-11-26T20:34:00.014317",
     "exception": false,
     "start_time": "2024-11-26T20:33:59.960219",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>estimate</th>\n",
       "      <th>input_tokens</th>\n",
       "      <th>output_tokens</th>\n",
       "      <th>caching_hours</th>\n",
       "      <th>cache_on_cost</th>\n",
       "      <th>cache_off_cost</th>\n",
       "      <th>tokens_with_cache</th>\n",
       "      <th>tokens_without_cache</th>\n",
       "      <th>cache_tokens_benefit_ratio</th>\n",
       "      <th>cache_totals_benefit_breakdown</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>models/gemini-1.5-flash-8b</td>\n",
       "      <td>elementary_maths_python_estimate_file</td>\n",
       "      <td>908796.0</td>\n",
       "      <td>3000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.227199</td>\n",
       "      <td>0</td>\n",
       "      <td>0.017346</td>\n",
       "      <td>0.063810</td>\n",
       "      <td>3.678658</td>\n",
       "      <td>4.889809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>models/gemini-1.5-flash</td>\n",
       "      <td>elementary_maths_python_estimate_file</td>\n",
       "      <td>908796.0</td>\n",
       "      <td>3000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.908796</td>\n",
       "      <td>0</td>\n",
       "      <td>0.032580</td>\n",
       "      <td>0.127619</td>\n",
       "      <td>3.917127</td>\n",
       "      <td>9.562293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>models/gemini-1.5-pro</td>\n",
       "      <td>elementary_maths_python_estimate_file</td>\n",
       "      <td>908796.0</td>\n",
       "      <td>3000</td>\n",
       "      <td>1</td>\n",
       "      <td>4.089582</td>\n",
       "      <td>0</td>\n",
       "      <td>0.542998</td>\n",
       "      <td>2.126990</td>\n",
       "      <td>3.917127</td>\n",
       "      <td>2.581819</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        model                               estimate  \\\n",
       "0  models/gemini-1.5-flash-8b  elementary_maths_python_estimate_file   \n",
       "1     models/gemini-1.5-flash  elementary_maths_python_estimate_file   \n",
       "2       models/gemini-1.5-pro  elementary_maths_python_estimate_file   \n",
       "\n",
       "   input_tokens  output_tokens  caching_hours  cache_on_cost  cache_off_cost  \\\n",
       "0      908796.0           3000              1       0.227199               0   \n",
       "1      908796.0           3000              1       0.908796               0   \n",
       "2      908796.0           3000              1       4.089582               0   \n",
       "\n",
       "   tokens_with_cache  tokens_without_cache  cache_tokens_benefit_ratio  \\\n",
       "0           0.017346              0.063810                    3.678658   \n",
       "1           0.032580              0.127619                    3.917127   \n",
       "2           0.542998              2.126990                    3.917127   \n",
       "\n",
       "   cache_totals_benefit_breakdown  \n",
       "0                        4.889809  \n",
       "1                        9.562293  \n",
       "2                        2.581819  "
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "elementary_maths_python_selected_files = ['43', '12']\n",
    "elementary_maths_python_file_input_tokens = sum(\n",
    "    assistant_contents.at[otl_id, 'file_total_tokens']\n",
    "    for otl_id in elementary_maths_python_selected_files\n",
    ")\n",
    "elementary_maths_python_estimate_file = estimate(\n",
    "    name='elementary_maths_python_estimate_file',\n",
    "    input_tokens=elementary_maths_python_file_input_tokens,\n",
    "    output_tokens=ASSISTANT_MAX_OUTPUT_TOKENS,\n",
    "    caching_hours=1,\n",
    ")\n",
    "elementary_maths_python_estimate_file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "d8fbe1b4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:34:00.078036Z",
     "iopub.status.busy": "2024-11-26T20:34:00.077631Z",
     "iopub.status.idle": "2024-11-26T20:34:00.096692Z",
     "shell.execute_reply": "2024-11-26T20:34:00.095614Z"
    },
    "papermill": {
     "duration": 0.05376,
     "end_time": "2024-11-26T20:34:00.099016",
     "exception": false,
     "start_time": "2024-11-26T20:34:00.045256",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>estimate</th>\n",
       "      <th>input_tokens</th>\n",
       "      <th>output_tokens</th>\n",
       "      <th>caching_hours</th>\n",
       "      <th>cache_on_cost</th>\n",
       "      <th>cache_off_cost</th>\n",
       "      <th>tokens_with_cache</th>\n",
       "      <th>tokens_without_cache</th>\n",
       "      <th>cache_tokens_benefit_ratio</th>\n",
       "      <th>cache_totals_benefit_breakdown</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>models/gemini-1.5-flash-8b</td>\n",
       "      <td>elementary_maths_python_estimate_text</td>\n",
       "      <td>672459</td>\n",
       "      <td>3000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.168115</td>\n",
       "      <td>0</td>\n",
       "      <td>0.012619</td>\n",
       "      <td>0.046084</td>\n",
       "      <td>3.651935</td>\n",
       "      <td>5.023563</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>models/gemini-1.5-flash</td>\n",
       "      <td>elementary_maths_python_estimate_text</td>\n",
       "      <td>672459</td>\n",
       "      <td>3000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.672459</td>\n",
       "      <td>0</td>\n",
       "      <td>0.023717</td>\n",
       "      <td>0.092169</td>\n",
       "      <td>3.886159</td>\n",
       "      <td>9.823856</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>models/gemini-1.5-pro</td>\n",
       "      <td>elementary_maths_python_estimate_text</td>\n",
       "      <td>672459</td>\n",
       "      <td>3000</td>\n",
       "      <td>1</td>\n",
       "      <td>3.026066</td>\n",
       "      <td>0</td>\n",
       "      <td>0.395287</td>\n",
       "      <td>1.536147</td>\n",
       "      <td>3.886159</td>\n",
       "      <td>2.652441</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        model                               estimate  \\\n",
       "0  models/gemini-1.5-flash-8b  elementary_maths_python_estimate_text   \n",
       "1     models/gemini-1.5-flash  elementary_maths_python_estimate_text   \n",
       "2       models/gemini-1.5-pro  elementary_maths_python_estimate_text   \n",
       "\n",
       "   input_tokens  output_tokens  caching_hours  cache_on_cost  cache_off_cost  \\\n",
       "0        672459           3000              1       0.168115               0   \n",
       "1        672459           3000              1       0.672459               0   \n",
       "2        672459           3000              1       3.026066               0   \n",
       "\n",
       "   tokens_with_cache  tokens_without_cache  cache_tokens_benefit_ratio  \\\n",
       "0           0.012619              0.046084                    3.651935   \n",
       "1           0.023717              0.092169                    3.886159   \n",
       "2           0.395287              1.536147                    3.886159   \n",
       "\n",
       "   cache_totals_benefit_breakdown  \n",
       "0                        5.023563  \n",
       "1                        9.823856  \n",
       "2                        2.652441  "
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "elementary_maths_python_selected_texts = ['43', '80', '12']\n",
    "elementary_maths_python_text_input_tokens = sum(\n",
    "    assistant_contents.at[otl_id, 'text_total_tokens']\n",
    "    for otl_id in elementary_maths_python_selected_texts\n",
    ")\n",
    "elementary_maths_python_estimate_text = estimate(\n",
    "    name='elementary_maths_python_estimate_text',\n",
    "    input_tokens=elementary_maths_python_text_input_tokens,\n",
    "    output_tokens=ASSISTANT_MAX_OUTPUT_TOKENS,\n",
    "    caching_hours=1,\n",
    ")\n",
    "elementary_maths_python_estimate_text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "2a78ff37",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:34:00.163558Z",
     "iopub.status.busy": "2024-11-26T20:34:00.162420Z",
     "iopub.status.idle": "2024-11-26T20:34:00.183377Z",
     "shell.execute_reply": "2024-11-26T20:34:00.182101Z"
    },
    "papermill": {
     "duration": 0.055532,
     "end_time": "2024-11-26T20:34:00.185658",
     "exception": false,
     "start_time": "2024-11-26T20:34:00.130126",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>estimate</th>\n",
       "      <th>input_tokens</th>\n",
       "      <th>output_tokens</th>\n",
       "      <th>caching_hours</th>\n",
       "      <th>cache_on_cost</th>\n",
       "      <th>cache_off_cost</th>\n",
       "      <th>tokens_with_cache</th>\n",
       "      <th>tokens_without_cache</th>\n",
       "      <th>cache_tokens_benefit_ratio</th>\n",
       "      <th>cache_totals_benefit_breakdown</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>models/gemini-1.5-flash-8b</td>\n",
       "      <td>adult_multicultural_management_estimate_file</td>\n",
       "      <td>145681.0</td>\n",
       "      <td>3000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.036420</td>\n",
       "      <td>0</td>\n",
       "      <td>0.002084</td>\n",
       "      <td>0.006576</td>\n",
       "      <td>3.156082</td>\n",
       "      <td>8.106982</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>models/gemini-1.5-flash</td>\n",
       "      <td>adult_multicultural_management_estimate_file</td>\n",
       "      <td>145681.0</td>\n",
       "      <td>3000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.145681</td>\n",
       "      <td>0</td>\n",
       "      <td>0.003963</td>\n",
       "      <td>0.013152</td>\n",
       "      <td>3.318704</td>\n",
       "      <td>15.853653</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>models/gemini-1.5-pro</td>\n",
       "      <td>adult_multicultural_management_estimate_file</td>\n",
       "      <td>145681.0</td>\n",
       "      <td>3000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.655564</td>\n",
       "      <td>0</td>\n",
       "      <td>0.066051</td>\n",
       "      <td>0.219203</td>\n",
       "      <td>3.318704</td>\n",
       "      <td>4.280486</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        model                                      estimate  \\\n",
       "0  models/gemini-1.5-flash-8b  adult_multicultural_management_estimate_file   \n",
       "1     models/gemini-1.5-flash  adult_multicultural_management_estimate_file   \n",
       "2       models/gemini-1.5-pro  adult_multicultural_management_estimate_file   \n",
       "\n",
       "   input_tokens  output_tokens  caching_hours  cache_on_cost  cache_off_cost  \\\n",
       "0      145681.0           3000              1       0.036420               0   \n",
       "1      145681.0           3000              1       0.145681               0   \n",
       "2      145681.0           3000              1       0.655564               0   \n",
       "\n",
       "   tokens_with_cache  tokens_without_cache  cache_tokens_benefit_ratio  \\\n",
       "0           0.002084              0.006576                    3.156082   \n",
       "1           0.003963              0.013152                    3.318704   \n",
       "2           0.066051              0.219203                    3.318704   \n",
       "\n",
       "   cache_totals_benefit_breakdown  \n",
       "0                        8.106982  \n",
       "1                       15.853653  \n",
       "2                        4.280486  "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_multicultural_management_selected_files = ['30', '136']\n",
    "adult_multicultural_management_file_input_tokens = sum(\n",
    "    assistant_contents.at[otl_id, 'file_total_tokens']\n",
    "    for otl_id in adult_multicultural_management_selected_files\n",
    ")\n",
    "adult_multicultural_management_estimate_file = estimate(\n",
    "    name='adult_multicultural_management_estimate_file',\n",
    "    input_tokens=adult_multicultural_management_file_input_tokens,\n",
    "    output_tokens=ASSISTANT_MAX_OUTPUT_TOKENS,\n",
    "    caching_hours=1,\n",
    ")\n",
    "adult_multicultural_management_estimate_file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "2e7d7775",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:34:00.251546Z",
     "iopub.status.busy": "2024-11-26T20:34:00.251115Z",
     "iopub.status.idle": "2024-11-26T20:34:00.267500Z",
     "shell.execute_reply": "2024-11-26T20:34:00.266366Z"
    },
    "papermill": {
     "duration": 0.052116,
     "end_time": "2024-11-26T20:34:00.269690",
     "exception": false,
     "start_time": "2024-11-26T20:34:00.217574",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>estimate</th>\n",
       "      <th>input_tokens</th>\n",
       "      <th>output_tokens</th>\n",
       "      <th>caching_hours</th>\n",
       "      <th>cache_on_cost</th>\n",
       "      <th>cache_off_cost</th>\n",
       "      <th>tokens_with_cache</th>\n",
       "      <th>tokens_without_cache</th>\n",
       "      <th>cache_tokens_benefit_ratio</th>\n",
       "      <th>cache_totals_benefit_breakdown</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>models/gemini-1.5-flash-8b</td>\n",
       "      <td>adult_multicultural_management_estimate_text</td>\n",
       "      <td>476451</td>\n",
       "      <td>3000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.119113</td>\n",
       "      <td>0</td>\n",
       "      <td>0.008699</td>\n",
       "      <td>0.031384</td>\n",
       "      <td>3.607743</td>\n",
       "      <td>5.250772</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>models/gemini-1.5-flash</td>\n",
       "      <td>adult_multicultural_management_estimate_text</td>\n",
       "      <td>476451</td>\n",
       "      <td>3000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.476451</td>\n",
       "      <td>0</td>\n",
       "      <td>0.016367</td>\n",
       "      <td>0.062768</td>\n",
       "      <td>3.835033</td>\n",
       "      <td>10.268177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>models/gemini-1.5-pro</td>\n",
       "      <td>adult_multicultural_management_estimate_text</td>\n",
       "      <td>476451</td>\n",
       "      <td>3000</td>\n",
       "      <td>1</td>\n",
       "      <td>2.144030</td>\n",
       "      <td>0</td>\n",
       "      <td>0.272782</td>\n",
       "      <td>1.046127</td>\n",
       "      <td>3.835033</td>\n",
       "      <td>2.772408</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        model                                      estimate  \\\n",
       "0  models/gemini-1.5-flash-8b  adult_multicultural_management_estimate_text   \n",
       "1     models/gemini-1.5-flash  adult_multicultural_management_estimate_text   \n",
       "2       models/gemini-1.5-pro  adult_multicultural_management_estimate_text   \n",
       "\n",
       "   input_tokens  output_tokens  caching_hours  cache_on_cost  cache_off_cost  \\\n",
       "0        476451           3000              1       0.119113               0   \n",
       "1        476451           3000              1       0.476451               0   \n",
       "2        476451           3000              1       2.144030               0   \n",
       "\n",
       "   tokens_with_cache  tokens_without_cache  cache_tokens_benefit_ratio  \\\n",
       "0           0.008699              0.031384                    3.607743   \n",
       "1           0.016367              0.062768                    3.835033   \n",
       "2           0.272782              1.046127                    3.835033   \n",
       "\n",
       "   cache_totals_benefit_breakdown  \n",
       "0                        5.250772  \n",
       "1                       10.268177  \n",
       "2                        2.772408  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_multicultural_management_selected_texts = ['72', '30', '136']\n",
    "adult_multicultural_management_text_input_tokens = sum(\n",
    "    assistant_contents.at[otl_id, 'text_total_tokens']\n",
    "    for otl_id in adult_multicultural_management_selected_texts\n",
    ")\n",
    "adult_multicultural_management_estimate_text = estimate(\n",
    "    name='adult_multicultural_management_estimate_text',\n",
    "    input_tokens=adult_multicultural_management_text_input_tokens,\n",
    "    output_tokens=ASSISTANT_MAX_OUTPUT_TOKENS,\n",
    "    caching_hours=1,\n",
    ")\n",
    "adult_multicultural_management_estimate_text"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18fb8855",
   "metadata": {
    "papermill": {
     "duration": 0.030737,
     "end_time": "2024-11-26T20:34:00.331578",
     "exception": false,
     "start_time": "2024-11-26T20:34:00.300841",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# PREPARATIONS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "301aae7c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:34:00.396378Z",
     "iopub.status.busy": "2024-11-26T20:34:00.395234Z",
     "iopub.status.idle": "2024-11-26T20:34:00.404494Z",
     "shell.execute_reply": "2024-11-26T20:34:00.403330Z"
    },
    "papermill": {
     "duration": 0.044244,
     "end_time": "2024-11-26T20:34:00.406863",
     "exception": false,
     "start_time": "2024-11-26T20:34:00.362619",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def prepare(prompt: str, contents: list[T.Any]) -> genai.GenerativeModel:\n",
    "    \"\"\"Prepare an assistant using contents and context caching.\"\"\"\n",
    "    system_instruction = assistant_base_instruction + prompt\n",
    "    cache = genai.caching.CachedContent.create(\n",
    "        model=GENERATIVE_MODEL,\n",
    "        contents=contents, # file or text\n",
    "        system_instruction=system_instruction,\n",
    "        ttl=dt.timedelta(hours=ASSISTANT_TTL_HOURS),\n",
    "    )\n",
    "    assistant = genai.GenerativeModel.from_cached_content(\n",
    "        cached_content=cache,\n",
    "        safety_settings=assistant_safety,\n",
    "        generation_config=assistant_config,\n",
    "    )\n",
    "    baseline = genai.GenerativeModel(\n",
    "        model_name=GENERATIVE_MODEL,\n",
    "        safety_settings=assistant_safety,\n",
    "        generation_config=assistant_config,\n",
    "        system_instruction=system_instruction,\n",
    "    )\n",
    "    print(f'Cache: {cache}')\n",
    "    return assistant, baseline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "41388223",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:34:00.471405Z",
     "iopub.status.busy": "2024-11-26T20:34:00.470534Z",
     "iopub.status.idle": "2024-11-26T20:34:06.574940Z",
     "shell.execute_reply": "2024-11-26T20:34:06.573843Z"
    },
    "papermill": {
     "duration": 6.139644,
     "end_time": "2024-11-26T20:34:06.577559",
     "exception": false,
     "start_time": "2024-11-26T20:34:00.437915",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cache: CachedContent(\n",
      "    name='cachedContents/ns6y1m5c3785',\n",
      "    model='models/gemini-1.5-flash-002',\n",
      "    display_name='',\n",
      "    usage_metadata={\n",
      "        'total_token_count': 672654,\n",
      "    },\n",
      "    create_time=2024-11-26 20:34:06.423791+00:00,\n",
      "    update_time=2024-11-26 20:34:06.423791+00:00,\n",
      "    expire_time=2024-11-26 21:34:06.076334+00:00\n",
      ")\n",
      "Assistant: genai.GenerativeModel(\n",
      "    model_name='models/gemini-1.5-flash-002',\n",
      "    generation_config={'max_output_tokens': 3000, 'temperature': 0},\n",
      "    safety_settings={<HarmCategory.HARM_CATEGORY_HARASSMENT: 7>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>, <HarmCategory.HARM_CATEGORY_HATE_SPEECH: 8>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>, <HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: 9>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>, <HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: 10>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>},\n",
      "    tools=None,\n",
      "    system_instruction=None,\n",
      "    cached_content=cachedContents/ns6y1m5c3785\n",
      ")\n",
      "Baseline: genai.GenerativeModel(\n",
      "    model_name='models/gemini-1.5-flash-002',\n",
      "    generation_config={'max_output_tokens': 3000, 'temperature': 0},\n",
      "    safety_settings={<HarmCategory.HARM_CATEGORY_HARASSMENT: 7>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>, <HarmCategory.HARM_CATEGORY_HATE_SPEECH: 8>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>, <HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: 9>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>, <HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: 10>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>},\n",
      "    tools=None,\n",
      "    system_instruction=\"\\nYou are a friendly and helpful learning assistant. Your primary goal is to personalize learning content for the user based on their specific requests and objectives. \\n\\nTo do this, you will:\\n- **Utilize the provided textbooks:** Ground your responses and explanations in the information available from these textbooks. \\n- **Understand the user's request and objective:** Carefully analyze the user's input to identify their needs and learning goals.\\n- **Personalize the learning experience:** Adapt your explanations, examples, and activities to the user's level and learning style.\\n- **Provide constructive feedback:** Offer helpful guidance and suggestions to support the user in achieving their objectives.\\n- **Maintain a pedagogic tone:** Use clear and concise language, and present information in an engaging and accessible manner.\\n\\n**Here is the user's request and objective:**\\nI'm a high school student and I want to learn about Mathematics and Computer Science with Python.\",\n",
      "    cached_content=None\n",
      ")\n"
     ]
    }
   ],
   "source": [
    "elementary_maths_python_assistant, elementary_maths_python_baseline = prepare(\n",
    "    prompt=elementary_maths_python_prompt,\n",
    "    # contents=[assistant_files[otl_id] for otl_id in elementary_maths_python_selected_files],\n",
    "    contents=[assistant_texts[otl_id] for otl_id in elementary_maths_python_selected_texts],\n",
    ")\n",
    "print('Assistant:', elementary_maths_python_assistant)\n",
    "print('Baseline:', elementary_maths_python_baseline)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "745384be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:34:06.641917Z",
     "iopub.status.busy": "2024-11-26T20:34:06.640956Z",
     "iopub.status.idle": "2024-11-26T20:34:11.832005Z",
     "shell.execute_reply": "2024-11-26T20:34:11.830863Z"
    },
    "papermill": {
     "duration": 5.226714,
     "end_time": "2024-11-26T20:34:11.835180",
     "exception": false,
     "start_time": "2024-11-26T20:34:06.608466",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cache: CachedContent(\n",
      "    name='cachedContents/71y546un40le',\n",
      "    model='models/gemini-1.5-flash-002',\n",
      "    display_name='',\n",
      "    usage_metadata={\n",
      "        'total_token_count': 476644,\n",
      "    },\n",
      "    create_time=2024-11-26 20:34:11.647791+00:00,\n",
      "    update_time=2024-11-26 20:34:11.647791+00:00,\n",
      "    expire_time=2024-11-26 21:34:11.304252+00:00\n",
      ")\n",
      "Assistant: genai.GenerativeModel(\n",
      "    model_name='models/gemini-1.5-flash-002',\n",
      "    generation_config={'max_output_tokens': 3000, 'temperature': 0},\n",
      "    safety_settings={<HarmCategory.HARM_CATEGORY_HARASSMENT: 7>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>, <HarmCategory.HARM_CATEGORY_HATE_SPEECH: 8>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>, <HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: 9>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>, <HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: 10>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>},\n",
      "    tools=None,\n",
      "    system_instruction=None,\n",
      "    cached_content=cachedContents/71y546un40le\n",
      ")\n",
      "Baseline: genai.GenerativeModel(\n",
      "    model_name='models/gemini-1.5-flash-002',\n",
      "    generation_config={'max_output_tokens': 3000, 'temperature': 0},\n",
      "    safety_settings={<HarmCategory.HARM_CATEGORY_HARASSMENT: 7>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>, <HarmCategory.HARM_CATEGORY_HATE_SPEECH: 8>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>, <HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: 9>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>, <HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: 10>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>},\n",
      "    tools=None,\n",
      "    system_instruction=\"\\nYou are a friendly and helpful learning assistant. Your primary goal is to personalize learning content for the user based on their specific requests and objectives. \\n\\nTo do this, you will:\\n- **Utilize the provided textbooks:** Ground your responses and explanations in the information available from these textbooks. \\n- **Understand the user's request and objective:** Carefully analyze the user's input to identify their needs and learning goals.\\n- **Personalize the learning experience:** Adapt your explanations, examples, and activities to the user's level and learning style.\\n- **Provide constructive feedback:** Offer helpful guidance and suggestions to support the user in achieving their objectives.\\n- **Maintain a pedagogic tone:** Use clear and concise language, and present information in an engaging and accessible manner.\\n\\n**Here is the user's request and objective:**\\nI want to become a better leader/manager in a multi-cultural and international environment.\",\n",
      "    cached_content=None\n",
      ")\n"
     ]
    }
   ],
   "source": [
    "adult_multicultural_management_assistant, adult_multicultural_management_baseline = prepare(\n",
    "    prompt=adult_multicultural_management_prompt,\n",
    "    # contents=[assistant_files[otl_id] for otl_id in adult_multicultural_management_selected_files],\n",
    "    contents=[assistant_texts[otl_id] for otl_id in adult_multicultural_management_selected_texts],\n",
    ")\n",
    "print('Assistant:', adult_multicultural_management_assistant)\n",
    "print('Baseline:', adult_multicultural_management_baseline)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "99d209c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:34:11.901848Z",
     "iopub.status.busy": "2024-11-26T20:34:11.900629Z",
     "iopub.status.idle": "2024-11-26T20:34:11.908968Z",
     "shell.execute_reply": "2024-11-26T20:34:11.907968Z"
    },
    "papermill": {
     "duration": 0.043163,
     "end_time": "2024-11-26T20:34:11.911333",
     "exception": false,
     "start_time": "2024-11-26T20:34:11.868170",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def query(model: genai.GenerativeModel, prompt: str) -> None:\n",
    "    \"\"\"Generate content from a model and prompt.\"\"\"\n",
    "    start_time = dt.datetime.now()\n",
    "    response = model.generate_content(prompt)\n",
    "    end_time = dt.datetime.now()\n",
    "    execution_time = end_time - start_time\n",
    "    print('Execution Time:', execution_time)\n",
    "    if response.prompt_feedback:\n",
    "        print('Feedback:', response.prompt_feedback)\n",
    "    print(response.usage_metadata)\n",
    "    text = ipy.display.Markdown(response.text)\n",
    "    ipy.display.display(text)\n",
    "\n",
    "\n",
    "def compare(assistant: genai.GenerativeModel, baseline: genai.GenerativeModel, prompt: str) -> None:\n",
    "    \"\"\"Compare the generated content of an assistant and baseline.\"\"\"\n",
    "    ipy.display.display(ipy.display.Markdown('#### Assistant'))\n",
    "    query(assistant, prompt)\n",
    "    ipy.display.display(ipy.display.Markdown('#### Baseline'))\n",
    "    query(baseline, prompt)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af31bb9d",
   "metadata": {
    "papermill": {
     "duration": 0.030341,
     "end_time": "2024-11-26T20:34:11.972435",
     "exception": false,
     "start_time": "2024-11-26T20:34:11.942094",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# INTERACTIONS"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0c29453",
   "metadata": {
    "papermill": {
     "duration": 0.030718,
     "end_time": "2024-11-26T20:34:12.033860",
     "exception": false,
     "start_time": "2024-11-26T20:34:12.003142",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Sigma"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "649df495",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:34:12.098057Z",
     "iopub.status.busy": "2024-11-26T20:34:12.097024Z",
     "iopub.status.idle": "2024-11-26T20:34:12.104286Z",
     "shell.execute_reply": "2024-11-26T20:34:12.103243Z"
    },
    "papermill": {
     "duration": 0.041678,
     "end_time": "2024-11-26T20:34:12.106421",
     "exception": false,
     "start_time": "2024-11-26T20:34:12.064743",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "functools.partial(<function compare at 0x7cba08252e60>, genai.GenerativeModel(\n",
       "    model_name='models/gemini-1.5-flash-002',\n",
       "    generation_config={'max_output_tokens': 3000, 'temperature': 0},\n",
       "    safety_settings={<HarmCategory.HARM_CATEGORY_HARASSMENT: 7>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>, <HarmCategory.HARM_CATEGORY_HATE_SPEECH: 8>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>, <HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: 9>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>, <HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: 10>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>},\n",
       "    tools=None,\n",
       "    system_instruction=None,\n",
       "    cached_content=cachedContents/ns6y1m5c3785\n",
       "), genai.GenerativeModel(\n",
       "    model_name='models/gemini-1.5-flash-002',\n",
       "    generation_config={'max_output_tokens': 3000, 'temperature': 0},\n",
       "    safety_settings={<HarmCategory.HARM_CATEGORY_HARASSMENT: 7>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>, <HarmCategory.HARM_CATEGORY_HATE_SPEECH: 8>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>, <HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: 9>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>, <HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: 10>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>},\n",
       "    tools=None,\n",
       "    system_instruction=\"\\nYou are a friendly and helpful learning assistant. Your primary goal is to personalize learning content for the user based on their specific requests and objectives. \\n\\nTo do this, you will:\\n- **Utilize the provided textbooks:** Ground your responses and explanations in the information available from these textbooks. \\n- **Understand the user's request and objective:** Carefully analyze the user's input to identify their needs and learning goals.\\n- **Personalize the learning experience:** Adapt your explanations, examples, and activities to the user's level and learning style.\\n- **Provide constructive feedback:** Offer helpful guidance and suggestions to support the user in achieving their objectives.\\n- **Maintain a pedagogic tone:** Use clear and concise language, and present information in an engaging and accessible manner.\\n\\n**Here is the user's request and objective:**\\nI'm a high school student and I want to learn about Mathematics and Computer Science with Python.\",\n",
       "    cached_content=None\n",
       "))"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sigma = fn.partial(compare, elementary_maths_python_assistant, elementary_maths_python_baseline)\n",
    "sigma"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1c9728c",
   "metadata": {
    "papermill": {
     "duration": 0.030403,
     "end_time": "2024-11-26T20:34:12.167760",
     "exception": false,
     "start_time": "2024-11-26T20:34:12.137357",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Sigma.1\n",
    "\n",
    "Demonstrates a classic algorithm and its implementation, showing the iterative improvement process"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "2638830e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:34:12.231562Z",
     "iopub.status.busy": "2024-11-26T20:34:12.231152Z",
     "iopub.status.idle": "2024-11-26T20:34:50.443894Z",
     "shell.execute_reply": "2024-11-26T20:34:50.442836Z"
    },
    "papermill": {
     "duration": 38.278152,
     "end_time": "2024-11-26T20:34:50.477041",
     "exception": false,
     "start_time": "2024-11-26T20:34:12.198889",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "#### Assistant"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution Time: 0:00:29.968079\n",
      "prompt_token_count: 672695\n",
      "candidates_token_count: 902\n",
      "total_token_count: 673597\n",
      "cached_content_token_count: 672654\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "Newton's method is an iterative algorithm for finding successively better approximations to the roots (or zeros) of a real-valued function.  It's particularly useful for finding square roots because it converges quickly.\n",
       "\n",
       "Here's how Newton's method works for finding the square root of a number *a*:\n",
       "\n",
       "1. **Start with an initial guess:** Choose a positive number *x* as your first approximation of √*a*.  A reasonable starting point is often *a*/2.\n",
       "\n",
       "2. **Iteratively refine the guess:** Use the following formula to calculate a better approximation *y*:\n",
       "\n",
       "   *y* = (*x* + *a*/ *x* ) / 2\n",
       "\n",
       "3. **Repeat:** Replace *x* with *y* and repeat step 2 until the approximation is \"good enough.\"\n",
       "\n",
       "4. **Stopping Criterion:**  You need a way to decide when your approximation is sufficiently accurate.  Common methods include:\n",
       "\n",
       "   * **Absolute difference:** Stop when |*y* − *x*| < *ε*, where *ε* is a small positive number (your tolerance). This means the change in successive approximations is smaller than your tolerance.\n",
       "\n",
       "   * **Relative difference:** Stop when |(*y* − *x*)/ *y*| < *ε*. This is useful when dealing with very large or very small numbers.\n",
       "\n",
       "   * **Number of iterations:**  Set a maximum number of iterations. This prevents the algorithm from running indefinitely if it doesn't converge.\n",
       "\n",
       "\n",
       "Here's a Python implementation incorporating these ideas:\n",
       "\n",
       "```python\n",
       "import math\n",
       "\n",
       "def newton_sqrt(a, tolerance=0.00001, max_iterations=100):\n",
       "    \"\"\"\n",
       "    Computes the square root of a using Newton's method.\n",
       "\n",
       "    Args:\n",
       "      a: The number for which to compute the square root.  Must be non-negative.\n",
       "      tolerance: The desired accuracy.  The algorithm stops when the absolute \n",
       "                 difference between successive approximations is less than tolerance.\n",
       "      max_iterations: The maximum number of iterations to perform.  This prevents \n",
       "                      indefinite looping if the algorithm doesn't converge.\n",
       "\n",
       "    Returns:\n",
       "      The approximate square root of a.  Returns None if a is negative or the \n",
       "      algorithm doesn't converge within max_iterations.\n",
       "\n",
       "    Raises:\n",
       "      ValueError: If a is negative.\n",
       "    \"\"\"\n",
       "    if a < 0:\n",
       "        raise ValueError(\"Cannot compute square root of a negative number.\")\n",
       "\n",
       "    x = a / 2  # Initial guess\n",
       "\n",
       "    for i in range(max_iterations):\n",
       "        y = (x + a / x) / 2\n",
       "        if abs(y - x) < tolerance:\n",
       "            return y\n",
       "        x = y\n",
       "\n",
       "    return None  # Algorithm didn't converge\n",
       "\n",
       "\n",
       "# Example usage\n",
       "number = 10\n",
       "approx_sqrt = newton_sqrt(number)\n",
       "\n",
       "if approx_sqrt is not None:\n",
       "    print(f\"The approximate square root of {number} is: {approx_sqrt}\")\n",
       "    print(f\"The actual square root of {number} is: {math.sqrt(number)}\")\n",
       "else:\n",
       "    print(f\"Newton's method did not converge for {number} within the specified iterations.\")\n",
       "\n",
       "\n",
       "number = 0\n",
       "approx_sqrt = newton_sqrt(number)\n",
       "\n",
       "if approx_sqrt is not None:\n",
       "    print(f\"The approximate square root of {number} is: {approx_sqrt}\")\n",
       "    print(f\"The actual square root of {number} is: {math.sqrt(number)}\")\n",
       "else:\n",
       "    print(f\"Newton's method did not converge for {number} within the specified iterations.\")\n",
       "\n",
       "```\n",
       "\n",
       "This improved code includes error handling for negative inputs and a `max_iterations` parameter to prevent infinite loops.  The `tolerance` parameter lets you control the desired accuracy.  The function returns `None` if it fails to converge within the maximum number of iterations.  The example shows how to use the function and compare the result to Python's built-in `math.sqrt()`. Remember that Newton's method provides an *approximation*; the accuracy depends on the tolerance and the number of iterations.\n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "#### Baseline"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution Time: 0:00:08.229369\n",
      "prompt_token_count: 235\n",
      "candidates_token_count: 998\n",
      "total_token_count: 1233\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "Let's explore Newton's method for finding square roots using Python.  This method is an iterative approach, meaning it refines an initial guess repeatedly until it reaches a desired level of accuracy.\n",
       "\n",
       "**Understanding Newton's Method**\n",
       "\n",
       "Newton's method is a powerful technique for finding successively better approximations to the roots (or zeros) of a real-valued function.  To find the square root of a number *x*, we can think of it as finding the root of the function  `f(y) = y² - x`.  The square root of *x* is the value of *y* that makes `f(y) = 0`.\n",
       "\n",
       "Newton's method uses the following iterative formula:\n",
       "\n",
       "`y_(n+1) = y_n - f(y_n) / f'(y_n)`\n",
       "\n",
       "where:\n",
       "\n",
       "* `y_n` is the current approximation of the square root.\n",
       "* `y_(n+1)` is the next, improved approximation.\n",
       "* `f(y_n)` is the function evaluated at the current approximation (`y_n² - x`).\n",
       "* `f'(y_n)` is the derivative of the function evaluated at the current approximation (`2y_n`).\n",
       "\n",
       "Therefore, for finding square roots, the iterative formula simplifies to:\n",
       "\n",
       "`y_(n+1) = y_n - (y_n² - x) / (2y_n) = (y_n + x/y_n) / 2`\n",
       "\n",
       "This formula takes the average of the current guess (`y_n`) and `x` divided by the current guess.  This averaging process progressively refines the approximation.\n",
       "\n",
       "\n",
       "**Python Implementation**\n",
       "\n",
       "Here's a Python function that implements Newton's method for finding square roots, including a stopping condition:\n",
       "\n",
       "```python\n",
       "def sqrt_newton(x, tolerance=0.00001, max_iterations=100):\n",
       "    \"\"\"\n",
       "    Calculates the square root of x using Newton's method.\n",
       "\n",
       "    Args:\n",
       "        x: The number for which to calculate the square root (must be non-negative).\n",
       "        tolerance: The desired accuracy (difference between successive approximations).\n",
       "        max_iterations: The maximum number of iterations to perform.\n",
       "\n",
       "    Returns:\n",
       "        The approximate square root of x, or None if the method fails to converge.\n",
       "    \"\"\"\n",
       "    if x < 0:\n",
       "        return None  # Cannot calculate square root of a negative number\n",
       "\n",
       "    if x == 0:\n",
       "        return 0\n",
       "\n",
       "    y = x  # Initial guess (can be improved for faster convergence)\n",
       "    for i in range(max_iterations):\n",
       "        y_next = (y + x / y) / 2\n",
       "        if abs(y - y_next) < tolerance:\n",
       "            return y_next\n",
       "        y = y_next\n",
       "    return None  # Method failed to converge within max_iterations\n",
       "\n",
       "\n",
       "# Example usage\n",
       "number = 16\n",
       "approx_sqrt = sqrt_newton(number)\n",
       "if approx_sqrt is not None:\n",
       "    print(f\"The approximate square root of {number} is: {approx_sqrt}\")\n",
       "else:\n",
       "    print(f\"Newton's method failed to converge for {number}\")\n",
       "\n",
       "\n",
       "number = 2\n",
       "approx_sqrt = sqrt_newton(number)\n",
       "if approx_sqrt is not None:\n",
       "    print(f\"The approximate square root of {number} is: {approx_sqrt}\")\n",
       "else:\n",
       "    print(f\"Newton's method failed to converge for {number}\")\n",
       "\n",
       "```\n",
       "\n",
       "**Explanation of the Code:**\n",
       "\n",
       "1. **Error Handling:** The function first checks for invalid input (negative numbers).\n",
       "2. **Initial Guess:** It starts with an initial guess (`y = x`).  A better initial guess could improve convergence speed.\n",
       "3. **Iteration:** The `for` loop performs the iterative refinement using the Newton's method formula.\n",
       "4. **Stopping Condition:** The loop stops when the absolute difference between successive approximations (`abs(y - y_next)`) is less than the specified `tolerance`. This ensures the desired accuracy.\n",
       "5. **Maximum Iterations:** The `max_iterations` parameter prevents infinite loops if the method fails to converge.\n",
       "6. **Return Value:** The function returns the approximate square root or `None` if convergence is not achieved.\n",
       "\n",
       "\n",
       "This example demonstrates how Newton's method provides an efficient way to approximate square roots.  The `tolerance` and `max_iterations` parameters allow you to control the accuracy and runtime of the algorithm.  Experiment with different values to see their effect. Remember that the choice of initial guess can also influence the speed of convergence.\n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sigma(\"\"\"\n",
    "Can you help me understand \"Newton's method\" for finding square roots with a Python example?\n",
    "I'd like to see how it iteratively improves the estimate and when to stop\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74d42e3d",
   "metadata": {
    "papermill": {
     "duration": 0.031643,
     "end_time": "2024-11-26T20:34:50.540214",
     "exception": false,
     "start_time": "2024-11-26T20:34:50.508571",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Sigma.2\n",
    "\n",
    "Demonstrates the practical application of a mathematical formula with a concrete example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "54cd1df2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:34:50.605029Z",
     "iopub.status.busy": "2024-11-26T20:34:50.604633Z",
     "iopub.status.idle": "2024-11-26T20:35:29.942572Z",
     "shell.execute_reply": "2024-11-26T20:35:29.941469Z"
    },
    "papermill": {
     "duration": 39.404476,
     "end_time": "2024-11-26T20:35:29.976586",
     "exception": false,
     "start_time": "2024-11-26T20:34:50.572110",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "#### Assistant"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution Time: 0:00:29.407826\n",
      "prompt_token_count: 672701\n",
      "candidates_token_count: 862\n",
      "total_token_count: 673563\n",
      "cached_content_token_count: 672654\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "Certainly!  The distance formula generalizes nicely to higher dimensions. Here's how you can implement it in Python, along with explanations for 2D, 3D, and n-dimensional space:\n",
       "\n",
       "**1. The Distance Formula**\n",
       "\n",
       "The distance formula calculates the distance between two points. In its most basic form (2D space), it's derived from the Pythagorean theorem:\n",
       "\n",
       "`distance = sqrt((x2 - x1)^2 + (y2 - y1)^2)`\n",
       "\n",
       "where (x1, y1) and (x2, y2) are the coordinates of the two points.\n",
       "\n",
       "**2. Python Implementation (2D, 3D, and nD)**\n",
       "\n",
       "This Python code uses a function to calculate the distance between points in any number of dimensions:\n",
       "\n",
       "```python\n",
       "import math\n",
       "\n",
       "def distance(point1, point2):\n",
       "    \"\"\"\n",
       "    Calculates the Euclidean distance between two points in n-dimensional space.\n",
       "\n",
       "    Args:\n",
       "        point1: A list or tuple representing the coordinates of the first point.\n",
       "        point2: A list or tuple representing the coordinates of the second point.\n",
       "\n",
       "    Returns:\n",
       "        The Euclidean distance between the two points.  Returns an error if the points\n",
       "        don't have the same number of dimensions.\n",
       "\n",
       "    \"\"\"\n",
       "    if len(point1) != len(point2):\n",
       "        raise ValueError(\"Points must have the same number of dimensions.\")\n",
       "\n",
       "    squared_differences = [(x - y)**2 for x, y in zip(point1, point2)]\n",
       "    return math.sqrt(sum(squared_differences))\n",
       "\n",
       "\n",
       "# Examples:\n",
       "\n",
       "# 2D\n",
       "point_a_2d = (1, 2)\n",
       "point_b_2d = (4, 6)\n",
       "dist_2d = distance(point_a_2d, point_b_2d)\n",
       "print(f\"Distance in 2D: {dist_2d}\")  # Output: Distance in 2D: 5.0\n",
       "\n",
       "\n",
       "# 3D\n",
       "point_a_3d = (1, 2, 3)\n",
       "point_b_3d = (4, 6, 5)\n",
       "dist_3d = distance(point_a_3d, point_b_3d)\n",
       "print(f\"Distance in 3D: {dist_3d}\")  # Output: Distance in 3D: 5.385164807134504\n",
       "\n",
       "\n",
       "# 4D (and beyond!)\n",
       "point_a_4d = (1, 2, 3, 4)\n",
       "point_b_4d = (5, 6, 7, 8)\n",
       "dist_4d = distance(point_a_4d, point_b_4d)\n",
       "print(f\"Distance in 4D: {dist_4d}\")  # Output: Distance in 4D: 8.0\n",
       "\n",
       "#Error Handling\n",
       "try:\n",
       "    distance((1,2), (1,2,3))\n",
       "except ValueError as e:\n",
       "    print(\"Error:\", e) # Output: Error: Points must have the same number of dimensions.\n",
       "\n",
       "```\n",
       "\n",
       "**3. Explanation**\n",
       "\n",
       "* **`distance(point1, point2)` function:** This function takes two points as input (lists or tuples).\n",
       "* **Dimension Check:** It first checks if the points have the same number of coordinates (dimensions). If not, it raises a `ValueError`.\n",
       "* **Squared Differences:** It uses a list comprehension and `zip` to efficiently calculate the squared differences between corresponding coordinates.\n",
       "* **Euclidean Distance:** Finally, it sums the squared differences and takes the square root using `math.sqrt` to get the Euclidean distance.\n",
       "\n",
       "This code is highly flexible because it works for any number of dimensions simply by providing points with the appropriate number of coordinates.  The use of `zip` makes it concise and efficient for any number of dimensions.  The error handling makes the code more robust.\n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "#### Baseline"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution Time: 0:00:09.915586\n",
      "prompt_token_count: 241\n",
      "candidates_token_count: 867\n",
      "total_token_count: 1108\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "Let's explore the distance formula and how to implement it in Python for different dimensions.  We'll base our understanding on the principles of distance calculation, which are fundamental to both mathematics and computer science.\n",
       "\n",
       "**Understanding the Distance Formula**\n",
       "\n",
       "The distance formula is derived from the Pythagorean theorem.  In two dimensions, it calculates the distance between two points (x₁, y₁) and (x₂, y₂) using the formula:\n",
       "\n",
       "√((x₂ - x₁)² + (y₂ - y₁)²)\n",
       "\n",
       "This extends to higher dimensions. For example, in three dimensions, with points (x₁, y₁, z₁) and (x₂, y₂, z₂), the formula becomes:\n",
       "\n",
       "√((x₂ - x₁)² + (y₂ - y₁)² + (z₂ - z₁)²)\n",
       "\n",
       "The pattern continues for even higher dimensions; we simply add the squared differences of each corresponding coordinate.\n",
       "\n",
       "**Python Implementation**\n",
       "\n",
       "We can write a Python function to calculate the distance between points in any number of dimensions.  This function will be flexible and reusable.\n",
       "\n",
       "```python\n",
       "import math\n",
       "\n",
       "def distance(point1, point2):\n",
       "  \"\"\"\n",
       "  Calculates the Euclidean distance between two points in n-dimensional space.\n",
       "\n",
       "  Args:\n",
       "    point1: A list or tuple representing the coordinates of the first point.\n",
       "    point2: A list or tuple representing the coordinates of the second point.\n",
       "\n",
       "  Returns:\n",
       "    The Euclidean distance between the two points.  Returns an error message if the points have different dimensions.\n",
       "  \"\"\"\n",
       "  if len(point1) != len(point2):\n",
       "    return \"Error: Points must have the same number of dimensions.\"\n",
       "\n",
       "  squared_differences = [(x - y)**2 for x, y in zip(point1, point2)]\n",
       "  return math.sqrt(sum(squared_differences))\n",
       "\n",
       "# Examples\n",
       "point_2d_1 = (1, 2)\n",
       "point_2d_2 = (4, 6)\n",
       "distance_2d = distance(point_2d_1, point_2d_2)\n",
       "print(f\"Distance between {point_2d_1} and {point_2d_2} in 2D: {distance_2d}\")\n",
       "\n",
       "point_3d_1 = (1, 2, 3)\n",
       "point_3d_2 = (4, 6, 9)\n",
       "distance_3d = distance(point_3d_1, point_3d_2)\n",
       "print(f\"Distance between {point_3d_1} and {point_3d_2} in 3D: {distance_3d}\")\n",
       "\n",
       "point_4d_1 = (1, 2, 3, 4)\n",
       "point_4d_2 = (5, 6, 7, 8)\n",
       "distance_4d = distance(point_4d_1, point_4d_2)\n",
       "print(f\"Distance between {point_4d_1} and {point_4d_2} in 4D: {distance_4d}\")\n",
       "\n",
       "#Example of error handling\n",
       "point_mismatch = (1,2)\n",
       "point_mismatch2 = (1,2,3)\n",
       "distance_mismatch = distance(point_mismatch, point_mismatch2)\n",
       "print(f\"Distance between {point_mismatch} and {point_mismatch2}: {distance_mismatch}\")\n",
       "\n",
       "```\n",
       "\n",
       "This code efficiently handles points of any dimension. The `zip` function elegantly iterates through coordinates, and the list comprehension makes the calculation concise.  The error handling ensures that the function is robust.  Remember that this calculates the *Euclidean* distance.  Other distance metrics exist (like Manhattan distance), but this is the most common interpretation of the \"distance formula.\"\n",
       "\n",
       "\n",
       "This example directly applies the mathematical concept to a practical programming solution, showcasing the interconnectedness of mathematics and computer science.  Let me know if you'd like to explore other mathematical concepts or delve deeper into any aspect of this code!\n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sigma(\"\"\"\n",
    "Can you show me how to calculate the \"distance formula\" from \"College Algebra\" using Python?\n",
    "I want to see how it works for points in 2D space, 3D space, and more.\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce03c41b",
   "metadata": {
    "papermill": {
     "duration": 0.032688,
     "end_time": "2024-11-26T20:35:30.042911",
     "exception": false,
     "start_time": "2024-11-26T20:35:30.010223",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Sigma.3\n",
    "\n",
    "Demonstrates a recursive function to calculate factorials, showing the power of recursion for mathematical operations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "cdcde290",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:35:30.112359Z",
     "iopub.status.busy": "2024-11-26T20:35:30.111429Z",
     "iopub.status.idle": "2024-11-26T20:35:56.693404Z",
     "shell.execute_reply": "2024-11-26T20:35:56.692221Z"
    },
    "papermill": {
     "duration": 26.619009,
     "end_time": "2024-11-26T20:35:56.695722",
     "exception": false,
     "start_time": "2024-11-26T20:35:30.076713",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "#### Assistant"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution Time: 0:00:21.239505\n",
      "prompt_token_count: 672687\n",
      "candidates_token_count: 64\n",
      "total_token_count: 672751\n",
      "cached_content_token_count: 672654\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "I'm sorry, but the provided \"College Algebra\" textbook does not contain information on recursion or factorial calculations.  The concepts of recursion and factorial functions are typically covered in introductory computer science or programming courses, not in a standard college algebra textbook.  Therefore, I cannot provide an example from that specific textbook.\n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "#### Baseline"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution Time: 0:00:05.328350\n",
      "prompt_token_count: 227\n",
      "candidates_token_count: 592\n",
      "total_token_count: 819\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "I apologize, but I do not have access to the content of specific textbooks, including a \"College Algebra\" textbook.  Therefore, I cannot provide an example of a recursive factorial function directly from that book.\n",
       "\n",
       "However, I can certainly explain how to compute the factorial of a number using recursion in Python.  The factorial of a non-negative integer n, denoted by n!, is the product of all positive integers less than or equal to n.  For example, 5! = 5 * 4 * 3 * 2 * 1 = 120.\n",
       "\n",
       "Recursion is a powerful programming technique where a function calls itself within its own definition.  To compute a factorial recursively, we can use the following definition:\n",
       "\n",
       "* **Base Case:**  The factorial of 0 is 1 (0! = 1).\n",
       "* **Recursive Step:** The factorial of n (where n > 0) is n multiplied by the factorial of (n-1).  That is, n! = n * (n-1)!.\n",
       "\n",
       "Here's the Python code implementing this recursive definition:\n",
       "\n",
       "```python\n",
       "def factorial_recursive(n):\n",
       "  \"\"\"\n",
       "  Computes the factorial of a non-negative integer using recursion.\n",
       "\n",
       "  Args:\n",
       "    n: The non-negative integer.\n",
       "\n",
       "  Returns:\n",
       "    The factorial of n.  Returns an error message if n is negative.\n",
       "  \"\"\"\n",
       "  if n < 0:\n",
       "    return \"Factorial is not defined for negative numbers.\"\n",
       "  elif n == 0:\n",
       "    return 1\n",
       "  else:\n",
       "    return n * factorial_recursive(n-1)\n",
       "\n",
       "# Example usage\n",
       "number = 5\n",
       "result = factorial_recursive(number)\n",
       "print(f\"The factorial of {number} is {result}\")  # Output: The factorial of 5 is 120\n",
       "\n",
       "number = 0\n",
       "result = factorial_recursive(number)\n",
       "print(f\"The factorial of {number} is {result}\")  # Output: The factorial of 0 is 1\n",
       "\n",
       "number = -3\n",
       "result = factorial_recursive(number)\n",
       "print(f\"The factorial of {number} is {result}\")  # Output: The factorial of -3 is Factorial is not defined for negative numbers.\n",
       "```\n",
       "\n",
       "This code first checks for the base case (n == 0). If n is 0, it returns 1. Otherwise, it recursively calls itself with n-1, multiplying the result by n.  The function also includes error handling for negative input.\n",
       "\n",
       "This example demonstrates a fundamental concept in computer science and mathematics.  Understanding recursion is crucial for tackling more complex problems in both fields.  Do you have any other questions about recursion or factorials, or would you like to explore other mathematical concepts or programming techniques?\n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sigma(\"\"\"\n",
    "Can you show me an example of how to use \"recursion\" to compute the \"factorial\" of a number from the \"College Algebra\" textbook?\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e931d2c4",
   "metadata": {
    "papermill": {
     "duration": 0.033334,
     "end_time": "2024-11-26T20:35:56.763204",
     "exception": false,
     "start_time": "2024-11-26T20:35:56.729870",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Sigma.4\n",
    "\n",
    "Provides a visual and conceptual understanding of a specific type of asymptote"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "bd177d47",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:35:56.831130Z",
     "iopub.status.busy": "2024-11-26T20:35:56.830715Z",
     "iopub.status.idle": "2024-11-26T20:36:33.220691Z",
     "shell.execute_reply": "2024-11-26T20:36:33.219594Z"
    },
    "papermill": {
     "duration": 36.460988,
     "end_time": "2024-11-26T20:36:33.257611",
     "exception": false,
     "start_time": "2024-11-26T20:35:56.796623",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "#### Assistant"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution Time: 0:00:29.641110\n",
      "prompt_token_count: 672697\n",
      "candidates_token_count: 855\n",
      "total_token_count: 673552\n",
      "cached_content_token_count: 672654\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "Let's explore slant asymptotes using Python's `matplotlib` and `numpy` libraries.  We'll focus on a rational function where the degree of the numerator is one greater than the degree of the denominator, guaranteeing a slant asymptote.\n",
       "\n",
       "Here's a Python example that graphs the function and its slant asymptote:\n",
       "\n",
       "```python\n",
       "import numpy as np\n",
       "import matplotlib.pyplot as plt\n",
       "\n",
       "# Define the rational function\n",
       "def f(x):\n",
       "    return (x**3 + 2*x**2 + x) / (x**2 - 1)\n",
       "\n",
       "# Define the slant asymptote (found via polynomial long division)\n",
       "def slant_asymptote(x):\n",
       "    return x + 2\n",
       "\n",
       "# Generate x values for plotting\n",
       "x = np.linspace(-10, 10, 500)  # Adjust range as needed\n",
       "\n",
       "# Calculate y values for the function and asymptote\n",
       "y_f = [f(val) if val != 1 and val != -1 else np.nan for val in x] #Handle undefined points\n",
       "y_slant = slant_asymptote(x)\n",
       "\n",
       "# Create the plot\n",
       "plt.figure(figsize=(10, 6))  # Adjust figure size as needed\n",
       "plt.plot(x, y_f, label='f(x) = (x³ + 2x² + x) / (x² - 1)')\n",
       "plt.plot(x, y_slant, '--', label='Slant Asymptote: y = x + 2')\n",
       "\n",
       "# Add labels and title\n",
       "plt.xlabel('x')\n",
       "plt.ylabel('y')\n",
       "plt.title('Rational Function with Slant Asymptote')\n",
       "plt.legend()\n",
       "plt.grid(True)\n",
       "\n",
       "#Show vertical asymptotes as dashed lines\n",
       "plt.axvline(x=1, color='r', linestyle='--', linewidth=0.7)\n",
       "plt.axvline(x=-1, color='r', linestyle='--', linewidth=0.7)\n",
       "\n",
       "#Show hole at x=-1\n",
       "plt.plot(-1, 0, 'o', markersize=5, markerfacecolor='white', markeredgecolor='black')\n",
       "\n",
       "\n",
       "# Display the plot\n",
       "plt.show()\n",
       "\n",
       "```\n",
       "\n",
       "This code will:\n",
       "\n",
       "1. **Define the function:** `f(x)` is our rational function.\n",
       "2. **Define the slant asymptote:** `slant_asymptote(x)` is the equation of the slant asymptote, obtained through polynomial long division (in this case,  (x³ + 2x² + x) divided by (x² - 1) yields a quotient of x + 2 and a remainder).\n",
       "3. **Generate x values:** `np.linspace` creates a range of x values for plotting.\n",
       "4. **Calculate y values:**  The code calculates the corresponding y values for both the function and the asymptote.  Note the use of `np.nan` to handle the undefined points at x = 1 and x = -1 (vertical asymptotes).\n",
       "5. **Create and customize the plot:** `matplotlib` is used to generate the plot, adding labels, a title, a legend, and a grid for better readability.  Vertical asymptotes are shown as dashed red lines. A white circle indicates the hole at x = -1.\n",
       "6. **Display the plot:** `plt.show()` displays the graph.\n",
       "\n",
       "\n",
       "When you run this code, you'll see a graph where the rational function `f(x)` approaches the slant asymptote `y = x + 2` as x goes to positive and negative infinity. You'll also clearly see the vertical asymptotes at x = 1 and x = -1, and the hole at x = -1.  The graph visually demonstrates how the function's behavior gets closer and closer to the slant asymptote as |x| increases.  Remember that the function will *never* actually touch the asymptote, only approach it arbitrarily closely.\n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "#### Baseline"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution Time: 0:00:06.734177\n",
      "prompt_token_count: 237\n",
      "candidates_token_count: 888\n",
      "total_token_count: 1125\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "Let's explore slant asymptotes!  Since you're in high school and learning College Algebra, we'll keep the explanation relatively straightforward and then illustrate it with a Python example using `matplotlib` for graphing.\n",
       "\n",
       "**Understanding Slant Asymptotes**\n",
       "\n",
       "A slant asymptote (also called an oblique asymptote) occurs in rational functions (functions that are fractions of polynomials) where the degree of the numerator is *exactly one more* than the degree of the denominator.  Unlike horizontal asymptotes which represent horizontal lines the function approaches as x goes to positive or negative infinity, a slant asymptote is a *line* with a non-zero slope that the function approaches.\n",
       "\n",
       "We find the equation of the slant asymptote by performing polynomial long division. The quotient (ignoring the remainder) is the equation of the slant asymptote.\n",
       "\n",
       "**Example:**\n",
       "\n",
       "Let's consider the function:  f(x) = (x² + 2x + 1) / (x + 1)\n",
       "\n",
       "1. **Degree Check:** The numerator (x²) has a degree of 2, and the denominator (x) has a degree of 1. The numerator's degree is exactly one more than the denominator's, indicating a slant asymptote.\n",
       "\n",
       "2. **Polynomial Long Division:**\n",
       "\n",
       "```\n",
       "      x + 1\n",
       "x + 1 | x² + 2x + 1\n",
       "      - (x² + x)\n",
       "          x + 1\n",
       "        - (x + 1)\n",
       "              0\n",
       "```\n",
       "\n",
       "The quotient is x + 1.  Therefore, the equation of the slant asymptote is y = x + 1.\n",
       "\n",
       "**Python Example with Graph**\n",
       "\n",
       "This code will plot the function and its slant asymptote:\n",
       "\n",
       "```python\n",
       "import matplotlib.pyplot as plt\n",
       "import numpy as np\n",
       "\n",
       "# Define the function\n",
       "def f(x):\n",
       "  return (x**2 + 2*x + 1) / (x + 1)\n",
       "\n",
       "# Define the slant asymptote\n",
       "def asymptote(x):\n",
       "  return x + 1\n",
       "\n",
       "# Generate x values\n",
       "x = np.linspace(-10, 10, 400)  # Adjust range as needed\n",
       "\n",
       "#Avoid division by zero error.  We'll just skip the point where x=-1\n",
       "x = x[x != -1]\n",
       "\n",
       "# Calculate y values for the function and asymptote\n",
       "y = f(x)\n",
       "y_asymptote = asymptote(x)\n",
       "\n",
       "# Create the plot\n",
       "plt.plot(x, y, label='f(x) = (x² + 2x + 1) / (x + 1)')\n",
       "plt.plot(x, y_asymptote, label='Slant Asymptote: y = x + 1', linestyle='--')\n",
       "plt.xlabel('x')\n",
       "plt.ylabel('y')\n",
       "plt.title('Slant Asymptote Example')\n",
       "plt.legend()\n",
       "plt.grid(True)\n",
       "plt.show()\n",
       "```\n",
       "\n",
       "This code will:\n",
       "\n",
       "1. **Import necessary libraries:** `matplotlib.pyplot` for plotting and `numpy` for numerical operations.\n",
       "2. **Define the function and asymptote:**  These functions represent our rational function and its slant asymptote.\n",
       "3. **Generate x values:** `np.linspace` creates an array of evenly spaced x-values.  We exclude x=-1 to avoid division by zero.\n",
       "4. **Calculate y values:**  We calculate the corresponding y-values for both the function and the asymptote.\n",
       "5. **Create the plot:**  The code uses `plt.plot` to plot both the function and the asymptote.  Labels, titles, and a legend are added for clarity.\n",
       "6. **Show the plot:** `plt.show()` displays the graph.\n",
       "\n",
       "\n",
       "Remember to install `matplotlib` and `numpy` if you haven't already (`pip install matplotlib numpy`).  Run this code, and you'll see a graph visually demonstrating how the function approaches the slant asymptote.  You can experiment by changing the function to explore other examples.  Let me know if you'd like to try another example or have further questions!\n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sigma(\"\"\"\n",
    "I'm trying to wrap my head around \"slant asymptotes\" in \"College Algebra\".\n",
    "Can you show me a Python example with a graph to see how the function approaches the asymptote?\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "300b2973",
   "metadata": {
    "papermill": {
     "duration": 0.033143,
     "end_time": "2024-11-26T20:36:33.323857",
     "exception": false,
     "start_time": "2024-11-26T20:36:33.290714",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Sigma.5\n",
    "\n",
    "Demonstrates how to work with matrices in Python, connecting it to the mathematical concepts in the textbook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "5e35c9ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:36:33.392231Z",
     "iopub.status.busy": "2024-11-26T20:36:33.391435Z",
     "iopub.status.idle": "2024-11-26T20:37:13.296122Z",
     "shell.execute_reply": "2024-11-26T20:37:13.295004Z"
    },
    "papermill": {
     "duration": 39.94114,
     "end_time": "2024-11-26T20:37:13.298214",
     "exception": false,
     "start_time": "2024-11-26T20:36:33.357074",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "#### Assistant"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution Time: 0:00:32.262050\n",
      "prompt_token_count: 672699\n",
      "candidates_token_count: 1060\n",
      "total_token_count: 673759\n",
      "cached_content_token_count: 672654\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "Certainly!  Let's explore how to represent and manipulate matrices in Python. We'll use lists of lists to represent matrices, which is a straightforward approach for basic operations.  More advanced libraries like NumPy provide greater efficiency and functionality for larger matrices, but lists of lists are a good starting point for understanding the concepts.\n",
       "\n",
       "**Representing Matrices:**\n",
       "\n",
       "A matrix is a rectangular array of numbers.  We can represent this in Python using nested lists (a list where each element is itself a list). Each inner list represents a row of the matrix.\n",
       "\n",
       "```python\n",
       "# Example of a 2x3 matrix\n",
       "matrix_A = [\n",
       "    [1, 2, 3],  # Row 1\n",
       "    [4, 5, 6]   # Row 2\n",
       "]\n",
       "\n",
       "# Example of a 3x2 matrix\n",
       "matrix_B = [\n",
       "    [7, 8],\n",
       "    [9, 10],\n",
       "    [11, 12]\n",
       "]\n",
       "\n",
       "# Example of a 1x1 matrix (a scalar)\n",
       "matrix_C = [[5]]\n",
       "\n",
       "# Example of a 3x3 matrix\n",
       "matrix_D = [\n",
       "    [1, 0, 0],\n",
       "    [0, 1, 0],\n",
       "    [0, 0, 1]\n",
       "]\n",
       "\n",
       "print(\"Matrix A:\", matrix_A)\n",
       "print(\"Matrix B:\", matrix_B)\n",
       "print(\"Matrix C:\", matrix_C)\n",
       "print(\"Matrix D:\", matrix_D)\n",
       "```\n",
       "\n",
       "**Matrix Addition:**\n",
       "\n",
       "To add two matrices, they must have the same dimensions.  The sum is found by adding corresponding elements.\n",
       "\n",
       "```python\n",
       "def matrix_addition(matrix1, matrix2):\n",
       "    \"\"\"Adds two matrices of the same dimensions.\"\"\"\n",
       "    rows1 = len(matrix1)\n",
       "    cols1 = len(matrix1[0])  # Assumes all rows have the same number of columns\n",
       "    rows2 = len(matrix2)\n",
       "    cols2 = len(matrix2[0])\n",
       "\n",
       "    if rows1 != rows2 or cols1 != cols2:\n",
       "        raise ValueError(\"Matrices must have the same dimensions for addition.\")\n",
       "\n",
       "    result = [[0 for _ in range(cols1)] for _ in range(rows1)]  # Initialize result matrix\n",
       "    for i in range(rows1):\n",
       "        for j in range(cols1):\n",
       "            result[i][j] = matrix1[i][j] + matrix2[i][j]\n",
       "    return result\n",
       "\n",
       "matrix_sum = matrix_addition(matrix_A, [[7,8,9],[10,11,12]]) #Example of addition with a 2x3 matrix\n",
       "\n",
       "print(\"\\nMatrix Sum (A + another matrix):\", matrix_sum)\n",
       "\n",
       "\n",
       "#This will raise a ValueError because the dimensions don't match.\n",
       "#matrix_sum_error = matrix_addition(matrix_A, matrix_B) \n",
       "```\n",
       "\n",
       "**Scalar Multiplication:**\n",
       "\n",
       "Scalar multiplication involves multiplying each element of a matrix by a single scalar value (a number).\n",
       "\n",
       "```python\n",
       "def scalar_multiplication(matrix, scalar):\n",
       "    \"\"\"Multiplies a matrix by a scalar value.\"\"\"\n",
       "    rows = len(matrix)\n",
       "    cols = len(matrix[0])  # Assumes all rows have the same number of columns\n",
       "\n",
       "    result = [[0 for _ in range(cols)] for _ in range(rows)]\n",
       "    for i in range(rows):\n",
       "        for j in range(cols):\n",
       "            result[i][j] = matrix[i][j] * scalar\n",
       "    return result\n",
       "\n",
       "scalar_product = scalar_multiplication(matrix_A, 2)  #Example of scalar multiplication\n",
       "print(\"\\nScalar Product (2 * A):\", scalar_product)\n",
       "```\n",
       "\n",
       "Remember that these functions assume the input matrices are correctly formatted (all rows have the same number of columns).  For more robust error handling and larger-scale matrix operations, you should use the NumPy library.  NumPy's `array` object is specifically designed for numerical computation and is much more efficient than nested lists for matrix operations.  Here's a quick example using NumPy:\n",
       "\n",
       "```python\n",
       "import numpy as np\n",
       "\n",
       "numpy_A = np.array(matrix_A)  # Convert list of lists to a NumPy array\n",
       "numpy_B = np.array(matrix_B)\n",
       "\n",
       "numpy_sum = numpy_A + np.array([[7,8,9],[10,11,12]]) #Example of addition with a NumPy array\n",
       "print(\"\\nNumPy Matrix Sum:\", numpy_sum)\n",
       "\n",
       "scalar_product_numpy = 2 * numpy_A  # Scalar multiplication in NumPy\n",
       "print(\"NumPy Scalar Product:\", scalar_product_numpy)\n",
       "```\n",
       "\n",
       "NumPy makes matrix operations significantly easier and faster, especially for larger matrices.  I recommend exploring its documentation for more advanced operations (matrix multiplication, inversion, etc.).\n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "#### Baseline"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution Time: 0:00:07.628944\n",
      "prompt_token_count: 239\n",
      "candidates_token_count: 918\n",
      "total_token_count: 1157\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "That's a great goal!  Matrices are fundamental to both mathematics and computer science, and Python provides excellent tools for working with them. Let's explore how to represent and manipulate matrices using Python's NumPy library.\n",
       "\n",
       "First, we need to install NumPy if you don't have it already.  Open your terminal or command prompt and type `pip install numpy`.\n",
       "\n",
       "Now, let's dive into the code.  We'll start with representing a matrix.  In mathematics, a matrix is a rectangular array of numbers. In Python, we can represent this using a NumPy array.\n",
       "\n",
       "```python\n",
       "import numpy as np\n",
       "\n",
       "# Define a 2x3 matrix\n",
       "matrix_A = np.array([[1, 2, 3],\n",
       "                     [4, 5, 6]])\n",
       "\n",
       "# Print the matrix\n",
       "print(\"Matrix A:\\n\", matrix_A)\n",
       "\n",
       "# Define another 2x3 matrix\n",
       "matrix_B = np.array([[7, 8, 9],\n",
       "                     [10, 11, 12]])\n",
       "\n",
       "# Print the matrix\n",
       "print(\"\\nMatrix B:\\n\", matrix_B)\n",
       "\n",
       "```\n",
       "\n",
       "This code creates two 2x3 matrices, `matrix_A` and `matrix_B`.  The `np.array()` function takes a nested list (a list of lists) as input, where each inner list represents a row of the matrix.\n",
       "\n",
       "Now let's perform some basic operations:\n",
       "\n",
       "**1. Matrix Addition:**\n",
       "\n",
       "Adding two matrices is straightforward in NumPy.  You simply use the `+` operator:\n",
       "\n",
       "```python\n",
       "# Matrix addition\n",
       "matrix_sum = matrix_A + matrix_B\n",
       "print(\"\\nMatrix A + Matrix B:\\n\", matrix_sum)\n",
       "```\n",
       "\n",
       "This will add corresponding elements of `matrix_A` and `matrix_B`.  Remember that matrix addition is only defined for matrices of the same dimensions.\n",
       "\n",
       "**2. Scalar Multiplication:**\n",
       "\n",
       "Scalar multiplication involves multiplying each element of a matrix by a single number (a scalar).  In NumPy, this is also very simple:\n",
       "\n",
       "```python\n",
       "# Scalar multiplication\n",
       "scalar = 2\n",
       "scalar_multiple = scalar * matrix_A\n",
       "print(\"\\n2 * Matrix A:\\n\", scalar_multiple)\n",
       "```\n",
       "\n",
       "This code multiplies each element of `matrix_A` by 2.\n",
       "\n",
       "\n",
       "**Let's expand this a bit to include some error handling and more matrix operations:**\n",
       "\n",
       "```python\n",
       "import numpy as np\n",
       "\n",
       "def matrix_operation(matrix1, matrix2, operation):\n",
       "    \"\"\"Performs matrix addition or subtraction, checking for compatible dimensions.\"\"\"\n",
       "    if matrix1.shape != matrix2.shape:\n",
       "        raise ValueError(\"Matrices must have the same dimensions for addition/subtraction.\")\n",
       "    if operation == '+':\n",
       "        return matrix1 + matrix2\n",
       "    elif operation == '-':\n",
       "        return matrix1 - matrix2\n",
       "    else:\n",
       "        raise ValueError(\"Invalid operation. Choose '+' or '-'.\")\n",
       "\n",
       "# Example usage\n",
       "matrix_A = np.array([[1, 2, 3], [4, 5, 6]])\n",
       "matrix_B = np.array([[7, 8, 9], [10, 11, 12]])\n",
       "\n",
       "try:\n",
       "    sum_result = matrix_operation(matrix_A, matrix_B, '+')\n",
       "    diff_result = matrix_operation(matrix_A, matrix_B, '-')\n",
       "    print(\"Matrix Addition:\\n\", sum_result)\n",
       "    print(\"\\nMatrix Subtraction:\\n\", diff_result)\n",
       "except ValueError as e:\n",
       "    print(\"Error:\", e)\n",
       "\n",
       "\n",
       "#Scalar Multiplication\n",
       "scalar = 3\n",
       "scalar_multiple = scalar * matrix_A\n",
       "print(\"\\nScalar Multiplication (3 * Matrix A):\\n\", scalar_multiple)\n",
       "\n",
       "```\n",
       "\n",
       "This improved code includes a function `matrix_operation` that handles both addition and subtraction, and importantly, includes error handling to check if the matrices have compatible dimensions before attempting the operation.  This is crucial for robust code.\n",
       "\n",
       "Remember to run this code in a Python environment (like Jupyter Notebook or a Python script).  Let me know if you'd like to explore more advanced matrix operations like multiplication or transposition!  We can also delve into how these operations are used in practical applications in computer science.\n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sigma(\"\"\"\n",
    "I'm learning about \"matrices\" in \"College Algebra\".\n",
    "Can you show me how to represent a matrix in Python and maybe perform some basic matrix operations on it,\n",
    "like addition or scalar multiplication?\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c15c9d6f",
   "metadata": {
    "papermill": {
     "duration": 0.036602,
     "end_time": "2024-11-26T20:37:13.371893",
     "exception": false,
     "start_time": "2024-11-26T20:37:13.335291",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Sigma.6\n",
    "\n",
    "Demonstrates a practical application of list comprehensions for generating mathematical sequences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "55b651a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:37:13.444215Z",
     "iopub.status.busy": "2024-11-26T20:37:13.443381Z",
     "iopub.status.idle": "2024-11-26T20:37:49.031060Z",
     "shell.execute_reply": "2024-11-26T20:37:49.029680Z"
    },
    "papermill": {
     "duration": 35.661724,
     "end_time": "2024-11-26T20:37:49.068317",
     "exception": false,
     "start_time": "2024-11-26T20:37:13.406593",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "#### Assistant"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution Time: 0:00:28.470920\n",
      "prompt_token_count: 672704\n",
      "candidates_token_count: 777\n",
      "total_token_count: 673481\n",
      "cached_content_token_count: 672654\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "List comprehensions offer a concise way to create lists in Python.  Let's explore how to generate arithmetic and geometric sequences using them, drawing inspiration from the sequence concepts in the *College Algebra* textbook.\n",
       "\n",
       "**Arithmetic Sequence**\n",
       "\n",
       "An arithmetic sequence is defined by a starting value (often denoted `a`) and a common difference (`d`).  Each term is obtained by adding `d` to the previous term.  The formula for the *n*th term is:  `a + (n-1)d`\n",
       "\n",
       "Let's generate an arithmetic sequence with a starting value of 2 and a common difference of 3, containing the first 5 terms:\n",
       "\n",
       "```python\n",
       "arithmetic_sequence = [2 + (n - 1) * 3 for n in range(1, 6)] \n",
       "print(arithmetic_sequence)  # Output: [2, 5, 8, 11, 14]\n",
       "```\n",
       "\n",
       "Here's how it works:\n",
       "\n",
       "* `for n in range(1, 6)`: This iterates through the numbers 1, 2, 3, 4, 5 (representing the term number).\n",
       "* `2 + (n - 1) * 3`: This is the expression that calculates each term of the sequence using the arithmetic formula.\n",
       "\n",
       "\n",
       "**Geometric Sequence**\n",
       "\n",
       "A geometric sequence starts with a value `a` and has a common ratio `r`. Each term is obtained by multiplying the previous term by `r`. The formula for the *n*th term is: `a * r**(n-1)`\n",
       "\n",
       "Let's create a geometric sequence with a starting value of 1, a common ratio of 2, and the first 6 terms:\n",
       "\n",
       "```python\n",
       "geometric_sequence = [1 * 2**(n - 1) for n in range(1, 7)]\n",
       "print(geometric_sequence)  # Output: [1, 2, 4, 8, 16, 32]\n",
       "```\n",
       "\n",
       "Explanation:\n",
       "\n",
       "* `for n in range(1, 7)`: Iterates through term numbers 1 to 6.\n",
       "* `1 * 2**(n - 1)`: Calculates each term using the geometric sequence formula.  `**` is the exponentiation operator.\n",
       "\n",
       "\n",
       "**More Complex Examples**\n",
       "\n",
       "List comprehensions can handle more intricate logic.  For example, let's generate a sequence where we only include even numbers from an arithmetic sequence:\n",
       "\n",
       "\n",
       "```python\n",
       "arithmetic_sequence = [2 + (n - 1) * 3 for n in range(1, 11)]\n",
       "even_numbers = [x for x in arithmetic_sequence if x % 2 == 0]\n",
       "print(even_numbers) # Output: [2, 8, 14]\n",
       "\n",
       "# Combining into a single list comprehension:\n",
       "even_numbers_single = [2 + (n - 1) * 3 for n in range(1, 11) if (2 + (n - 1) * 3) % 2 == 0]\n",
       "print(even_numbers_single) # Output: [2, 8, 14]\n",
       "```\n",
       "\n",
       "Remember that the condition (`if x % 2 == 0`) is optional.  You can add conditions to filter the\n",
       "elements included in your list.  The general form is:\n",
       "\n",
       "`new_list = [expression for item in iterable if condition]`\n",
       "\n",
       "\n",
       "These examples demonstrate the power and readability of list comprehensions for generating sequences.  They are particularly useful when you need a concise way to create a list based on an existing sequence or range.\n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "#### Baseline"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution Time: 0:00:07.101137\n",
      "prompt_token_count: 244\n",
      "candidates_token_count: 812\n",
      "total_token_count: 1056\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "Let's explore list comprehensions in Python, using examples inspired by arithmetic and geometric sequences, concepts you'd find in your College Algebra textbook.\n",
       "\n",
       "**What is a List Comprehension?**\n",
       "\n",
       "A list comprehension is a concise way to create lists in Python.  It's essentially a shorthand for a `for` loop combined with an optional conditional statement, all packed into a single line.  This makes your code more readable and often more efficient.\n",
       "\n",
       "**Arithmetic Sequence Example:**\n",
       "\n",
       "An arithmetic sequence is a sequence where the difference between consecutive terms is constant (this constant is called the common difference).  Let's generate an arithmetic sequence using a list comprehension:\n",
       "\n",
       "```python\n",
       "# Generate an arithmetic sequence with a starting value of 2, a common difference of 3, and 5 terms.\n",
       "arithmetic_sequence = [2 + 3*i for i in range(5)]\n",
       "print(arithmetic_sequence)  # Output: [2, 5, 8, 11, 14]\n",
       "```\n",
       "\n",
       "Here's a breakdown:\n",
       "\n",
       "* `[ ... for i in range(5)]`: This part iterates through numbers 0 to 4 (the `range(5)` function).  Each number (`i`) represents the position in the sequence.\n",
       "* `2 + 3*i`: This is the expression that calculates each term of the sequence.  `2` is the first term, and `3*i` adds the common difference (`3`) multiplied by the position (`i`).\n",
       "\n",
       "**Geometric Sequence Example:**\n",
       "\n",
       "A geometric sequence is a sequence where each term is found by multiplying the previous term by a constant (this constant is called the common ratio). Let's create one using a list comprehension:\n",
       "\n",
       "```python\n",
       "# Generate a geometric sequence with a starting value of 1, a common ratio of 2, and 6 terms.\n",
       "geometric_sequence = [1 * (2**i) for i in range(6)]\n",
       "print(geometric_sequence)  # Output: [1, 2, 4, 8, 16, 32]\n",
       "```\n",
       "\n",
       "Here:\n",
       "\n",
       "* `[ ... for i in range(6)]`:  Similar to the arithmetic example, this iterates through positions 0 to 5.\n",
       "* `1 * (2**i)`: This calculates each term. `1` is the first term, and `(2**i)` raises the common ratio (`2`) to the power of the position (`i`).\n",
       "\n",
       "\n",
       "**Adding a Conditional Statement:**\n",
       "\n",
       "List comprehensions can also include conditional statements to filter the elements included in the list. For example, let's generate only the even numbers in an arithmetic sequence:\n",
       "\n",
       "```python\n",
       "# Generate an arithmetic sequence, but only include even numbers.\n",
       "arithmetic_sequence_even = [2 + 3*i for i in range(10) if (2 + 3*i) % 2 == 0]\n",
       "print(arithmetic_sequence_even) # Output: [2, 8, 14]\n",
       "```\n",
       "\n",
       "The `if (2 + 3*i) % 2 == 0` condition ensures that only even numbers are added to the list.\n",
       "\n",
       "\n",
       "**Practice Exercises:**\n",
       "\n",
       "1.  Generate a geometric sequence with a starting value of 3, a common ratio of 0.5, and 5 terms.\n",
       "2.  Generate an arithmetic sequence with a starting value of -1, a common difference of 4, and 7 terms.  Only include the positive numbers.\n",
       "3.  Create a list of the squares of the first 10 natural numbers.\n",
       "\n",
       "\n",
       "Remember, list comprehensions are a powerful tool for creating lists efficiently.  Practice these examples and try modifying them to generate different sequences.  Let me know if you have any questions or want to explore more advanced list comprehension techniques!\n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "sigma(\"\"\"\n",
    "I'm trying to understand \"list comprehensions\" in Python.\n",
    "Can you show me how to use a list comprehension to generate a sequence of numbers,\n",
    "maybe like an arithmetic or geometric sequence from the \"College Algebra\" textbook\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c59482a0",
   "metadata": {
    "papermill": {
     "duration": 0.035749,
     "end_time": "2024-11-26T20:37:49.139628",
     "exception": false,
     "start_time": "2024-11-26T20:37:49.103879",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Synergy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "9779c17d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:37:49.212862Z",
     "iopub.status.busy": "2024-11-26T20:37:49.212239Z",
     "iopub.status.idle": "2024-11-26T20:37:49.219970Z",
     "shell.execute_reply": "2024-11-26T20:37:49.218877Z"
    },
    "papermill": {
     "duration": 0.046766,
     "end_time": "2024-11-26T20:37:49.222140",
     "exception": false,
     "start_time": "2024-11-26T20:37:49.175374",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "functools.partial(<function compare at 0x7cba08252e60>, genai.GenerativeModel(\n",
       "    model_name='models/gemini-1.5-flash-002',\n",
       "    generation_config={'max_output_tokens': 3000, 'temperature': 0},\n",
       "    safety_settings={<HarmCategory.HARM_CATEGORY_HARASSMENT: 7>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>, <HarmCategory.HARM_CATEGORY_HATE_SPEECH: 8>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>, <HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: 9>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>, <HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: 10>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>},\n",
       "    tools=None,\n",
       "    system_instruction=None,\n",
       "    cached_content=cachedContents/71y546un40le\n",
       "), genai.GenerativeModel(\n",
       "    model_name='models/gemini-1.5-flash-002',\n",
       "    generation_config={'max_output_tokens': 3000, 'temperature': 0},\n",
       "    safety_settings={<HarmCategory.HARM_CATEGORY_HARASSMENT: 7>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>, <HarmCategory.HARM_CATEGORY_HATE_SPEECH: 8>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>, <HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: 9>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>, <HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: 10>: <HarmBlockThreshold.BLOCK_LOW_AND_ABOVE: 1>},\n",
       "    tools=None,\n",
       "    system_instruction=\"\\nYou are a friendly and helpful learning assistant. Your primary goal is to personalize learning content for the user based on their specific requests and objectives. \\n\\nTo do this, you will:\\n- **Utilize the provided textbooks:** Ground your responses and explanations in the information available from these textbooks. \\n- **Understand the user's request and objective:** Carefully analyze the user's input to identify their needs and learning goals.\\n- **Personalize the learning experience:** Adapt your explanations, examples, and activities to the user's level and learning style.\\n- **Provide constructive feedback:** Offer helpful guidance and suggestions to support the user in achieving their objectives.\\n- **Maintain a pedagogic tone:** Use clear and concise language, and present information in an engaging and accessible manner.\\n\\n**Here is the user's request and objective:**\\nI want to become a better leader/manager in a multi-cultural and international environment.\",\n",
       "    cached_content=None\n",
       "))"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "synergy = fn.partial(compare, adult_multicultural_management_assistant, adult_multicultural_management_baseline)\n",
    "synergy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc881e0f",
   "metadata": {
    "papermill": {
     "duration": 0.036005,
     "end_time": "2024-11-26T20:37:49.293607",
     "exception": false,
     "start_time": "2024-11-26T20:37:49.257602",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Synergy.1\n",
    "\n",
    "Demonstrates the ability to extract concise information from a textbook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "72ea1dc0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:37:49.366202Z",
     "iopub.status.busy": "2024-11-26T20:37:49.365823Z",
     "iopub.status.idle": "2024-11-26T20:38:05.841986Z",
     "shell.execute_reply": "2024-11-26T20:38:05.840884Z"
    },
    "papermill": {
     "duration": 16.514919,
     "end_time": "2024-11-26T20:38:05.844219",
     "exception": false,
     "start_time": "2024-11-26T20:37:49.329300",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "#### Assistant"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution Time: 0:00:15.593337\n",
      "prompt_token_count: 476670\n",
      "candidates_token_count: 145\n",
      "total_token_count: 476815\n",
      "cached_content_token_count: 476644\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "Chapter 1 of \"Cultural Intelligence\" highlights the crucial distinction between managers and leaders, arguing that cultural intelligence demands leadership, not just management.  Managers focus on controlling, planning, organizing, and coordinating to cope with complexity. Leaders, conversely, focus on innovation, vision, motivation, trust, and change to cope with the dynamic nature of a globalized world.  The chapter emphasizes that culturally intelligent leaders must be courageous, fostering environments where diversity thrives and conflicting values are openly discussed.  They prioritize diversity, build relationships, enable communication, establish accountability, and foster mutual interdependence.  The interplay of leadership and culture is likened to a strong, intertwined rope, emphasizing the need for flexibility and adaptability in navigating intercultural challenges.\n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "#### Baseline"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution Time: 0:00:00.868438\n",
      "prompt_token_count: 218\n",
      "candidates_token_count: 47\n",
      "total_token_count: 265\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "Please provide me with the text of Chapter 1 from \"Cultural Intelligence\" so I can summarize the key takeaways on the differences between managers and leaders for you.  I need the content of the chapter to be able to help.\n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "synergy(\"\"\"\n",
    "Can you summarize the key takeaways from Chapter 1 of \"Cultural Intelligence\" on the difference between managers and leaders?\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cdab2005",
   "metadata": {
    "papermill": {
     "duration": 0.035397,
     "end_time": "2024-11-26T20:38:05.915341",
     "exception": false,
     "start_time": "2024-11-26T20:38:05.879944",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Synergy.2\n",
    "\n",
    "Helps in recognizing the role of cultural values in shaping behavior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "4db8e3e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:38:05.988786Z",
     "iopub.status.busy": "2024-11-26T20:38:05.988348Z",
     "iopub.status.idle": "2024-11-26T20:38:37.783878Z",
     "shell.execute_reply": "2024-11-26T20:38:37.782823Z"
    },
    "papermill": {
     "duration": 31.873832,
     "end_time": "2024-11-26T20:38:37.824837",
     "exception": false,
     "start_time": "2024-11-26T20:38:05.951005",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "#### Assistant"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution Time: 0:00:24.680102\n",
      "prompt_token_count: 476671\n",
      "candidates_token_count: 1009\n",
      "total_token_count: 477680\n",
      "cached_content_token_count: 476644\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "The book \"Cultural Intelligence\" discusses cultural value dimensions as broad preferences for one state of affairs over others, largely unconscious, that underlie the behaviors, values, and attitudes of a national culture.  These dimensions help explain systematic differences between nations and how these differences impact leadership behavior.  While the book doesn't explicitly name a specific model, the description strongly aligns with Geert Hofstede's cultural dimensions and the GLOBE study, both of which are referenced in the text.\n",
       "\n",
       "Let's examine the key dimensions and their impact on leadership:\n",
       "\n",
       "**1. Identity (Individualism vs. Collectivism):** This dimension focuses on whether a culture prioritizes individual needs and achievements or group harmony and collective goals.\n",
       "\n",
       "* **Individualistic cultures** (e.g., the US, UK, Australia) value independence, self-reliance, and individual achievement. Leaders in these cultures might adopt a more directive, task-oriented style, focusing on individual performance and rewards.  They might emphasize competition and individual recognition.\n",
       "* **Collectivistic cultures** (e.g., Japan, China, many Latin American countries) prioritize group cohesion, loyalty, and interdependence. Leaders in these cultures often adopt a more collaborative, relationship-oriented style, emphasizing teamwork, consensus-building, and group harmony.  They might prioritize group goals over individual ones.\n",
       "\n",
       "**2. Power Distance (High vs. Low):** This dimension reflects the extent to which a society accepts unequal power distribution.\n",
       "\n",
       "* **High power distance cultures** (e.g., Mexico, India, many Asian countries) accept hierarchical structures and significant power differences between superiors and subordinates. Leaders in these cultures might exhibit a more autocratic, directive style, with less consultation and participation from subordinates. Decisions are often made top-down.\n",
       "* **Low power distance cultures** (e.g., Denmark, Israel, the Netherlands) emphasize equality and minimize power differences. Leaders in these cultures might adopt a more participative, democratic style, encouraging input and collaboration from all levels.  They might foster open communication and shared decision-making.\n",
       "\n",
       "**3. Gender Egalitarianism (Masculine vs. Feminine):** This dimension refers to the degree to which a culture values traditionally masculine traits (assertiveness, competition, material success) versus feminine traits (nurturing, cooperation, quality of life).\n",
       "\n",
       "* **Masculine cultures** (e.g., Japan, Italy, Mexico) tend to be more competitive and achievement-oriented. Leaders might be more assertive, direct, and focused on results.\n",
       "* **Feminine cultures** (e.g., Sweden, Norway, Netherlands) emphasize cooperation, consensus, and work-life balance. Leaders might adopt a more nurturing, supportive, and consensus-oriented style.\n",
       "\n",
       "**4. Uncertainty Avoidance (High vs. Low):** This dimension reflects a culture's tolerance for ambiguity and uncertainty.\n",
       "\n",
       "* **High uncertainty avoidance cultures** (e.g., Japan, France, Greece) prefer clear rules, procedures, and structures to minimize risk and uncertainty. Leaders in these cultures might favor detailed planning, clear instructions, and established hierarchies.  They might be less tolerant of deviation from established norms.\n",
       "* **Low uncertainty avoidance cultures** (e.g., Singapore, Denmark, the US) are more comfortable with ambiguity and risk. Leaders in these cultures might be more flexible, adaptable, and open to innovation. They might encourage experimentation and risk-taking.\n",
       "\n",
       "**5. Time Orientation (Long-Term vs. Short-Term):** This dimension focuses on a culture's perspective on time – whether it emphasizes long-term planning and future rewards or short-term gains and immediate gratification.\n",
       "\n",
       "* **Long-term oriented cultures** (e.g., China, Japan, South Korea) value perseverance, thrift, and long-term strategic planning. Leaders in these cultures might take a more patient, strategic approach, focusing on long-term goals and sustainable growth.\n",
       "* **Short-term oriented cultures** (e.g., the US, UK, many Latin American countries) emphasize immediate results and short-term gains. Leaders in these cultures might be more focused on quick wins and immediate returns.\n",
       "\n",
       "\n",
       "**Impact on Leadership Behavior:**  Understanding these dimensions is crucial for effective leadership in a global context.  A leader who understands the dominant cultural value dimensions of their team and stakeholders can adapt their leadership style to be more effective. For example, a leader working with a collectivist team might prioritize team-building activities and consensus-building, while a leader working with an individualistic team might focus on individual performance goals and rewards.  Ignoring these differences can lead to miscommunication, conflict, and ultimately, failure to achieve organizational goals.  The book emphasizes the importance of *adapting* one's leadership style, not simply adopting a single \"best\" style.  A culturally intelligent leader is flexible and can adjust their approach based on the specific cultural context.\n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "#### Baseline"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution Time: 0:00:07.100770\n",
      "prompt_token_count: 219\n",
      "candidates_token_count: 826\n",
      "total_token_count: 1045\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "Let's explore the concept of cultural value dimensions as discussed in \"Cultural Intelligence\" (assuming you're referring to the book by David Livermore) and how they influence leadership.  While the book doesn't explicitly list \"dimensions\" in a numbered, rigid framework like Hofstede's cultural dimensions, it emphasizes several key aspects that effectively function as such.  We can analyze these to understand their impact on leadership.\n",
       "\n",
       "Livermore's approach focuses on understanding cultural differences to improve leadership effectiveness in diverse settings.  Instead of rigid dimensions, he highlights key areas where cultures vary, impacting how leaders should adapt their approach.  These include:\n",
       "\n",
       "* **Communication Styles:**  This dimension encompasses both verbal and nonverbal communication.  Some cultures are high-context (meaning is implied and relies heavily on nonverbal cues), while others are low-context (meaning is explicitly stated).  A leader in a high-context culture might need to be more observant of nonverbal cues and less direct in their communication, while a leader in a low-context culture needs to be clear, concise, and explicit.  Misunderstandings can easily arise if a leader doesn't adapt their communication style.\n",
       "\n",
       "* **Decision-Making Processes:** Cultures differ significantly in how decisions are made. Some are more hierarchical (decisions flow top-down), while others are more collaborative (decisions are made through consensus).  A leader in a hierarchical culture might need to be more directive, while a leader in a collaborative culture needs to foster participation and discussion.  Imposing a top-down approach in a collaborative culture can be perceived as autocratic and ineffective.\n",
       "\n",
       "* **Time Orientation:**  Cultures vary in their perception of time – some are monochronic (linear, focused on schedules), while others are polychronic (flexible, multitasking).  A leader in a monochronic culture needs to be punctual and organized, while a leader in a polychronic culture needs to be more flexible and adaptable to changing priorities.  Ignoring time orientation can lead to frustration and missed deadlines.\n",
       "\n",
       "* **Power Distance:** This refers to the extent to which less powerful members of a society accept and expect that power is distributed unequally.  High power distance cultures expect clear hierarchies and deference to authority, while low power distance cultures value equality and participation.  A leader in a high power distance culture needs to maintain a formal and authoritative style, while a leader in a low power distance culture needs to be more collaborative and approachable.\n",
       "\n",
       "* **Individualism vs. Collectivism:** This dimension focuses on whether a culture prioritizes individual achievement or group harmony.  Individualistic cultures value independence and self-reliance, while collectivistic cultures emphasize group cohesion and interdependence.  A leader in an individualistic culture might focus on rewarding individual performance, while a leader in a collectivistic culture might focus on team goals and collaboration.\n",
       "\n",
       "\n",
       "**Impact on Leadership Behavior:**\n",
       "\n",
       "Understanding these cultural variations is crucial for effective leadership.  A culturally intelligent leader adapts their behavior to the specific cultural context. This might involve:\n",
       "\n",
       "* **Active Listening and Observation:** Paying close attention to both verbal and nonverbal cues to understand the perspectives and preferences of team members from different cultural backgrounds.\n",
       "* **Flexibility and Adaptability:** Being willing to adjust their leadership style to suit the cultural norms and expectations of the team.\n",
       "* **Building Trust and Rapport:**  Creating a safe and inclusive environment where team members feel comfortable sharing their ideas and perspectives.\n",
       "* **Cross-Cultural Communication Training:**  Seeking out opportunities to improve their understanding of different cultures and communication styles.\n",
       "* **Seeking Feedback:** Regularly soliciting feedback from team members to ensure that their leadership style is effective and well-received.\n",
       "\n",
       "\n",
       "In essence, Livermore's work emphasizes the importance of *adaptability* and *awareness* as core components of effective leadership in a multicultural environment.  It's not about adopting a single \"best\" style, but rather about developing the capacity to understand and respond appropriately to the diverse cultural contexts in which leaders operate.  This requires ongoing learning and a commitment to cultural sensitivity.\n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "synergy(\"\"\"\n",
    "Can you explain the concept of \"cultural value dimensions\" discussed in \"Cultural Intelligence\" and how they impact leadership behavior?\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e515e5cc",
   "metadata": {
    "papermill": {
     "duration": 0.036514,
     "end_time": "2024-11-26T20:38:37.900273",
     "exception": false,
     "start_time": "2024-11-26T20:38:37.863759",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Synergy.3\n",
    "\n",
    "Helps in recognizing and avoiding a common pitfall in cross-cultural leadership"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "c008f188",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:38:37.975252Z",
     "iopub.status.busy": "2024-11-26T20:38:37.974248Z",
     "iopub.status.idle": "2024-11-26T20:39:03.468240Z",
     "shell.execute_reply": "2024-11-26T20:39:03.467133Z"
    },
    "papermill": {
     "duration": 25.533972,
     "end_time": "2024-11-26T20:39:03.470627",
     "exception": false,
     "start_time": "2024-11-26T20:38:37.936655",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "#### Assistant"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution Time: 0:00:19.376143\n",
      "prompt_token_count: 476673\n",
      "candidates_token_count: 566\n",
      "total_token_count: 477239\n",
      "cached_content_token_count: 476644\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "Ethnocentrism is the belief that one's own culture is superior to all others and serves as the standard by which all other cultures are measured.  It's a perspective that unconsciously places one's own cultural norms, values, and beliefs at the center, judging other cultures based on how closely they align with those standards.  This can lead to misunderstandings, misinterpretations, and biased judgments of individuals and their behaviors.\n",
       "\n",
       "A leader can avoid ethnocentrism by actively working to cultivate cultural intelligence (CQ).  This involves several key strategies:\n",
       "\n",
       "* **Developing self-awareness:**  Leaders must first understand their own cultural biases and assumptions.  This requires introspection, reflection on past experiences, and a willingness to acknowledge that their own cultural lens shapes their perceptions.  Tools like personality assessments (e.g., the VIA Institute on Character, the Enneagram) can help uncover ingrained beliefs and preferences.\n",
       "\n",
       "* **Actively seeking knowledge:** Leaders should actively seek to understand the cultures of the people they work with. This goes beyond simply learning facts and etiquette; it involves understanding the underlying values, beliefs, and assumptions that shape those cultures.  Researching the history, social structures, and communication styles of different cultures is crucial.\n",
       "\n",
       "* **Practicing empathy and perspective-taking:** Leaders must strive to see situations from the perspective of others, understanding that different cultures have different ways of thinking, feeling, and acting.  This involves suspending judgment and actively listening to understand the other person's point of view, even if it differs significantly from their own.\n",
       "\n",
       "* **Developing a flexible mindset:**  Leaders need to be open to new experiences and willing to adapt their behavior and communication styles to different cultural contexts.  This involves recognizing that there is no single \"right\" way to do things and being willing to adjust their approach based on the specific cultural situation.\n",
       "\n",
       "* **Building relationships:**  Strong relationships are built on trust and mutual respect. Leaders should invest time in building relationships with people from different cultures, demonstrating genuine interest in their perspectives and experiences.  This helps to break down stereotypes and foster understanding.\n",
       "\n",
       "* **Seeking feedback:** Leaders should actively solicit feedback from people from different cultures to identify areas where their behavior or communication might be misinterpreted or offensive.  This feedback is invaluable in identifying blind spots and improving intercultural competence.\n",
       "\n",
       "* **Promoting inclusivity:** Leaders should create an organizational culture that values diversity and inclusivity. This involves establishing clear policies and procedures that promote fairness and equity, providing training and development opportunities to enhance intercultural skills, and celebrating the contributions of people from different cultural backgrounds.\n",
       "\n",
       "\n",
       "By consistently practicing these strategies, leaders can move beyond ethnocentrism and cultivate a more inclusive and effective leadership style that values and leverages the strengths of a diverse workforce.\n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "#### Baseline"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution Time: 0:00:06.103124\n",
      "prompt_token_count: 221\n",
      "candidates_token_count: 697\n",
      "total_token_count: 918\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "Let's explore ethnocentrism and how to avoid it as a leader in a multicultural and international environment.  Since I don't have access to specific textbooks you might be using, I'll provide a general explanation grounded in common knowledge about cross-cultural management.\n",
       "\n",
       "**Ethnocentrism** is the tendency to view one's own culture and its values as superior to others, often unconsciously.  It involves judging other cultures by the standards of one's own, leading to misunderstandings, misinterpretations, and potentially, conflict.  Essentially, it's believing your way is the *only* right way.\n",
       "\n",
       "For example, an ethnocentric leader might assume that direct communication, common in some cultures, is always the best approach, failing to recognize that indirect communication is preferred in other cultures.  They might impose their own management style, disregarding the preferences and expectations of team members from different cultural backgrounds.\n",
       "\n",
       "Here's how a leader can avoid ethnocentrism:\n",
       "\n",
       "1. **Self-Awareness:** The first step is recognizing your own biases and assumptions.  Reflect on your own cultural background and how it shapes your perspectives.  Consider taking a cultural self-assessment tool to identify potential blind spots.\n",
       "\n",
       "2. **Cultural Intelligence (CQ):** Develop your cultural intelligence.  CQ involves three key components:\n",
       "    * **Cognitive CQ:**  Understanding cultural differences and their impact on behavior. This involves learning about different cultural norms, values, and communication styles.\n",
       "    * **Motivational CQ:**  Having the interest and confidence to engage with people from different cultures. This means being open-minded and willing to learn.\n",
       "    * **Behavioral CQ:**  Adapting your behavior to different cultural contexts. This involves adjusting your communication style, leadership approach, and decision-making process to suit the specific cultural context.\n",
       "\n",
       "3. **Active Listening and Observation:**  Pay close attention to what people say and how they say it.  Observe their nonverbal cues and body language.  Ask clarifying questions to ensure you understand their perspectives.  Avoid making assumptions based on your own cultural lens.\n",
       "\n",
       "4. **Seek Diverse Perspectives:**  Actively solicit input from team members from different cultural backgrounds.  Create opportunities for open dialogue and discussion.  Value diverse viewpoints and incorporate them into decision-making processes.\n",
       "\n",
       "5. **Empathy and Respect:**  Treat everyone with respect and understanding.  Try to see things from their perspective, even if you don't fully agree with their views.  Show empathy and acknowledge the validity of their experiences.\n",
       "\n",
       "6. **Continuous Learning:**  Ethnocentrism is a subtle bias, and overcoming it requires ongoing effort.  Continuously seek opportunities to learn about different cultures.  Read books, articles, and other resources on cross-cultural management.  Attend workshops and training sessions.\n",
       "\n",
       "7. **Feedback and Reflection:**  Regularly solicit feedback from your team members on your leadership style and how you can better adapt to their cultural needs.  Reflect on your interactions and identify areas for improvement.\n",
       "\n",
       "\n",
       "By actively working on these points, a leader can cultivate a more inclusive and effective leadership style that values and leverages the diverse talents and perspectives of a multicultural team.  Remember, avoiding ethnocentrism is an ongoing process, not a destination.  The more you learn and adapt, the better you'll become at leading in a globalized world.\n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "synergy(\"\"\"\n",
    "Can you explain what \"ethnocentrism\" is, and how a leader can avoid it when working with people from different cultures\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30ba58fc",
   "metadata": {
    "papermill": {
     "duration": 0.03728,
     "end_time": "2024-11-26T20:39:03.545650",
     "exception": false,
     "start_time": "2024-11-26T20:39:03.508370",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Synergy.4\n",
    "\n",
    "Provides practical exercises to reinforce the theoretical concepts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "a2dc24e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:39:03.621999Z",
     "iopub.status.busy": "2024-11-26T20:39:03.621535Z",
     "iopub.status.idle": "2024-11-26T20:39:37.647296Z",
     "shell.execute_reply": "2024-11-26T20:39:37.646046Z"
    },
    "papermill": {
     "duration": 34.104767,
     "end_time": "2024-11-26T20:39:37.687619",
     "exception": false,
     "start_time": "2024-11-26T20:39:03.582852",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "#### Assistant"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution Time: 0:00:26.238106\n",
      "prompt_token_count: 476689\n",
      "candidates_token_count: 917\n",
      "total_token_count: 477606\n",
      "cached_content_token_count: 476644\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "I cannot directly access and process information from specific books like \"Cultural Intelligence: A Guide to Working with People from Different Backgrounds\" or a particular edition of \"Organizational Behavior.\"  My knowledge is based on the data I was trained on.  However, I can provide you with exercises and case studies designed to develop your cultural intelligence, drawing on common principles found in such texts.  These exercises will cover the key areas of cultural intelligence:  metacognition, motivation, and behavior.\n",
       "\n",
       "**Exercises:**\n",
       "\n",
       "**1. Metacognition (Thinking about Thinking):**\n",
       "\n",
       "* **Case Study:** Imagine you're leading a project team with members from Japan, Brazil, and Germany.  The Japanese team member is meticulous and detail-oriented, the Brazilian is highly expressive and collaborative, and the German is direct and process-focused.  A significant deadline is approaching, and the Brazilian team member is struggling to meet their individual targets.\n",
       "\n",
       "* **Exercise:**  Describe your thought process in addressing this situation.  What are your assumptions about each team member's behavior? How would you gather more information to understand the root cause of the delay? What strategies would you employ to motivate the Brazilian team member and ensure the project stays on track?  Consider the potential impact of your communication style on each team member.  Write down your thought process step-by-step.\n",
       "\n",
       "**2. Motivation (Self-Efficacy and Confidence):**\n",
       "\n",
       "* **Case Study:** You're a newly hired manager at a multinational company with a significant presence in China. You're tasked with negotiating a crucial contract with a Chinese business partner. You have limited experience in China and feel apprehensive about the cultural nuances involved.\n",
       "\n",
       "* **Exercise:** Describe your feelings and anxieties. How would you build your confidence and motivation to tackle this challenge? What steps would you take to prepare yourself for the negotiation, including research, seeking advice, and practicing your approach?  How would you maintain your confidence if you encounter unexpected challenges during the negotiation?\n",
       "\n",
       "**3. Behavior (Adapting and Performing):**\n",
       "\n",
       "* **Case Study:** You're leading a team meeting with colleagues from various cultural backgrounds.  One colleague consistently interrupts, another speaks very softly, and a third uses extensive hand gestures.\n",
       "\n",
       "* **Exercise:**  Describe how you would adapt your communication style to each colleague.  What nonverbal cues would you pay attention to? How would you ensure that everyone feels heard and respected?  How would you handle potential misunderstandings or conflicts arising from communication styles?  Consider the context of the meeting and the overall organizational culture.\n",
       "\n",
       "\n",
       "**4.  Integrating the Three Components:**\n",
       "\n",
       "* **Case Study:** A US-based company is launching a new product in India.  They've conducted market research but are unsure how to best adapt their marketing strategy to the Indian market.  They are considering different approaches: a direct sales approach, using local distributors, or a combination of both.\n",
       "\n",
       "* **Exercise:**  Analyze this situation using the three components of cultural intelligence.\n",
       "    * **Metacognition:** What are the key cultural factors to consider when making this decision? What information do you need to gather? What are your assumptions about the Indian market?\n",
       "    * **Motivation:** How would you build your team's confidence in making this decision? How would you address potential anxieties or uncertainties?\n",
       "    * **Behavior:** How would you adapt your communication and negotiation style to work effectively with Indian business partners? What distribution strategy would you recommend and why?  Justify your choice based on your analysis.\n",
       "\n",
       "\n",
       "**Additional Case Study Ideas (Adapt to your specific needs):**\n",
       "\n",
       "* **Negotiating a business deal in Japan:**  Consider the importance of building relationships, the role of silence, and the emphasis on formality.\n",
       "* **Managing a conflict between team members from different cultural backgrounds:** Focus on communication styles, conflict resolution techniques, and the importance of empathy.\n",
       "* **Leading a cross-cultural team through a crisis:**  Analyze the importance of clear communication, decisive action, and cultural sensitivity.\n",
       "* **Adapting a product or service for a new international market:** Consider the impact of cultural preferences, local regulations, and pricing strategies.\n",
       "\n",
       "\n",
       "Remember to analyze these case studies by considering the specific cultural values and communication styles involved.  Use the frameworks of Hofstede's cultural dimensions and Hall's high/low context communication to deepen your analysis.  The goal is to develop your ability to understand, adapt, and perform effectively in diverse cultural settings.\n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "#### Baseline"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution Time: 0:00:07.772030\n",
      "prompt_token_count: 237\n",
      "candidates_token_count: 841\n",
      "total_token_count: 1078\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "Let's work on applying the principles of cultural intelligence from those two books to improve your leadership in multicultural and international environments.  Since I don't have direct access to the content of those specific textbooks, I'll provide exercises and case studies based on common themes found in literature on cultural intelligence and organizational behavior.  You can then adapt these using the specific details and frameworks from your books.\n",
       "\n",
       "**Exercise 1:  Analyzing Cultural Dimensions in a Workplace Scenario**\n",
       "\n",
       "* **Objective:** To apply Hofstede's cultural dimensions (power distance, individualism vs. collectivism, masculinity vs. femininity, uncertainty avoidance, long-term vs. short-term orientation) to a real-world scenario.\n",
       "\n",
       "* **Scenario:** Imagine you're leading a team with members from Japan, Brazil, and Germany working on a project with a tight deadline.  \n",
       "\n",
       "* **Exercise:**\n",
       "    1.  **Identify potential cultural clashes:** Based on Hofstede's dimensions, what potential conflicts might arise between team members due to their cultural backgrounds?  (e.g., differing communication styles, approaches to decision-making, attitudes towards hierarchy).  Refer to your textbooks for specific characteristics of each culture along these dimensions.\n",
       "    2.  **Develop strategies for managing these clashes:** How would you adapt your leadership style to address these potential conflicts and foster effective teamwork?  Consider strategies like active listening, clear communication, and building trust.\n",
       "    3.  **Evaluate the effectiveness of your strategies:**  How would you measure the success of your approach? What indicators would you look for?\n",
       "\n",
       "**Exercise 2:  Developing a Cross-Cultural Communication Plan**\n",
       "\n",
       "* **Objective:** To create a communication plan that accounts for cultural nuances in communication styles.\n",
       "\n",
       "* **Scenario:** You're launching a new product in a market with diverse cultural groups.\n",
       "\n",
       "* **Exercise:**\n",
       "    1.  **Identify your target audiences:**  Describe the key cultural groups you'll be targeting.\n",
       "    2.  **Analyze communication preferences:**  Research the preferred communication styles (direct vs. indirect, high-context vs. low-context) of each group.  Again, your textbooks will be invaluable here.\n",
       "    3.  **Develop a communication plan:** Create a plan outlining how you will adapt your messaging and communication channels to resonate with each cultural group.  Consider language, visuals, tone, and media choices.\n",
       "    4.  **Evaluate potential challenges:** What potential communication barriers might you encounter, and how will you overcome them?\n",
       "\n",
       "**Case Study 1: The Misunderstood Feedback**\n",
       "\n",
       "* **Scenario:** A manager provides direct, critical feedback to a team member from a high-context culture (e.g., Japan). The team member becomes withdrawn and less productive.\n",
       "\n",
       "* **Analysis:**\n",
       "    1.  Why might the direct feedback have been negatively received?  Consider the cultural implications of direct vs. indirect feedback.\n",
       "    2.  How could the manager have delivered the feedback more effectively, considering the team member's cultural background?\n",
       "    3.  What steps could the manager take to repair the relationship and improve communication going forward?\n",
       "\n",
       "**Case Study 2: The Conflicting Project Priorities**\n",
       "\n",
       "* **Scenario:** A project team with members from individualistic and collectivistic cultures is struggling to agree on project priorities.  Individualistic members prioritize individual contributions and recognition, while collectivistic members prioritize group harmony and consensus.\n",
       "\n",
       "* **Analysis:**\n",
       "    1.  How do the differing cultural values contribute to the conflict?\n",
       "    2.  What strategies could the leader use to facilitate a compromise and achieve project goals while respecting the cultural values of all team members?\n",
       "    3.  How can the leader foster a sense of shared purpose and team cohesion despite the differing cultural perspectives?\n",
       "\n",
       "\n",
       "Remember to use your textbooks to enrich these exercises and case studies with specific theories, models, and examples.  After completing these, reflect on your learning and identify areas where you need further development.  This iterative process of learning, application, and reflection is key to improving your cultural intelligence.\n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "synergy(\"\"\"\n",
    "Can you provide some exercises or case studies that allow me to apply the principles of cultural intelligence discussed in\n",
    "\"Cultural Intelligence: A Guide to Working with People from Different Backgrounds\"  and \"Organizational Behavior\"\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fca69a72",
   "metadata": {
    "papermill": {
     "duration": 0.038048,
     "end_time": "2024-11-26T20:39:37.764751",
     "exception": false,
     "start_time": "2024-11-26T20:39:37.726703",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Synergy.5\n",
    "\n",
    "Applies the concept of cultural intelligence to real-world scenarios of conflict resolution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "f6296385",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-26T20:39:37.845568Z",
     "iopub.status.busy": "2024-11-26T20:39:37.845138Z",
     "iopub.status.idle": "2024-11-26T20:40:08.169605Z",
     "shell.execute_reply": "2024-11-26T20:40:08.168490Z"
    },
    "papermill": {
     "duration": 30.406677,
     "end_time": "2024-11-26T20:40:08.209169",
     "exception": false,
     "start_time": "2024-11-26T20:39:37.802492",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "#### Assistant"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution Time: 0:00:23.191716\n",
      "prompt_token_count: 476665\n",
      "candidates_token_count: 874\n",
      "total_token_count: 477539\n",
      "cached_content_token_count: 476644\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "A leader can leverage cultural intelligence (CQ) to manage conflicts in a multicultural team by employing a multi-faceted approach that addresses the cognitive, motivational, and behavioral aspects of the situation.  Here's a breakdown:\n",
       "\n",
       "**1. Acquire Knowledge:**\n",
       "\n",
       "* **Understand Cultural Value Dimensions:** The leader needs to be aware of the cultural value dimensions (Hofstede's dimensions: individualism vs. collectivism, power distance, uncertainty avoidance, masculinity vs. femininity, long-term vs. short-term orientation; GLOBE dimensions: uncertainty avoidance, power distance, institutional collectivism, in-group collectivism, gender egalitarianism, assertiveness, future orientation, performance orientation, humane orientation) at play within the team.  Different cultures may approach conflict differently.  For example, some cultures value direct confrontation, while others prefer indirect communication and conflict avoidance.  Understanding these differences is crucial.\n",
       "* **Recognize Individual Differences:**  CQ emphasizes that generalizations about entire cultural groups are insufficient. The leader must recognize that individuals within a culture will have unique experiences and perspectives that shape their responses to conflict.  Avoid stereotyping.\n",
       "* **Identify Communication Styles:**  Different cultures have different communication styles (high-context vs. low-context, direct vs. indirect).  A leader needs to understand how these styles might contribute to misunderstandings and conflict.  For instance, a direct communication style might be perceived as rude or aggressive in a high-context culture.\n",
       "\n",
       "**2. Build Strategic Thinking (Metacognition):**\n",
       "\n",
       "* **Analyze the Conflict:** The leader needs to analyze the conflict systematically, identifying the root causes and the specific behaviors and communication styles that contributed to the conflict.  This involves stepping back from immediate reactions and objectively assessing the situation.\n",
       "* **Develop a Plan:** Based on the analysis, the leader should develop a plan for resolving the conflict. This plan should consider the cultural nuances and individual differences within the team.  The plan should include specific steps, timelines, and methods for communication.\n",
       "* **Anticipate Challenges:** The leader should anticipate potential challenges and develop contingency plans.  For example, if a team member is reluctant to participate in a direct confrontation, the leader might need to find alternative methods for resolving the conflict, such as mediation or facilitated discussion.\n",
       "\n",
       "**3. Develop Motivation (Mindfulness):**\n",
       "\n",
       "* **Foster a Culture of Respect:** The leader needs to create a team environment where all members feel safe to express their opinions and perspectives without fear of judgment or reprisal.  This requires fostering a culture of mutual respect and understanding.\n",
       "* **Promote Self-Efficacy:** The leader should help team members develop their self-efficacy in managing conflict. This involves building their confidence in their ability to navigate difficult intercultural situations and find solutions.  Providing training, coaching, and mentoring can be helpful.\n",
       "* **Encourage Active Listening:**  Mindfulness involves paying close attention to both verbal and nonverbal cues. The leader should model active listening and encourage team members to do the same.  This helps ensure that everyone feels heard and understood.\n",
       "\n",
       "**4. Adapt and Perform (Behavior):**\n",
       "\n",
       "* **Facilitate Communication:** The leader should facilitate communication between conflicting parties, ensuring that everyone has an opportunity to express their perspective.  This might involve using interpreters, providing written summaries of discussions, or employing other communication strategies that accommodate different styles.\n",
       "* **Mediate and Negotiate:** The leader may need to act as a mediator or negotiator, helping conflicting parties find common ground and reach a mutually acceptable solution.  This requires flexibility and a willingness to adapt to different negotiation styles.\n",
       "* **Implement Solutions:** Once a solution is reached, the leader needs to ensure that it is implemented effectively and that all team members understand their roles and responsibilities.  This may involve adjusting team processes or communication protocols.\n",
       "* **Monitor and Evaluate:** The leader should monitor the situation after the conflict is resolved to ensure that the solution is working and to identify any new challenges that may arise.  This requires ongoing evaluation and a willingness to adapt the approach as needed.\n",
       "\n",
       "\n",
       "By systematically applying these CQ principles, a leader can effectively manage conflicts, build stronger team relationships, and foster a more productive and inclusive multicultural work environment.  The key is to be flexible, empathetic, and willing to learn from each experience.\n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "#### Baseline"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution Time: 0:00:07.117707\n",
      "prompt_token_count: 213\n",
      "candidates_token_count: 879\n",
      "total_token_count: 1092\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "Let's explore how cultural intelligence (CQ) helps leaders manage conflict in multicultural teams.  Since I don't have access to specific textbooks you might be using, I'll offer a general framework based on common leadership and cross-cultural management principles.  Think of this as a starting point – you can then enrich it with the specific concepts and models from your textbooks.\n",
       "\n",
       "Effective conflict management in multicultural teams hinges on understanding that conflict isn't inherently negative.  It's an opportunity for growth and improved team dynamics, provided it's handled constructively.  CQ plays a crucial role in this constructive management.  We can break down CQ into four key components, and see how each contributes to conflict resolution:\n",
       "\n",
       "* **Cognitive CQ (Head):** This refers to your knowledge about different cultures and your ability to understand cultural differences.  In conflict management, this means recognizing that different cultures have different communication styles, approaches to problem-solving, and perceptions of conflict itself. For example, some cultures are more direct and confrontational, while others prefer indirect communication and conflict avoidance.  A leader with high cognitive CQ will anticipate these differences and adapt their approach accordingly.  They might ask themselves: \"How might my team members from Culture X interpret this conflict differently than my team members from Culture Y?\"\n",
       "\n",
       "* **Metacognitive CQ (Mind):** This is your awareness of your own cultural biases and assumptions, and your ability to adapt your thinking and behavior accordingly.  In conflict situations, this means being mindful of your own reactions and interpretations.  Are you projecting your own cultural norms onto the situation?  Are you making assumptions about the other person's intentions based on your own cultural background?  A leader with high metacognitive CQ will actively reflect on their own biases and strive for objectivity.  They might engage in self-reflection: \"Am I letting my own cultural preferences influence how I'm approaching this conflict?\"\n",
       "\n",
       "* **Motivational CQ (Heart):** This is your confidence and motivation to engage with people from different cultures.  In conflict management, this means having the willingness to understand other perspectives, even if they differ significantly from your own.  A leader with high motivational CQ will be persistent in finding common ground and resolving the conflict, even when faced with challenges.  They might demonstrate their commitment by saying: \"I'm committed to finding a solution that works for everyone, even if it takes time and effort.\"\n",
       "\n",
       "* **Behavioral CQ (Body):** This is your ability to adapt your behavior to different cultural contexts.  In conflict management, this means adjusting your communication style, your approach to negotiation, and your overall demeanor to suit the specific cultural context of the conflict.  A leader with high behavioral CQ will be flexible and adaptable, demonstrating empathy and respect for all parties involved.  They might actively adjust their communication: \"Given that this team member prefers indirect communication, I'll approach the conflict more subtly.\"\n",
       "\n",
       "\n",
       "**Applying CQ to Conflict Resolution:**\n",
       "\n",
       "Here's how a leader can use these CQ components to manage conflict:\n",
       "\n",
       "1. **Identify the Cultural Roots of the Conflict:**  Use your cognitive CQ to understand how cultural differences might be contributing to the conflict.  Are communication styles clashing? Are there differing expectations about hierarchy or decision-making?\n",
       "\n",
       "2. **Manage Your Own Biases:**  Employ your metacognitive CQ to identify and manage your own biases and assumptions.  Avoid making judgments based on stereotypes.\n",
       "\n",
       "3. **Show Empathy and Respect:**  Demonstrate your motivational CQ by actively listening to all parties involved and showing genuine interest in their perspectives.\n",
       "\n",
       "4. **Adapt Your Communication Style:**  Use your behavioral CQ to adjust your communication style to suit the cultural preferences of the individuals involved.  This might involve using different communication channels, adjusting your tone, or employing different conflict resolution strategies.\n",
       "\n",
       "5. **Find Common Ground:**  Focus on shared goals and values to build consensus and find mutually acceptable solutions.\n",
       "\n",
       "6. **Establish Clear Communication Protocols:**  Proactively establish clear communication protocols and guidelines for conflict resolution within the team to prevent future conflicts.\n",
       "\n",
       "\n",
       "By developing their CQ, leaders can effectively navigate the complexities of multicultural conflict, transforming potential disagreements into opportunities for team growth and stronger relationships. Remember to consult your textbooks for specific models and frameworks that can further enhance your understanding.\n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "synergy(\"\"\"\n",
    "Can you explain how a leader can use cultural intelligence to manage conflicts in a multicultural team?\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac3b8a3f",
   "metadata": {
    "papermill": {
     "duration": 0.038287,
     "end_time": "2024-11-26T20:40:08.286812",
     "exception": false,
     "start_time": "2024-11-26T20:40:08.248525",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# CONCLUSIONS"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43227a11",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "papermill": {
     "duration": 0.038108,
     "end_time": "2024-11-26T20:40:08.363580",
     "exception": false,
     "start_time": "2024-11-26T20:40:08.325472",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Summary\n",
    "\n",
    "**Sigma uses 672,459 inputs token (context caching)**\n",
    "- **Sigma.1**: Assistant goes straight to the point, focusing on the Python implementation as requested\n",
    "    - *Gain*: minor\n",
    "- **Sigma.2**: Assistant provides more explanation on the Python implementation (e.g., error handling)\n",
    "    - *Gain*: minor\n",
    "- **Sigma.3**: Assistant avoids hallucination as factorial are not covered in the provided textbook\n",
    "    - *Gain*: major\n",
    "- **Sigma.4**: Assistant avoid repeating textbook concepts, and explains how to interpret the graph\n",
    "    - *Gain*: medium\n",
    "- **Sigma.5**: Assistant uses pure Python to better explain concepts, instead of using numpy\n",
    "    - *Gain*: medium\n",
    "- **Sigma.6**: Assistant provides examples from the course and don't invent a new exercice\n",
    "    - *Gain*: medium\n",
    "\n",
    "---\n",
    "\n",
    "**Synergy uses 476,451 inputs token (context caching)**\n",
    "- **Synergy.1**: The Assistant can summarize content from the textbooks at its disposal\n",
    "    - *Gain*: major\n",
    "- **Synergy.2**: The Assistant provides much more details on the textbooks than the baseline\n",
    "    - *Gain*: major\n",
    "- **Synergy.3**: The Assistant gave an answer similar to the baseline, with few minor differences\n",
    "    - *Gain*: none\n",
    "- **Synergy.4**: The Assistant didn't recognized the textbook titles but gave more engaging exercices\n",
    "    - *Gain*: medium\n",
    "- **Synergy 5**: The Assistant exposes much more detailed content than the baseline\n",
    "    - *Gain*: medium"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fed38392",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "papermill": {
     "duration": 0.038576,
     "end_time": "2024-11-26T20:40:08.440627",
     "exception": false,
     "start_time": "2024-11-26T20:40:08.402051",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Usefulness\n",
    "\n",
    "**Pros:**\n",
    "1. Assistant has positive gains on 10 / 11 cases (2 minor, 5 medium, 3 major)\n",
    "2. Assistant leverages the content inside the books to ground its answer\n",
    "3. Assistant can combine textbooks to create new learning experiences\n",
    "4. Assistant can better contextualize the answers and avoid repetition\n",
    "5. Assistant meets the student where it is on its learning path\n",
    "6. Assistant can personalize the content to the user needs\n",
    "7. Assistant can use safety filters limiting misuses\n",
    "\n",
    "**Cons:**\n",
    "1. Baseline sometimes has access to the same knowledge (although with less details)\n",
    "2. Baseline provides good Python implementations, on par with the assistants\n",
    "\n",
    "**Conclusions: The assistant provides value in nearly all case compared to the baseline**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ff70161",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-10T21:42:53.393381Z",
     "iopub.status.busy": "2024-11-10T21:42:53.392842Z",
     "iopub.status.idle": "2024-11-10T21:42:53.399568Z",
     "shell.execute_reply": "2024-11-10T21:42:53.398003Z",
     "shell.execute_reply.started": "2024-11-10T21:42:53.393335Z"
    },
    "jp-MarkdownHeadingCollapsed": true,
    "papermill": {
     "duration": 0.037945,
     "end_time": "2024-11-26T20:40:08.517155",
     "exception": false,
     "start_time": "2024-11-26T20:40:08.479210",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Execution Time\n",
    "\n",
    "- Baseline requests took **5 seconds** to complete\n",
    "- Assistant requests took **25 seconds** to complete\n",
    "- Thus, the assistant takes 5 times as long to answer the user\n",
    "- 25 seconds is too long to have fast pace conversation with the assistant\n",
    "\n",
    "**Conclusions: The execution time can be problematic to keep the focus of the learner**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3543782",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "papermill": {
     "duration": 0.037789,
     "end_time": "2024-11-26T20:40:08.593114",
     "exception": false,
     "start_time": "2024-11-26T20:40:08.555325",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Return of Investment\n",
    "\n",
    "**Retrieval (no context caching):**\n",
    "- The cost is \\\\$0.05 / request with Gemini Flash and \\\\$0.86 with Gemini Pro\n",
    "- From a cost perspective, we cannot leverage Gemini Pro at scale with this cost\n",
    "- From my tests, the added accuracy of Gemini pro does not justify its use for this case\n",
    "\n",
    "**Assistant (with context caching):**\n",
    "- The cost of the cache is \\\\$0.55 / hour on average\n",
    "- The cost of a request is \\\\$0.02 on average (\\\\$0.75 without context caching)\n",
    "- On a learning session, caching is beneficial if the student sends at least 10 queries\n",
    "\n",
    "**Conclusion: The cost of the system is OK as long as context caching is used during long learning sessions**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee2871e3",
   "metadata": {
    "papermill": {
     "duration": 0.039328,
     "end_time": "2024-11-26T20:40:08.671511",
     "exception": false,
     "start_time": "2024-11-26T20:40:08.632183",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Limitations and Investigations\n",
    "\n",
    "**Limitations**:\n",
    "1. While cost per request is OK, execution time should be reduced to improve the user experience\n",
    "2. Gemini can scale well when using extracting texts, but several issues where found when using files:\n",
    "    - Context caching can be unreliable: https://discuss.ai.google.dev/t/unreliability-of-gemini-api-error-while-creating-cache/47852\n",
    "    - Requests are really slow when using files, even with context caching (timeout)\n",
    "    - File API is not suited for large PDF (e.g., > 1000 pages)\n",
    "    - File API consumes more tokens than pure text\n",
    "3. Consistently retrieving the same textbooks is problematic(especially for Synergy beyond 3 books)\n",
    "4. Caching must be used extensively to avoid sending the same requests during development\n",
    "\n",
    "**Investigations:**\n",
    "1. Test more textbook combinations to evaluate the benefit of the solution\n",
    "2. Improve the prompt or use fine-tuning to keep using cost-efficient models (e.g., Gemini Flash)\n",
    "3. Provide several File APIs to support other patterns (e.g., extract text, use images with OCR, ...)\n",
    "4. Retrieval Augmented Generation (RAG) could be used to reduce the number of input tokens, but could impact the experience\n",
    "\n",
    "**Conclusion: Using more tokens is beneficial to provide more context and enable a more personalized learning experience, but it impacts the cost and execution time.**\n",
    "- This can be mitigated using caching within the applications and the Gemini API. Overall, the benefit of the approach seems to outweight the costs."
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 9881586,
     "sourceId": 83735,
     "sourceType": "competition"
    },
    {
     "datasetId": 5960857,
     "sourceId": 9747848,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 740.762646,
   "end_time": "2024-11-26T20:40:09.431412",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-11-26T20:27:48.668766",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
